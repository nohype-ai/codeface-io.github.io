{"codebase":{"name":"SwiftNodes","files":[{"name":"Package.swift","symbols":[{"range":{"start":{"line":4,"character":0},"end":{"line":39,"character":1}},"kind":13,"selectionRange":{"start":{"line":4,"character":4},"end":{"line":4,"character":11}},"name":"package"}],"code":"// swift-tools-version:5.1\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"SwiftNodes\",\n    platforms: [.iOS(.v12), .tvOS(.v12), .macOS(.v10_15)],\n    products: [\n        .library(\n            name: \"SwiftNodes\",\n            targets: [\"SwiftNodes\"]\n        ),\n    ],\n    dependencies: [\n        .package(\n            url: \"https://github.com/flowtoolz/SwiftyToolz.git\",\n            .branch(\"master\")\n        ),\n        .package(\n            url: \"https://github.com/apple/swift-collections.git\",\n            from: \"1.0.2\"\n        )\n    ],\n    targets: [\n        .target(\n            name: \"SwiftNodes\",\n            dependencies: [\n                \"SwiftyToolz\",\n                .product(name: \"OrderedCollections\",\n                         package: \"swift-collections\"),\n            ],\n            path: \"Code\"\n        ),\n        .testTarget(\n            name: \"SwiftNodesTests\",\n            dependencies: [\"SwiftNodes\", \"SwiftyToolz\"],\n            path: \"Tests\"\n        ),\n    ]\n)\n"}],"subfolders":[{"name":"Tests","files":[{"name":"SwiftNodesTests.swift","symbols":[{"range":{"start":{"line":3,"character":0},"end":{"line":194,"character":1}},"kind":5,"selectionRange":{"start":{"line":3,"character":6},"end":{"line":3,"character":21}},"name":"SwiftNodesTests","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":14,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":37}},"name":"testCodeExamplesFromREADME()","children":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":52}},"kind":13,"selectionRange":{"start":{"line":6,"character":12},"end":{"line":6,"character":17}},"name":"graph"},{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":35}},"kind":13,"selectionRange":{"start":{"line":7,"character":12},"end":{"line":7,"character":17}},"name":"node1"},{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":49}},"kind":13,"selectionRange":{"start":{"line":9,"character":12},"end":{"line":9,"character":23}},"name":"valueForID1"},{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":47}},"kind":13,"selectionRange":{"start":{"line":10,"character":12},"end":{"line":10,"character":22}},"name":"nodeForID1"}]},{"range":{"start":{"line":16,"character":4},"end":{"line":25,"character":5}},"kind":6,"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":26}},"name":"testAddingEdges()","children":[{"range":{"start":{"line":17,"character":8},"end":{"line":17,"character":52}},"kind":13,"selectionRange":{"start":{"line":17,"character":12},"end":{"line":17,"character":17}},"name":"graph"},{"range":{"start":{"line":18,"character":8},"end":{"line":18,"character":35}},"kind":13,"selectionRange":{"start":{"line":18,"character":12},"end":{"line":18,"character":17}},"name":"node1"},{"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":35}},"kind":13,"selectionRange":{"start":{"line":19,"character":12},"end":{"line":19,"character":17}},"name":"node2"}]},{"range":{"start":{"line":27,"character":4},"end":{"line":37,"character":5}},"kind":6,"selectionRange":{"start":{"line":27,"character":9},"end":{"line":27,"character":37}},"name":"testAddingEdgeWithBigCount()","children":[{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":52}},"kind":13,"selectionRange":{"start":{"line":28,"character":12},"end":{"line":28,"character":17}},"name":"graph"},{"range":{"start":{"line":29,"character":8},"end":{"line":29,"character":35}},"kind":13,"selectionRange":{"start":{"line":29,"character":12},"end":{"line":29,"character":17}},"name":"node1"},{"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":35}},"kind":13,"selectionRange":{"start":{"line":30,"character":12},"end":{"line":30,"character":17}},"name":"node2"}]},{"range":{"start":{"line":39,"character":4},"end":{"line":45,"character":5}},"kind":6,"selectionRange":{"start":{"line":39,"character":9},"end":{"line":39,"character":31}},"name":"testEdgesAreDirected()","children":[{"range":{"start":{"line":40,"character":8},"end":{"line":40,"character":52}},"kind":13,"selectionRange":{"start":{"line":40,"character":12},"end":{"line":40,"character":17}},"name":"graph"},{"range":{"start":{"line":41,"character":8},"end":{"line":41,"character":35}},"kind":13,"selectionRange":{"start":{"line":41,"character":12},"end":{"line":41,"character":17}},"name":"node1"},{"range":{"start":{"line":42,"character":8},"end":{"line":42,"character":35}},"kind":13,"selectionRange":{"start":{"line":42,"character":12},"end":{"line":42,"character":17}},"name":"node2"}]},{"range":{"start":{"line":47,"character":4},"end":{"line":54,"character":5}},"kind":6,"selectionRange":{"start":{"line":47,"character":9},"end":{"line":47,"character":23}},"name":"testUUIDAsID()","children":[{"range":{"start":{"line":48,"character":8},"end":{"line":48,"character":52}},"kind":13,"selectionRange":{"start":{"line":48,"character":12},"end":{"line":48,"character":17}},"name":"graph"},{"range":{"start":{"line":49,"character":8},"end":{"line":49,"character":35}},"kind":13,"selectionRange":{"start":{"line":49,"character":12},"end":{"line":49,"character":17}},"name":"node1"},{"range":{"start":{"line":50,"character":8},"end":{"line":50,"character":35}},"kind":13,"selectionRange":{"start":{"line":50,"character":12},"end":{"line":50,"character":17}},"name":"node2"}]},{"range":{"start":{"line":56,"character":4},"end":{"line":61,"character":5}},"kind":6,"selectionRange":{"start":{"line":56,"character":9},"end":{"line":56,"character":51}},"name":"testOmittingClosureForIdentifiableValues()","children":[{"range":{"start":{"line":57,"character":8},"end":{"line":57,"character":66}},"kind":23,"selectionRange":{"start":{"line":57,"character":15},"end":{"line":57,"character":32}},"name":"IdentifiableValue","children":[{"range":{"start":{"line":57,"character":49},"end":{"line":57,"character":64}},"kind":7,"selectionRange":{"start":{"line":57,"character":53},"end":{"line":57,"character":55}},"name":"id"}]},{"range":{"start":{"line":58,"character":8},"end":{"line":58,"character":52}},"kind":13,"selectionRange":{"start":{"line":58,"character":12},"end":{"line":58,"character":17}},"name":"graph"},{"range":{"start":{"line":59,"character":8},"end":{"line":59,"character":52}},"kind":13,"selectionRange":{"start":{"line":59,"character":12},"end":{"line":59,"character":16}},"name":"node"}]},{"range":{"start":{"line":63,"character":4},"end":{"line":76,"character":5}},"kind":6,"selectionRange":{"start":{"line":63,"character":9},"end":{"line":63,"character":22}},"name":"testSorting()","children":[{"range":{"start":{"line":64,"character":8},"end":{"line":64,"character":37}},"kind":13,"selectionRange":{"start":{"line":64,"character":12},"end":{"line":64,"character":17}},"name":"graph"},{"range":{"start":{"line":66,"character":8},"end":{"line":66,"character":35}},"kind":13,"selectionRange":{"start":{"line":66,"character":12},"end":{"line":66,"character":17}},"name":"node1"},{"range":{"start":{"line":67,"character":8},"end":{"line":67,"character":35}},"kind":13,"selectionRange":{"start":{"line":67,"character":12},"end":{"line":67,"character":17}},"name":"node2"},{"range":{"start":{"line":68,"character":8},"end":{"line":68,"character":56}},"kind":13,"selectionRange":{"start":{"line":68,"character":12},"end":{"line":68,"character":16}},"name":"edge"}]},{"range":{"start":{"line":78,"character":4},"end":{"line":87,"character":5}},"kind":6,"selectionRange":{"start":{"line":78,"character":9},"end":{"line":78,"character":40}},"name":"testWaysToRemoveAnEdgeCompile()","children":[{"range":{"start":{"line":79,"character":8},"end":{"line":79,"character":37}},"kind":13,"selectionRange":{"start":{"line":79,"character":12},"end":{"line":79,"character":17}},"name":"graph"}]},{"range":{"start":{"line":89,"character":4},"end":{"line":144,"character":5}},"kind":6,"selectionRange":{"start":{"line":89,"character":9},"end":{"line":89,"character":56}},"name":"testInsertingConnectingAndDisconnectingValues()","children":[{"range":{"start":{"line":90,"character":8},"end":{"line":90,"character":52}},"kind":13,"selectionRange":{"start":{"line":90,"character":12},"end":{"line":90,"character":17}},"name":"graph"},{"range":{"start":{"line":94,"character":8},"end":{"line":94,"character":35}},"kind":13,"selectionRange":{"start":{"line":94,"character":12},"end":{"line":94,"character":17}},"name":"node1"},{"range":{"start":{"line":108,"character":8},"end":{"line":108,"character":35}},"kind":13,"selectionRange":{"start":{"line":108,"character":12},"end":{"line":108,"character":17}},"name":"node2"},{"range":{"start":{"line":112,"character":8},"end":{"line":112,"character":77}},"kind":13,"selectionRange":{"start":{"line":112,"character":12},"end":{"line":112,"character":18}},"name":"edge12"}]},{"range":{"start":{"line":146,"character":4},"end":{"line":168,"character":5}},"kind":6,"selectionRange":{"start":{"line":146,"character":9},"end":{"line":146,"character":27}},"name":"testGraphCopying()","children":[{"range":{"start":{"line":147,"character":8},"end":{"line":147,"character":52}},"kind":13,"selectionRange":{"start":{"line":147,"character":12},"end":{"line":147,"character":17}},"name":"graph"},{"range":{"start":{"line":149,"character":8},"end":{"line":149,"character":35}},"kind":13,"selectionRange":{"start":{"line":149,"character":12},"end":{"line":149,"character":17}},"name":"node1"},{"range":{"start":{"line":150,"character":8},"end":{"line":150,"character":35}},"kind":13,"selectionRange":{"start":{"line":150,"character":12},"end":{"line":150,"character":17}},"name":"node2"},{"range":{"start":{"line":151,"character":8},"end":{"line":151,"character":35}},"kind":13,"selectionRange":{"start":{"line":151,"character":12},"end":{"line":151,"character":17}},"name":"node3"},{"range":{"start":{"line":153,"character":8},"end":{"line":153,"character":57}},"kind":13,"selectionRange":{"start":{"line":153,"character":12},"end":{"line":153,"character":17}},"name":"edge1"},{"range":{"start":{"line":156,"character":8},"end":{"line":156,"character":36}},"kind":13,"selectionRange":{"start":{"line":156,"character":12},"end":{"line":156,"character":21}},"name":"graphCopy"}]},{"range":{"start":{"line":170,"character":4},"end":{"line":191,"character":5}},"kind":6,"selectionRange":{"start":{"line":170,"character":9},"end":{"line":170,"character":37}},"name":"testMinimumEquivalentGraph()","children":[{"range":{"start":{"line":172,"character":8},"end":{"line":172,"character":52}},"kind":13,"selectionRange":{"start":{"line":172,"character":12},"end":{"line":172,"character":17}},"name":"graph"},{"range":{"start":{"line":174,"character":8},"end":{"line":174,"character":35}},"kind":13,"selectionRange":{"start":{"line":174,"character":12},"end":{"line":174,"character":17}},"name":"node1"},{"range":{"start":{"line":175,"character":8},"end":{"line":175,"character":35}},"kind":13,"selectionRange":{"start":{"line":175,"character":12},"end":{"line":175,"character":17}},"name":"node2"},{"range":{"start":{"line":176,"character":8},"end":{"line":176,"character":35}},"kind":13,"selectionRange":{"start":{"line":176,"character":12},"end":{"line":176,"character":17}},"name":"node3"},{"range":{"start":{"line":185,"character":8},"end":{"line":185,"character":52}},"kind":13,"selectionRange":{"start":{"line":185,"character":12},"end":{"line":185,"character":15}},"name":"meg"}]}]}],"code":"@testable import SwiftNodes\nimport XCTest\n\nclass SwiftNodesTests: XCTestCase {\n    \n    func testCodeExamplesFromREADME() throws {\n        let graph = Graph<String, Int> { \"id\\($0)\" }  // NodeID == String, NodeValue == Int\n        let node1 = graph.insert(1)                   // node1.id == \"id1\"\n        \n        let valueForID1 = graph.value(for: \"id1\")     // valueForID1 == 1\n        let nodeForID1 = graph.node(for: \"id1\")       // nodeForID1 === node1\n        \n        XCTAssertEqual(valueForID1, node1.value)\n        XCTAssertIdentical(nodeForID1, node1)\n    }\n    \n    func testAddingEdges() throws {\n        let graph = Graph<String, Int> { \"id\\($0)\" }\n        let node1 = graph.insert(1)\n        let node2 = graph.insert(2)\n        graph.addEdge(from: node1, to: node2)\n        \n        XCTAssertNotNil(graph.edge(from: node1, to: node2))\n        XCTAssertNil(graph.edge(from: node2, to: node1))\n        XCTAssertEqual(graph.edge(from: node1, to: node2)?.count, 1)\n    }\n    \n    func testAddingEdgeWithBigCount() throws {\n        let graph = Graph<String, Int> { \"id\\($0)\" }\n        let node1 = graph.insert(1)\n        let node2 = graph.insert(2)\n        \n        graph.addEdge(from: node1, to: node2, count: 42)\n        XCTAssertEqual(graph.edge(from: node1, to: node2)?.count, 42)\n        \n        graph.addEdge(from: node1, to: node2, count: 58)\n        XCTAssertEqual(graph.edge(from: node1, to: node2)?.count, 100)\n    }\n    \n    func testEdgesAreDirected() throws {\n        let graph = Graph<String, Int> { \"id\\($0)\" }\n        let node1 = graph.insert(1)\n        let node2 = graph.insert(2)\n        XCTAssertNotNil(graph.addEdge(from: node1, to: node2))\n        XCTAssertNil(graph.edge(from: node2, to: node1))\n    }\n    \n    func testUUIDAsID() throws {\n        let graph = Graph<UUID, Int> { _ in UUID() }  // NodeID == UUID, NodeValue == Int\n        let node1 = graph.insert(1)\n        let node2 = graph.insert(1)\n        XCTAssertNotIdentical(node1, node2)\n        XCTAssertEqual(node1.value, node2.value)\n        XCTAssertNotEqual(node1.id, node2.id)\n    }\n    \n    func testOmittingClosureForIdentifiableValues() throws {\n        struct IdentifiableValue: Identifiable { let id = UUID() }\n        let graph = Graph<UUID, IdentifiableValue>()  // NodeID == NodeValue.ID == UUID\n        let node = graph.insert(IdentifiableValue())  // node.id == node.value.id\n        XCTAssertEqual(node.id, node.value.id)\n    }\n    \n    func testSorting() throws {\n        let graph = Graph<Int, Int>()\n        \n        let node1 = graph.insert(1)\n        let node2 = graph.insert(2)\n        let edge = graph.addEdge(from: node1, to: node2)\n        \n        graph.remove(edge)\n        graph.removeEdge(with: edge.id)\n        graph.removeEdge(with: .init(node1, node2))\n        graph.removeEdge(with: .init(node1.id, node2.id))\n        graph.removeEdge(from: node1, to: node2)\n        graph.removeEdge(from: node1.id, to: node2.id)\n    }\n    \n    func testWaysToRemoveAnEdgeCompile() {\n        let graph = Graph<Int, Int>()\n        graph.insert(5)\n        graph.insert(3)\n        \n        graph.remove(edge)\n        graph.removeEdge(from: node1, to: node2)\n        graph.removeEdge(from: node1.id, to: node2.id)\n        graph.removeEdge(with: edge.id)\n    }\n    \n    func testInsertingConnectingAndDisconnectingValues() throws {\n        let graph = Graph<String, Int> { \"id\\($0)\" }\n        XCTAssertNil(graph.node(for: \"id1\"))\n        XCTAssertNil(graph.value(for: \"id1\"))\n        \n        let node1 = graph.insert(1)\n        XCTAssertEqual(graph.value(for: \"id1\"), 1)\n        XCTAssertIdentical(graph.node(for: \"id1\"), node1)\n        XCTAssertIdentical(graph.insert(1), node1)\n        XCTAssertNil(graph.edge(from: \"id1\", to: \"id2\"))\n        \n        XCTAssertEqual(node1.id, \"id1\")\n        XCTAssertEqual(node1.value, 1)\n        \n        XCTAssert(node1.ancestors.isEmpty)\n        XCTAssert(node1.descendants.isEmpty)\n        XCTAssert(node1.isSource)\n        XCTAssert(node1.isSink)\n\n        let node2 = graph.insert(2)\n        XCTAssertNil(graph.edge(from: \"id1\", to: \"id2\"))\n        XCTAssertNil(graph.edge(from: node1, to: node2))\n        \n        let edge12 = try graph.addEdge(from: node1.id, to: node2.id).unwrap()\n        XCTAssertNotNil(graph.edge(from: \"id1\", to: \"id2\"))\n        XCTAssertNotNil(graph.edge(from: node1, to: node2))\n        \n        XCTAssertEqual(edge12.count, 1)\n        XCTAssertIdentical(edge12, graph.addEdge(from: \"id1\", to: \"id2\"))\n        XCTAssertEqual(edge12.count, 2)\n        XCTAssertIdentical(edge12.source, node1)\n        XCTAssertIdentical(edge12.target, node2)\n        \n        XCTAssertFalse(node1.isSink)\n        XCTAssert(node1.descendants.contains(node2))\n        XCTAssert(node1.isSource)\n        \n        XCTAssertFalse(node2.isSource)\n        XCTAssert(node2.ancestors.contains(node1))\n        XCTAssert(node2.isSink)\n        \n        graph.removeEdge(with: edge12.id)\n        XCTAssertNil(graph.edge(from: \"id1\", to: \"id2\"))\n        XCTAssertNil(graph.edge(from: node1, to: node2))\n        \n        XCTAssertEqual(edge12.count, 0)\n        \n        XCTAssert(node1.ancestors.isEmpty)\n        XCTAssert(node1.descendants.isEmpty)\n        XCTAssert(node1.isSource)\n        XCTAssert(node1.isSink)\n        XCTAssert(node2.ancestors.isEmpty)\n        XCTAssert(node2.descendants.isEmpty)\n        XCTAssert(node2.isSource)\n        XCTAssert(node2.isSink)\n    }\n    \n    func testGraphCopying() {\n        let graph = Graph<String, Int> { \"id\\($0)\" }\n        \n        let node1 = graph.insert(1)\n        let node2 = graph.insert(2)\n        let node3 = graph.insert(3)\n        \n        let edge1 = graph.addEdge(from: node1, to: node2)\n        _ = graph.addEdge(from: node2, to: node3, count: 2)\n        \n        let graphCopy = graph.copy()\n        XCTAssertEqual(graph.values, graphCopy.values)\n        XCTAssertEqual(graph.nodesIDs, graphCopy.nodesIDs)\n        XCTAssert(Set(graph.nodes).intersection(Set(graphCopy.nodes)).isEmpty)\n        XCTAssertEqual(graph.value(for: \"id3\"), graphCopy.value(for: \"id3\"))\n        \n        XCTAssertNil(graphCopy.edge(from: node1, to: node2))\n        XCTAssertNotNil(graphCopy.edge(from: \"id1\", to: \"id2\"))\n        XCTAssertNotNil(graphCopy.edge(from: \"id2\", to: \"id3\"))\n        XCTAssertNil(graphCopy.edge(from: \"id1\", to: \"id3\"))\n        XCTAssertNotIdentical(graphCopy.edge(from: \"id1\", to: \"id2\"), edge1)\n        XCTAssertEqual(graphCopy.edge(from: \"id2\", to: \"id3\")?.count, 2)\n    }\n    \n    func testMinimumEquivalentGraph() {\n        // make original graph\n        let graph = Graph<String, Int> { \"id\\($0)\" }\n        \n        let node1 = graph.insert(1)\n        let node2 = graph.insert(2)\n        let node3 = graph.insert(3)\n        \n        graph.addEdge(from: node1, to: node2)\n        graph.addEdge(from: node2, to: node3)\n        graph.addEdge(from: node1, to: node3)\n        \n        XCTAssertEqual(graph.edges.count, 3)\n        \n        // make MEG\n        let meg = graph.makeMinimumEquivalentGraph()\n        \n        XCTAssertEqual(meg.edges.count, 2)\n        XCTAssertNotNil(meg.edge(from: \"id1\", to: \"id2\"))\n        XCTAssertNotNil(meg.edge(from: \"id2\", to: \"id3\"))\n        XCTAssertNil(meg.edge(from: \"id1\", to: \"id3\"))\n    }\n    \n    // TODO: Test more algorithms\n}\n"}]},{"name":"Code","files":[{"name":"Graph+Copying.swift","symbols":[{"range":{"start":{"line":3,"character":0},"end":{"line":44,"character":1}},"kind":3,"selectionRange":{"start":{"line":3,"character":10},"end":{"line":3,"character":15}},"name":"Graph","children":[{"range":{"start":{"line":5,"character":11},"end":{"line":8,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":16},"end":{"line":5,"character":43}},"name":"copy(includedNodes:)"},{"range":{"start":{"line":10,"character":11},"end":{"line":13,"character":5}},"kind":6,"selectionRange":{"start":{"line":10,"character":16},"end":{"line":10,"character":46}},"name":"copy(excludedEdges:)","references":[{"range":{"start":{"line":25,"character":15},"end":{"line":25,"character":15}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":27,"character":15},"end":{"line":27,"character":15}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+TransitiveReduction.swift"}]},{"range":{"start":{"line":16,"character":11},"end":{"line":43,"character":5}},"kind":6,"selectionRange":{"start":{"line":16,"character":16},"end":{"line":17,"character":53}},"name":"copy(includedNodes:includedEdges:)","children":[{"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":50}},"kind":13,"selectionRange":{"start":{"line":19,"character":12},"end":{"line":19,"character":19}},"name":"myNodes"},{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":58}},"kind":13,"selectionRange":{"start":{"line":26,"character":12},"end":{"line":26,"character":31}},"name":"actualIncludedNodes"},{"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":96}},"kind":13,"selectionRange":{"start":{"line":27,"character":12},"end":{"line":27,"character":33}},"name":"copiesOfIncludedNodes"},{"range":{"start":{"line":29,"character":8},"end":{"line":30,"character":74}},"kind":13,"selectionRange":{"start":{"line":29,"character":12},"end":{"line":29,"character":21}},"name":"graphCopy"},{"range":{"start":{"line":32,"character":12},"end":{"line":32,"character":24}},"kind":13,"selectionRange":{"start":{"line":32,"character":12},"end":{"line":32,"character":24}},"name":"originalEdge"}],"references":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"}]}]}],"code":"import SwiftyToolz\nimport OrderedCollections\n\nextension Graph\n{\n    public func copy(includedNodes: [Node]) -> Graph<NodeID, NodeValue>\n    {\n        copy(includedNodes: OrderedSet(includedNodes))\n    }\n    \n    public func copy(excludedEdges: Set<Edge>) -> Graph<NodeID, NodeValue>\n    {\n        copy(includedEdges: Set(edgesByID.values) - excludedEdges)\n    }\n    \n    /// Make a copy of (a subset of) the graph\n    public func copy(includedNodes: OrderedSet<Node>? = nil,\n                     includedEdges: Set<Edge>? = nil) -> Graph<NodeID, NodeValue>\n    {\n        let myNodes = OrderedSet(nodesByID.values)\n        \n        if !(includedNodes?.isSubset(of: myNodes) ?? true)\n        {\n            log(warning: \"Some nodes to include in the Graph copy are not in the graph.\")\n        }\n        \n        let actualIncludedNodes = includedNodes ?? myNodes\n        let copiesOfIncludedNodes = actualIncludedNodes.map { Node(id: $0.id, value: $0.value) }\n        \n        let graphCopy = Graph(nodes: OrderedSet(copiesOfIncludedNodes),\n                              makeNodeIDForValue: self.makeNodeIDForValue)\n        \n        for originalEdge in includedEdges ?? Set(edgesByID.values)\n        {\n            guard graphCopy.contains(originalEdge.source.id),\n                  graphCopy.contains(originalEdge.target.id) else { continue }\n            \n            graphCopy.addEdge(from: originalEdge.source.id,\n                              to: originalEdge.target.id,\n                              count: originalEdge.count)\n        }\n        \n        return graphCopy\n    }\n}\n"}],"subfolders":[{"name":"Graph+Algorithms","files":[{"name":"Graph+Components.swift","symbols":[{"range":{"start":{"line":2,"character":7},"end":{"line":39,"character":1}},"kind":3,"selectionRange":{"start":{"line":2,"character":17},"end":{"line":2,"character":22}},"name":"Graph","children":[{"range":{"start":{"line":4,"character":4},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":4,"character":9},"end":{"line":4,"character":25}},"name":"findComponents()","children":[{"range":{"start":{"line":8,"character":8},"end":{"line":8,"character":37}},"kind":13,"selectionRange":{"start":{"line":8,"character":12},"end":{"line":8,"character":22}},"name":"components"},{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":16}},"kind":13,"selectionRange":{"start":{"line":10,"character":12},"end":{"line":10,"character":16}},"name":"node"},{"range":{"start":{"line":14,"character":12},"end":{"line":14,"character":84}},"kind":13,"selectionRange":{"start":{"line":14,"character":16},"end":{"line":14,"character":29}},"name":"nextComponent"}]},{"range":{"start":{"line":24,"character":12},"end":{"line":38,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":17},"end":{"line":25,"character":56}},"name":"findLackingNodes(forComponent:startingAt:)","children":[{"range":{"start":{"line":29,"character":8},"end":{"line":29,"character":40}},"kind":13,"selectionRange":{"start":{"line":29,"character":12},"end":{"line":29,"character":24}},"name":"lackingNodes"},{"range":{"start":{"line":31,"character":12},"end":{"line":31,"character":21}},"kind":13,"selectionRange":{"start":{"line":31,"character":12},"end":{"line":31,"character":21}},"name":"neighbour"},{"range":{"start":{"line":33,"character":12},"end":{"line":33,"character":70}},"kind":13,"selectionRange":{"start":{"line":33,"character":16},"end":{"line":33,"character":33}},"name":"extendedComponent"}],"references":[{"range":{"start":{"line":14,"character":32},"end":{"line":14,"character":32}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Components.swift"},{"range":{"start":{"line":34,"character":28},"end":{"line":34,"character":28}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Components.swift"}]}]}],"code":"import SwiftyToolz\n\npublic extension Graph\n{\n    func findComponents() -> Set<Nodes>\n    {\n        unmarkNodes()\n        \n        var components = Set<Nodes>()\n\n        for node in nodesByID.values\n        {\n            if node.isMarked { continue }\n            \n            let nextComponent = findLackingNodes(forComponent: [], startingAt: node)\n            \n            components += nextComponent\n            \n            node.mark()\n        }\n\n        return components\n    }\n    \n    private func findLackingNodes(forComponent incompleteComponent: Nodes,\n                                  startingAt node: Node) -> Nodes\n    {\n        guard !incompleteComponent.contains(node) else { return [] }\n        \n        var lackingNodes: Nodes = [node]\n        \n        for neighbour in node.neighbours\n        {\n            let extendedComponent = incompleteComponent + lackingNodes\n            lackingNodes += findLackingNodes(forComponent: extendedComponent, startingAt: neighbour)\n        }\n        \n        return lackingNodes\n    }\n}\n"},{"name":"Graph+AncestorCount.swift","symbols":[{"range":{"start":{"line":2,"character":7},"end":{"line":36,"character":1}},"kind":3,"selectionRange":{"start":{"line":2,"character":17},"end":{"line":2,"character":22}},"name":"Graph","children":[{"range":{"start":{"line":7,"character":4},"end":{"line":14,"character":5}},"kind":6,"selectionRange":{"start":{"line":7,"character":9},"end":{"line":7,"character":36}},"name":"findNumberOfNodeAncestors()"},{"range":{"start":{"line":17,"character":12},"end":{"line":35,"character":5}},"kind":6,"selectionRange":{"start":{"line":17,"character":17},"end":{"line":17,"character":49}},"name":"getAncestorCount(for:)","children":[{"range":{"start":{"line":19,"character":15},"end":{"line":19,"character":22}},"kind":13,"selectionRange":{"start":{"line":19,"character":15},"end":{"line":19,"character":22}},"name":"marking"},{"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":33}},"kind":13,"selectionRange":{"start":{"line":21,"character":12},"end":{"line":21,"character":19}},"name":"marking"},{"range":{"start":{"line":23,"character":8},"end":{"line":23,"character":44}},"kind":13,"selectionRange":{"start":{"line":23,"character":12},"end":{"line":23,"character":27}},"name":"directAncestors"},{"range":{"start":{"line":24,"character":8},"end":{"line":24,"character":82}},"kind":13,"selectionRange":{"start":{"line":24,"character":12},"end":{"line":24,"character":24}},"name":"ingoingEdges"},{"range":{"start":{"line":25,"character":8},"end":{"line":25,"character":63}},"kind":13,"selectionRange":{"start":{"line":25,"character":12},"end":{"line":25,"character":31}},"name":"directAncestorCount"},{"range":{"start":{"line":27,"character":8},"end":{"line":30,"character":9}},"kind":13,"selectionRange":{"start":{"line":27,"character":12},"end":{"line":27,"character":25}},"name":"ancestorCount"}],"references":[{"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":24}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":12}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"}]}]},{"range":{"start":{"line":38,"character":8},"end":{"line":45,"character":1}},"kind":3,"selectionRange":{"start":{"line":38,"character":18},"end":{"line":38,"character":35}},"name":"GraphNode.Marking","children":[{"range":{"start":{"line":40,"character":4},"end":{"line":44,"character":5}},"kind":7,"selectionRange":{"start":{"line":40,"character":8},"end":{"line":40,"character":21}},"name":"ancestorCount","references":[{"range":{"start":{"line":13,"character":55},"end":{"line":13,"character":55}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":19,"character":55},"end":{"line":19,"character":55}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":32,"character":16},"end":{"line":32,"character":16}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"}]}]}],"code":"import SwiftyToolz\n\npublic extension Graph\n{\n    /**\n     Find the total number of all ancestors (predecessors / sources) for every node of an **acyclic** graph.\n     */\n    func findNumberOfNodeAncestors() -> [(Node, Int)]\n    {\n        unmarkNodes()\n        \n        sinks.forEach { getAncestorCount(for: $0) }\n\n        return nodesByID.values.map { ($0, $0.marking?.ancestorCount ?? 0) }\n    }\n\n    @discardableResult\n    private func getAncestorCount(for node: Node) -> Int\n    {\n        if let marking = node.marking { return marking.ancestorCount }\n        \n        let marking = node.mark() // mark node as visited to avoid infinite loops in cyclic graphs\n        \n        let directAncestors = node.ancestors\n        let ingoingEdges = directAncestors.compactMap { edge(from: $0, to: node) }\n        let directAncestorCount = ingoingEdges.sum { $0.count }\n        \n        let ancestorCount = directAncestorCount + directAncestors.sum\n        {\n            getAncestorCount(for: $0)\n        }\n        \n        marking.ancestorCount = ancestorCount\n        \n        return ancestorCount\n    }\n}\n\nprivate extension GraphNode.Marking\n{\n    var ancestorCount: Int\n    {\n        get { number1 }\n        set { number1 = newValue }\n    }\n}\n"},{"name":"Graph+Node.Marking.swift","symbols":[{"range":{"start":{"line":2,"character":7},"end":{"line":16,"character":1}},"kind":3,"selectionRange":{"start":{"line":2,"character":17},"end":{"line":2,"character":22}},"name":"Graph","children":[{"range":{"start":{"line":4,"character":4},"end":{"line":7,"character":5}},"kind":6,"selectionRange":{"start":{"line":4,"character":9},"end":{"line":4,"character":22}},"name":"unmarkNodes()","references":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Components.swift"},{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":8}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":9,"character":4},"end":{"line":15,"character":5}},"kind":6,"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":51}},"name":"setNodeMarkings(to:)","children":[{"range":{"start":{"line":11,"character":12},"end":{"line":11,"character":16}},"kind":13,"selectionRange":{"start":{"line":11,"character":12},"end":{"line":11,"character":16}},"name":"node"}],"references":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"}]}]},{"range":{"start":{"line":18,"character":7},"end":{"line":28,"character":1}},"kind":3,"selectionRange":{"start":{"line":18,"character":17},"end":{"line":18,"character":26}},"name":"GraphNode","children":[{"range":{"start":{"line":20,"character":4},"end":{"line":20,"character":41}},"kind":7,"selectionRange":{"start":{"line":20,"character":8},"end":{"line":20,"character":16}},"name":"isMarked","references":[{"range":{"start":{"line":12,"character":20},"end":{"line":12,"character":20}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Components.swift"},{"range":{"start":{"line":15,"character":21},"end":{"line":15,"character":21}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":33,"character":21},"end":{"line":33,"character":21}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":15,"character":21},"end":{"line":15,"character":21}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"},{"range":{"start":{"line":33,"character":21},"end":{"line":33,"character":21}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":23,"character":4},"end":{"line":27,"character":5}},"kind":6,"selectionRange":{"start":{"line":23,"character":9},"end":{"line":23,"character":44}},"name":"mark(with:)","references":[{"range":{"start":{"line":18,"character":17},"end":{"line":18,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Components.swift"},{"range":{"start":{"line":21,"character":27},"end":{"line":21,"character":27}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":35,"character":13},"end":{"line":35,"character":13}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":35,"character":13},"end":{"line":35,"character":13}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]}]},{"range":{"start":{"line":30,"character":7},"end":{"line":33,"character":1}},"kind":3,"selectionRange":{"start":{"line":30,"character":17},"end":{"line":30,"character":34}},"name":"GraphNode.Marking","children":[{"range":{"start":{"line":32,"character":4},"end":{"line":32,"character":50}},"kind":7,"selectionRange":{"start":{"line":32,"character":15},"end":{"line":32,"character":19}},"name":"zero","references":[{"range":{"start":{"line":23,"character":39},"end":{"line":23,"character":39}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"}]}]}],"code":"import SwiftyToolz\n\npublic extension Graph\n{\n    func unmarkNodes()\n    {\n        setNodeMarkings(to: nil)\n    }\n    \n    func setNodeMarkings(to marking: Node.Marking?)\n    {\n        for node in nodesByID.values\n        {\n            node.marking = marking\n        }\n    }\n}\n\npublic extension GraphNode\n{\n    var isMarked: Bool { marking != nil }\n    \n    @discardableResult\n    func mark(with marking: Marking = .zero) -> Marking\n    {\n        self.marking = marking\n        return marking\n    }\n}\n\npublic extension GraphNode.Marking\n{\n    static var zero: GraphNode.Marking { .init() }\n}\n"},{"name":"Graph+CondensationGraph.swift","symbols":[{"range":{"start":{"line":3,"character":7},"end":{"line":70,"character":1}},"kind":3,"selectionRange":{"start":{"line":3,"character":17},"end":{"line":3,"character":22}},"name":"Graph","children":[{"range":{"start":{"line":10,"character":4},"end":{"line":46,"character":5}},"kind":6,"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":32}},"name":"makeCondensationGraph()","children":[{"range":{"start":{"line":13,"character":8},"end":{"line":13,"character":98}},"kind":13,"selectionRange":{"start":{"line":13,"character":12},"end":{"line":13,"character":16}},"name":"sccs"},{"range":{"start":{"line":16,"character":8},"end":{"line":16,"character":58}},"kind":13,"selectionRange":{"start":{"line":16,"character":12},"end":{"line":16,"character":19}},"name":"sccHash"},{"range":{"start":{"line":18,"character":12},"end":{"line":18,"character":15}},"kind":13,"selectionRange":{"start":{"line":18,"character":12},"end":{"line":18,"character":15}},"name":"scc"},{"range":{"start":{"line":20,"character":16},"end":{"line":20,"character":23}},"kind":13,"selectionRange":{"start":{"line":20,"character":16},"end":{"line":20,"character":23}},"name":"sccNode"},{"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":83}},"kind":13,"selectionRange":{"start":{"line":27,"character":12},"end":{"line":27,"character":29}},"name":"condensationNodes"},{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":97}},"kind":13,"selectionRange":{"start":{"line":28,"character":12},"end":{"line":28,"character":29}},"name":"condensationGraph"},{"range":{"start":{"line":31,"character":12},"end":{"line":31,"character":16}},"kind":13,"selectionRange":{"start":{"line":31,"character":12},"end":{"line":31,"character":16}},"name":"edge"},{"range":{"start":{"line":33,"character":22},"end":{"line":33,"character":31}},"kind":13,"selectionRange":{"start":{"line":33,"character":22},"end":{"line":33,"character":31}},"name":"sourceSCC"},{"range":{"start":{"line":33,"character":60},"end":{"line":33,"character":69}},"kind":13,"selectionRange":{"start":{"line":33,"character":60},"end":{"line":33,"character":69}},"name":"targetSCC"}]},{"range":{"start":{"line":54,"character":4},"end":{"line":69,"character":5}},"kind":5,"selectionRange":{"start":{"line":54,"character":10},"end":{"line":54,"character":36}},"name":"StronglyConnectedComponent","children":[{"range":{"start":{"line":56,"character":15},"end":{"line":57,"character":92}},"kind":6,"selectionRange":{"start":{"line":56,"character":27},"end":{"line":57,"character":63}},"name":"==(_:_:)"},{"range":{"start":{"line":59,"character":15},"end":{"line":59,"character":74}},"kind":6,"selectionRange":{"start":{"line":59,"character":20},"end":{"line":59,"character":51}},"name":"hash(into:)"},{"range":{"start":{"line":61,"character":15},"end":{"line":61,"character":43}},"kind":7,"selectionRange":{"start":{"line":61,"character":19},"end":{"line":61,"character":21}},"name":"id","references":[{"range":{"start":{"line":27,"character":67},"end":{"line":27,"character":67}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":28,"character":93},"end":{"line":28,"character":93}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":40,"character":58},"end":{"line":40,"character":58}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":40,"character":76},"end":{"line":40,"character":76}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":57,"character":78},"end":{"line":57,"character":78}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":57,"character":88},"end":{"line":57,"character":88}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":59,"character":69},"end":{"line":59,"character":69}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":27,"character":67},"end":{"line":27,"character":67}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":28,"character":93},"end":{"line":28,"character":93}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":40,"character":58},"end":{"line":40,"character":58}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":40,"character":76},"end":{"line":40,"character":76}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":57,"character":78},"end":{"line":57,"character":78}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":57,"character":88},"end":{"line":57,"character":88}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":59,"character":69},"end":{"line":59,"character":69}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]},{"range":{"start":{"line":63,"character":8},"end":{"line":66,"character":9}},"kind":6,"selectionRange":{"start":{"line":63,"character":8},"end":{"line":63,"character":30}},"name":"init(nodes:)","references":[{"range":{"start":{"line":13,"character":59},"end":{"line":13,"character":59}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":13,"character":59},"end":{"line":13,"character":59}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]},{"range":{"start":{"line":68,"character":15},"end":{"line":68,"character":31}},"kind":7,"selectionRange":{"start":{"line":68,"character":19},"end":{"line":68,"character":24}},"name":"nodes","references":[{"range":{"start":{"line":20,"character":31},"end":{"line":20,"character":31}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":65,"character":17},"end":{"line":65,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":20,"character":31},"end":{"line":20,"character":31}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":65,"character":17},"end":{"line":65,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]}],"references":[{"range":{"start":{"line":13,"character":59},"end":{"line":13,"character":59}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":16,"character":29},"end":{"line":16,"character":29}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":52,"character":48},"end":{"line":52,"character":48}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":56,"character":36},"end":{"line":56,"character":36}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":57,"character":36},"end":{"line":57,"character":36}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":13,"character":59},"end":{"line":13,"character":59}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":16,"character":29},"end":{"line":16,"character":29}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":52,"character":48},"end":{"line":52,"character":48}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":56,"character":36},"end":{"line":56,"character":36}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":57,"character":36},"end":{"line":57,"character":36}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]}]}],"code":"import SwiftyToolz\nimport OrderedCollections\n\npublic extension Graph\n{\n    /**\n     Creates the acyclic condensation graph, contracting strongly connected components into single nodes.\n     \n     See <https://en.wikipedia.org/wiki/Strongly_connected_component>\n     */\n    func makeCondensationGraph() -> CondensationGraph\n    {\n        // get SCCs\n        let sccs = findStronglyConnectedComponents().map { StronglyConnectedComponent(nodes: $0) }\n        \n        // create hashmap from nodes to their SCCs\n        var sccHash = [Node: StronglyConnectedComponent]()\n        \n        for scc in sccs\n        {\n            for sccNode in scc.nodes\n            {\n                sccHash[sccNode] = scc\n            }\n        }\n        \n        // create condensation graph\n        let condensationNodes = sccs.map { CondensationNode(id: $0.id, value: $0) }\n        let condensationGraph = CondensationGraph(nodes: OrderedSet(condensationNodes)) { $0.id }\n        \n        // add condensation edges\n        for edge in edgesByID.values\n        {\n            guard let sourceSCC = sccHash[edge.source], let targetSCC = sccHash[edge.target] else\n            {\n                fatalError(\"mising scc in hash map\")\n            }\n            \n            if sourceSCC !== targetSCC\n            {\n                condensationGraph.addEdge(from: sourceSCC.id, to: targetSCC.id)\n            }\n        }\n        \n        // return graph\n        return condensationGraph\n    }\n    \n    typealias CondensationNode = CondensationGraph.Node\n    typealias CondensationEdge = CondensationGraph.Edge\n    \n    // TODO: use NodeID as condensation node id type and require client to pass a closure for creating new ids of that type. use ids of contained node for StronglyConnectedComponents that contain only 1 node\n    typealias CondensationGraph = Graph<String, StronglyConnectedComponent>\n    \n    class StronglyConnectedComponent: Identifiable, Hashable\n    {\n        public static func == (lhs: StronglyConnectedComponent,\n                               rhs: StronglyConnectedComponent) -> Bool { lhs.id == rhs.id }\n        \n        public func hash(into hasher: inout Hasher) { hasher.combine(id) }\n        \n        public let id: String = .randomID()\n        \n        init(nodes: Set<Node>)\n        {\n            self.nodes = nodes\n        }\n        \n        public let nodes: Nodes\n    }\n}\n"},{"name":"Graph+MinimumEquivalentGraph.swift","symbols":[{"range":{"start":{"line":2,"character":7},"end":{"line":71,"character":1}},"kind":3,"selectionRange":{"start":{"line":2,"character":17},"end":{"line":2,"character":22}},"name":"Graph","children":[{"range":{"start":{"line":11,"character":4},"end":{"line":26,"character":5}},"kind":6,"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":37}},"name":"makeMinimumEquivalentGraph()","children":[{"range":{"start":{"line":13,"character":8},"end":{"line":13,"character":43}},"kind":13,"selectionRange":{"start":{"line":13,"character":12},"end":{"line":13,"character":29}},"name":"nonEssentialEdges"},{"range":{"start":{"line":14,"character":8},"end":{"line":14,"character":53}},"kind":13,"selectionRange":{"start":{"line":14,"character":12},"end":{"line":14,"character":35}},"name":"consideredAncestorsHash"},{"range":{"start":{"line":16,"character":12},"end":{"line":16,"character":22}},"kind":13,"selectionRange":{"start":{"line":16,"character":12},"end":{"line":16,"character":22}},"name":"sourceNode"}]},{"range":{"start":{"line":28,"character":12},"end":{"line":70,"character":5}},"kind":6,"selectionRange":{"start":{"line":28,"character":17},"end":{"line":30,"character":84}},"name":"findNonEssentialEdges(around:reachedAncestors:consideredAncestorsHash:)","children":[{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":81}},"kind":13,"selectionRange":{"start":{"line":32,"character":12},"end":{"line":32,"character":31}},"name":"consideredAncestors"},{"range":{"start":{"line":33,"character":8},"end":{"line":33,"character":72}},"kind":13,"selectionRange":{"start":{"line":33,"character":12},"end":{"line":33,"character":31}},"name":"ancestorsToConsider"},{"range":{"start":{"line":43,"character":8},"end":{"line":43,"character":43}},"kind":13,"selectionRange":{"start":{"line":43,"character":12},"end":{"line":43,"character":29}},"name":"nonEssentialEdges"},{"range":{"start":{"line":47,"character":8},"end":{"line":47,"character":42}},"kind":13,"selectionRange":{"start":{"line":47,"character":12},"end":{"line":47,"character":23}},"name":"descendants"},{"range":{"start":{"line":49,"character":12},"end":{"line":49,"character":22}},"kind":13,"selectionRange":{"start":{"line":49,"character":12},"end":{"line":49,"character":22}},"name":"descendant"},{"range":{"start":{"line":51,"character":16},"end":{"line":51,"character":24}},"kind":13,"selectionRange":{"start":{"line":51,"character":16},"end":{"line":51,"character":24}},"name":"ancestor"},{"range":{"start":{"line":53,"character":23},"end":{"line":53,"character":39}},"kind":13,"selectionRange":{"start":{"line":53,"character":23},"end":{"line":53,"character":39}},"name":"nonEssentialEdge"},{"range":{"start":{"line":62,"character":12},"end":{"line":62,"character":22}},"kind":13,"selectionRange":{"start":{"line":62,"character":12},"end":{"line":62,"character":22}},"name":"descendant"}],"references":[{"range":{"start":{"line":20,"character":33},"end":{"line":20,"character":33}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":64,"character":33},"end":{"line":64,"character":33}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"}]}]}],"code":"import SwiftyToolz\n\npublic extension Graph\n{\n    /**\n     Finds the minumum equivalent graph of an **acyclic** graph.\n     \n     🛑 If the graph is cyclic, this algorithm might hang or crash!\n     \n     See <https://en.wikipedia.org/wiki/Transitive_reduction>\n     */\n    func makeMinimumEquivalentGraph() -> Graph<NodeID, NodeValue>\n    {\n        var nonEssentialEdges = Set<Edge>()\n        var consideredAncestorsHash = [Node: Nodes]()\n        \n        for sourceNode in sources\n        {\n            // TODO: keep track of visited nodes within each traversal from a source and ignore already visited nodes so we can't get hung up in cycles\n            \n            nonEssentialEdges += findNonEssentialEdges(around: sourceNode,\n                                                       reachedAncestors: [],\n                                                       consideredAncestorsHash: &consideredAncestorsHash)\n        }\n        \n        return copy(excludedEdges: nonEssentialEdges)\n    }\n    \n    private func findNonEssentialEdges(around node: Node,\n                                       reachedAncestors: Nodes,\n                                       consideredAncestorsHash: inout [Node: Nodes]) -> Set<Edge>\n    {\n        let consideredAncestors = consideredAncestorsHash[node, default: Nodes()]\n        let ancestorsToConsider = reachedAncestors - consideredAncestors\n        \n        if !reachedAncestors.isEmpty && ancestorsToConsider.isEmpty\n        {\n            // found shortcut edge on a path we've already traversed, so we reached no new ancestors\n            return []\n        }\n        \n        consideredAncestorsHash[node, default: Set<Node>()] += ancestorsToConsider\n        \n        var nonEssentialEdges = Set<Edge>()\n        \n        // base case: add edges from all reached ancestors to all reachable neighbours of node\n        \n        let descendants = node.descendants\n        \n        for descendant in descendants\n        {\n            for ancestor in ancestorsToConsider\n            {\n                if let nonEssentialEdge = edge(from: ancestor, to: descendant)\n                {\n                    nonEssentialEdges += nonEssentialEdge\n                }\n            }\n        }\n        \n        // recursive calls on descendants\n        \n        for descendant in descendants\n        {\n            nonEssentialEdges += findNonEssentialEdges(around: descendant,\n                                                       reachedAncestors: ancestorsToConsider + node,\n                                                       consideredAncestorsHash: &consideredAncestorsHash)\n        }\n        \n        return nonEssentialEdges\n    }\n}\n"},{"name":"Graph+StronglyConnectedComponents.swift","symbols":[{"range":{"start":{"line":2,"character":0},"end":{"line":88,"character":1}},"kind":3,"selectionRange":{"start":{"line":2,"character":10},"end":{"line":2,"character":15}},"name":"Graph","children":[{"range":{"start":{"line":4,"character":4},"end":{"line":24,"character":5}},"kind":6,"selectionRange":{"start":{"line":4,"character":9},"end":{"line":4,"character":42}},"name":"findStronglyConnectedComponents()","children":[{"range":{"start":{"line":8,"character":8},"end":{"line":8,"character":40}},"kind":13,"selectionRange":{"start":{"line":8,"character":12},"end":{"line":8,"character":25}},"name":"resultingSCCs"},{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":21}},"kind":13,"selectionRange":{"start":{"line":10,"character":12},"end":{"line":10,"character":17}},"name":"index"},{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":28}},"kind":13,"selectionRange":{"start":{"line":11,"character":12},"end":{"line":11,"character":17}},"name":"stack"},{"range":{"start":{"line":13,"character":12},"end":{"line":13,"character":16}},"kind":13,"selectionRange":{"start":{"line":13,"character":12},"end":{"line":13,"character":16}},"name":"node"}],"references":[{"range":{"start":{"line":13,"character":19},"end":{"line":13,"character":19}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":13,"character":19},"end":{"line":13,"character":19}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]},{"range":{"start":{"line":27,"character":12},"end":{"line":87,"character":5}},"kind":6,"selectionRange":{"start":{"line":27,"character":17},"end":{"line":30,"character":67}},"name":"findSCCsRecursively(node:index:stack:handleNewSCC:)","children":[{"range":{"start":{"line":34,"character":8},"end":{"line":34,"character":85}},"kind":13,"selectionRange":{"start":{"line":34,"character":12},"end":{"line":34,"character":23}},"name":"nodeMarking"},{"range":{"start":{"line":40,"character":12},"end":{"line":40,"character":18}},"kind":13,"selectionRange":{"start":{"line":40,"character":12},"end":{"line":40,"character":18}},"name":"target"},{"range":{"start":{"line":42,"character":19},"end":{"line":42,"character":33}},"kind":13,"selectionRange":{"start":{"line":42,"character":19},"end":{"line":42,"character":33}},"name":"targetMarkings"},{"range":{"start":{"line":54,"character":16},"end":{"line":57,"character":83}},"kind":13,"selectionRange":{"start":{"line":54,"character":20},"end":{"line":54,"character":33}},"name":"targetMarking"},{"range":{"start":{"line":66,"character":12},"end":{"line":66,"character":32}},"kind":13,"selectionRange":{"start":{"line":66,"character":16},"end":{"line":66,"character":22}},"name":"newSCC"},{"range":{"start":{"line":70,"character":16},"end":{"line":70,"character":48}},"kind":13,"selectionRange":{"start":{"line":70,"character":20},"end":{"line":70,"character":27}},"name":"sccNode"},{"range":{"start":{"line":72,"character":26},"end":{"line":72,"character":41}},"kind":13,"selectionRange":{"start":{"line":72,"character":26},"end":{"line":72,"character":41}},"name":"sccNodeMarkings"}],"references":[{"range":{"start":{"line":17,"character":16},"end":{"line":17,"character":16}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":54,"character":36},"end":{"line":54,"character":36}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"}]}]},{"range":{"start":{"line":90,"character":8},"end":{"line":114,"character":1}},"kind":3,"selectionRange":{"start":{"line":90,"character":18},"end":{"line":90,"character":35}},"name":"GraphNode.Marking","children":[{"range":{"start":{"line":92,"character":16},"end":{"line":95,"character":5}},"kind":6,"selectionRange":{"start":{"line":92,"character":16},"end":{"line":92,"character":63}},"name":"init(index:lowLink:isOnStack:)","references":[{"range":{"start":{"line":34,"character":31},"end":{"line":34,"character":31}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"}]},{"range":{"start":{"line":97,"character":4},"end":{"line":101,"character":5}},"kind":7,"selectionRange":{"start":{"line":97,"character":8},"end":{"line":97,"character":13}},"name":"index","references":[{"range":{"start":{"line":48,"character":82},"end":{"line":48,"character":82}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":64,"character":46},"end":{"line":64,"character":46}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"}]},{"range":{"start":{"line":103,"character":4},"end":{"line":107,"character":5}},"kind":7,"selectionRange":{"start":{"line":103,"character":8},"end":{"line":103,"character":15}},"name":"lowLink","references":[{"range":{"start":{"line":48,"character":32},"end":{"line":48,"character":32}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":48,"character":58},"end":{"line":48,"character":58}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":59,"character":28},"end":{"line":59,"character":28}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":59,"character":54},"end":{"line":59,"character":54}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":59,"character":77},"end":{"line":59,"character":77}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":64,"character":23},"end":{"line":64,"character":23}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"}]},{"range":{"start":{"line":109,"character":4},"end":{"line":113,"character":5}},"kind":7,"selectionRange":{"start":{"line":109,"character":8},"end":{"line":109,"character":17}},"name":"isOnStack","references":[{"range":{"start":{"line":45,"character":34},"end":{"line":45,"character":34}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":77,"character":32},"end":{"line":77,"character":32}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"}]}]}],"code":"import SwiftyToolz\n\nextension Graph\n{\n    func findStronglyConnectedComponents() -> Set<Nodes>\n    {\n        unmarkNodes()\n        \n        var resultingSCCs = Set<Nodes>()\n        \n        var index = 0\n        var stack = [Node]()\n        \n        for node in nodes\n        {\n            if !node.isMarked\n            {\n                findSCCsRecursively(node: node,\n                                    index: &index,\n                                    stack: &stack) { resultingSCCs += $0 }\n            }\n        }\n        \n        return resultingSCCs\n    }\n    \n    @discardableResult\n    private func findSCCsRecursively(node: Node,\n                                     index: inout Int,\n                                     stack: inout [Node],\n                                     handleNewSCC: (Nodes) -> Void) -> Node.Marking\n    {\n        // Set the depth index for node to the smallest unused index\n        assert(!node.isMarked, \"there shouldn't be a marking value on this node yet\")\n        let nodeMarking = Node.Marking(index: index, lowLink: index, isOnStack: true)\n        node.mark(with: nodeMarking)\n        index += 1\n        stack.append(node)\n        \n        // Consider descendants of node\n        for target in node.descendants\n        {\n            if let targetMarkings = target.marking\n            {\n                // If target is not on stack, then edge (node, target) is pointing to an SCC already found and must be ignored\n                if targetMarkings.isOnStack\n                {\n                    // Successor \"target\" is in stack and hence in the current SCC\n                    nodeMarking.lowLink = min(nodeMarking.lowLink, targetMarkings.index)\n                }\n            }\n            else // if target index is undefined then\n            {\n                // Successor \"target\" has not yet been visited; recurse on it\n                let targetMarking = findSCCsRecursively(node: target,\n                                                        index: &index,\n                                                        stack: &stack,\n                                                        handleNewSCC: handleNewSCC)\n                \n                nodeMarking.lowLink = min(nodeMarking.lowLink, targetMarking.lowLink)\n            }\n        }\n        \n        // If node is a root node, pop the stack and generate an SCC\n        if nodeMarking.lowLink == nodeMarking.index\n        {\n            var newSCC = Nodes()\n            \n            while !stack.isEmpty\n            {\n                let sccNode = stack.removeLast()\n                \n                guard let sccNodeMarkings = sccNode.marking else\n                {\n                    fatalError(\"node that is on the stack should have a markings object\")\n                }\n                \n                sccNodeMarkings.isOnStack = false\n                newSCC += sccNode\n                \n                if node === sccNode { break }\n            }\n            \n            handleNewSCC(newSCC)\n        }\n        \n        return nodeMarking\n    }\n}\n\nprivate extension GraphNode.Marking\n{\n    convenience init(index: Int, lowLink: Int, isOnStack: Bool)\n    {\n        self.init(number1: index, number2: lowLink, flag1: isOnStack)\n    }\n    \n    var index: Int\n    {\n        get { number1 }\n        set { number1 = newValue }\n    }\n    \n    var lowLink: Int\n    {\n        get { number2 }\n        set { number2 = newValue }\n    }\n    \n    var isOnStack: Bool\n    {\n        get { flag1 }\n        set { flag1 = newValue }\n    }\n}\n"}]},{"name":"Graph","files":[{"name":"GraphEdge.swift","symbols":[{"range":{"start":{"line":2,"character":7},"end":{"line":47,"character":1}},"kind":5,"selectionRange":{"start":{"line":2,"character":13},"end":{"line":2,"character":22}},"name":"GraphEdge","children":[{"range":{"start":{"line":2,"character":23},"end":{"line":2,"character":39}},"kind":26,"selectionRange":{"start":{"line":2,"character":23},"end":{"line":2,"character":29}},"name":"NodeID","references":[{"range":{"start":{"line":8,"character":38},"end":{"line":8,"character":38}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":21,"character":34},"end":{"line":21,"character":34}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":21,"character":54},"end":{"line":21,"character":54}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":27,"character":22},"end":{"line":27,"character":22}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":28,"character":22},"end":{"line":28,"character":22}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":46,"character":38},"end":{"line":46,"character":38}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]},{"range":{"start":{"line":2,"character":41},"end":{"line":2,"character":50}},"kind":26,"selectionRange":{"start":{"line":2,"character":41},"end":{"line":2,"character":50}},"name":"NodeValue","references":[{"range":{"start":{"line":8,"character":46},"end":{"line":8,"character":46}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":46,"character":46},"end":{"line":46,"character":46}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]},{"range":{"start":{"line":6,"character":11},"end":{"line":6,"character":70}},"kind":6,"selectionRange":{"start":{"line":6,"character":16},"end":{"line":6,"character":47}},"name":"hash(into:)"},{"range":{"start":{"line":7,"character":11},"end":{"line":7,"character":72}},"kind":6,"selectionRange":{"start":{"line":7,"character":23},"end":{"line":7,"character":48}},"name":"==(_:_:)"},{"range":{"start":{"line":12,"character":11},"end":{"line":12,"character":44}},"kind":7,"selectionRange":{"start":{"line":12,"character":15},"end":{"line":12,"character":17}},"name":"id","references":[{"range":{"start":{"line":53,"character":23},"end":{"line":53,"character":23}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":6,"character":65},"end":{"line":6,"character":65}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]},{"range":{"start":{"line":14,"character":11},"end":{"line":29,"character":5}},"kind":23,"selectionRange":{"start":{"line":14,"character":18},"end":{"line":14,"character":20}},"name":"ID","children":[{"range":{"start":{"line":16,"character":17},"end":{"line":19,"character":9}},"kind":6,"selectionRange":{"start":{"line":16,"character":17},"end":{"line":16,"character":53}},"name":"init(_:_:)","references":[{"range":{"start":{"line":36,"character":26},"end":{"line":36,"character":26}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":75,"character":26},"end":{"line":75,"character":26}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":12,"character":24},"end":{"line":12,"character":24}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]},{"range":{"start":{"line":21,"character":17},"end":{"line":25,"character":9}},"kind":6,"selectionRange":{"start":{"line":21,"character":17},"end":{"line":21,"character":61}},"name":"init(_:_:)","references":[{"range":{"start":{"line":31,"character":26},"end":{"line":31,"character":26}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":106,"character":19},"end":{"line":106,"character":19}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":18,"character":17},"end":{"line":18,"character":17}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]},{"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":28}},"kind":7,"selectionRange":{"start":{"line":27,"character":12},"end":{"line":27,"character":20}},"name":"sourceID","references":[{"range":{"start":{"line":23,"character":17},"end":{"line":23,"character":17}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]},{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":28}},"kind":7,"selectionRange":{"start":{"line":28,"character":12},"end":{"line":28,"character":20}},"name":"targetID","references":[{"range":{"start":{"line":24,"character":17},"end":{"line":24,"character":17}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]}],"references":[{"range":{"start":{"line":39,"character":41},"end":{"line":39,"character":41}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":75,"character":26},"end":{"line":75,"character":26}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":109,"character":38},"end":{"line":109,"character":38}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":114,"character":46},"end":{"line":114,"character":46}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":12,"character":19},"end":{"line":12,"character":19}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":12,"character":24},"end":{"line":12,"character":24}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]},{"range":{"start":{"line":33,"character":13},"end":{"line":39,"character":5}},"kind":6,"selectionRange":{"start":{"line":33,"character":13},"end":{"line":33,"character":69}},"name":"init(from:to:count:)","references":[{"range":{"start":{"line":87,"character":23},"end":{"line":87,"character":23}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":55,"character":42},"end":{"line":55,"character":42}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+TransitiveReduction.swift"}]},{"range":{"start":{"line":41,"character":25},"end":{"line":41,"character":39}},"kind":7,"selectionRange":{"start":{"line":41,"character":29},"end":{"line":41,"character":34}},"name":"count","references":[{"range":{"start":{"line":39,"character":50},"end":{"line":39,"character":50}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":25,"character":56},"end":{"line":25,"character":56}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":50,"character":13},"end":{"line":50,"character":13}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":79,"character":17},"end":{"line":79,"character":17}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":38,"character":13},"end":{"line":38,"character":13}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]},{"range":{"start":{"line":43,"character":11},"end":{"line":43,"character":27}},"kind":7,"selectionRange":{"start":{"line":43,"character":15},"end":{"line":43,"character":21}},"name":"source","references":[{"range":{"start":{"line":34,"character":50},"end":{"line":34,"character":50}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":37,"character":49},"end":{"line":37,"character":49}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":48,"character":13},"end":{"line":48,"character":13}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":49,"character":38},"end":{"line":49,"character":38}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":33,"character":47},"end":{"line":33,"character":47}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":12,"character":27},"end":{"line":12,"character":27}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":35,"character":13},"end":{"line":35,"character":13}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":33,"character":47},"end":{"line":33,"character":47}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]},{"range":{"start":{"line":44,"character":11},"end":{"line":44,"character":27}},"kind":7,"selectionRange":{"start":{"line":44,"character":15},"end":{"line":44,"character":21}},"name":"target","references":[{"range":{"start":{"line":35,"character":50},"end":{"line":35,"character":50}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":38,"character":47},"end":{"line":38,"character":47}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":48,"character":40},"end":{"line":48,"character":40}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":49,"character":13},"end":{"line":49,"character":13}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":33,"character":85},"end":{"line":33,"character":85}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":12,"character":35},"end":{"line":12,"character":35}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":36,"character":13},"end":{"line":36,"character":13}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":33,"character":85},"end":{"line":33,"character":85}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]}],"references":[{"range":{"start":{"line":116,"character":28},"end":{"line":116,"character":28}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":8,"character":28},"end":{"line":8,"character":28}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"}]}],"code":"import SwiftyToolz\n\npublic class GraphEdge<NodeID: Hashable, NodeValue>: Identifiable, Hashable\n{\n    // MARK: - Hashability\n    \n    public func hash(into hasher: inout Hasher) { hasher.combine(id) }\n    public static func == (lhs: Edge, rhs: Edge) -> Bool { lhs === rhs }\n    public typealias Edge = GraphEdge<NodeID, NodeValue>\n    \n    // MARK: - Identity\n    \n    public var id: ID { ID(source, target) }\n    \n    public struct ID: Hashable\n    {   \n        internal init(_ source: Node, _ target: Node)\n        {\n            self.init(source.id, target.id)\n        }\n        \n        internal init(_ sourceID: NodeID, _ targetID: NodeID)\n        {\n            self.sourceID = sourceID\n            self.targetID = targetID\n        }\n        \n        let sourceID: NodeID\n        let targetID: NodeID\n    }\n    \n    // MARK: - Basics\n    \n    internal init(from source: Node, to target: Node, count: Int = 1)\n    {\n        self.source = source\n        self.target = target\n        \n        self.count = count\n    }\n    \n    public internal(set) var count: Int\n    \n    public let source: Node\n    public let target: Node\n    \n    public typealias Node = GraphNode<NodeID, NodeValue>\n}\n"},{"name":"Graph.swift","symbols":[{"range":{"start":{"line":6,"character":7},"end":{"line":192,"character":1}},"kind":5,"selectionRange":{"start":{"line":6,"character":13},"end":{"line":6,"character":18}},"name":"Graph","children":[{"range":{"start":{"line":6,"character":19},"end":{"line":6,"character":35}},"kind":26,"selectionRange":{"start":{"line":6,"character":19},"end":{"line":6,"character":25}},"name":"NodeID","references":[{"range":{"start":{"line":11,"character":47},"end":{"line":11,"character":47}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":5,"character":53},"end":{"line":5,"character":53}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":10,"character":56},"end":{"line":10,"character":56}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":17,"character":63},"end":{"line":17,"character":63}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":10,"character":101},"end":{"line":10,"character":101}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":15,"character":60},"end":{"line":15,"character":60}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":21,"character":61},"end":{"line":21,"character":61}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":29,"character":42},"end":{"line":29,"character":42}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":29,"character":63},"end":{"line":29,"character":63}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":57,"character":39},"end":{"line":57,"character":39}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":58,"character":37},"end":{"line":58,"character":37}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":104,"character":36},"end":{"line":104,"character":36}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":104,"character":57},"end":{"line":104,"character":57}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":116,"character":38},"end":{"line":116,"character":38}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":133,"character":52},"end":{"line":133,"character":52}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":135,"character":34},"end":{"line":135,"character":34}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":157,"character":35},"end":{"line":157,"character":35}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":167,"character":33},"end":{"line":167,"character":33}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":177,"character":36},"end":{"line":177,"character":36}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":182,"character":40},"end":{"line":182,"character":40}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":187,"character":58},"end":{"line":187,"character":58}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":191,"character":38},"end":{"line":191,"character":38}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":11,"character":47},"end":{"line":11,"character":47}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+TransitiveReduction.swift"}]},{"range":{"start":{"line":6,"character":37},"end":{"line":6,"character":46}},"kind":26,"selectionRange":{"start":{"line":6,"character":37},"end":{"line":6,"character":46}},"name":"NodeValue","references":[{"range":{"start":{"line":11,"character":55},"end":{"line":11,"character":55}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":5,"character":61},"end":{"line":5,"character":61}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":10,"character":64},"end":{"line":10,"character":64}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":17,"character":71},"end":{"line":17,"character":71}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":10,"character":60},"end":{"line":10,"character":60}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":10,"character":85},"end":{"line":10,"character":85}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":15,"character":70},"end":{"line":15,"character":70}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":21,"character":47},"end":{"line":21,"character":47}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":116,"character":46},"end":{"line":116,"character":46}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":124,"character":32},"end":{"line":124,"character":32}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":133,"character":38},"end":{"line":133,"character":38}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":135,"character":45},"end":{"line":135,"character":45}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":140,"character":24},"end":{"line":140,"character":24}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":191,"character":46},"end":{"line":191,"character":46}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":11,"character":55},"end":{"line":11,"character":55}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+TransitiveReduction.swift"}]},{"range":{"start":{"line":10,"character":23},"end":{"line":13,"character":5}},"kind":6,"selectionRange":{"start":{"line":10,"character":23},"end":{"line":10,"character":53}},"name":"init(nodes:)"},{"range":{"start":{"line":15,"character":23},"end":{"line":18,"character":5}},"kind":6,"selectionRange":{"start":{"line":15,"character":23},"end":{"line":15,"character":53}},"name":"init(nodes:)"},{"range":{"start":{"line":20,"character":11},"end":{"line":25,"character":5}},"kind":6,"selectionRange":{"start":{"line":20,"character":11},"end":{"line":21,"character":68}},"name":"init(nodes:makeNodeIDForValue:)","references":[{"range":{"start":{"line":29,"character":24},"end":{"line":29,"character":24}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":12,"character":13},"end":{"line":12,"character":13}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":17,"character":13},"end":{"line":17,"character":13}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":28,"character":32},"end":{"line":28,"character":32}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":28,"character":32},"end":{"line":28,"character":32}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]},{"range":{"start":{"line":29,"character":11},"end":{"line":32,"character":5}},"kind":6,"selectionRange":{"start":{"line":29,"character":16},"end":{"line":29,"character":70}},"name":"removeEdge(from:to:)"},{"range":{"start":{"line":34,"character":11},"end":{"line":37,"character":5}},"kind":6,"selectionRange":{"start":{"line":34,"character":16},"end":{"line":34,"character":62}},"name":"removeEdge(from:to:)"},{"range":{"start":{"line":39,"character":11},"end":{"line":43,"character":5}},"kind":6,"selectionRange":{"start":{"line":39,"character":16},"end":{"line":39,"character":44}},"name":"removeEdge(with:)","children":[{"range":{"start":{"line":41,"character":18},"end":{"line":41,"character":22}},"kind":13,"selectionRange":{"start":{"line":41,"character":18},"end":{"line":41,"character":22}},"name":"edge"}],"references":[{"range":{"start":{"line":31,"character":8},"end":{"line":31,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":36,"character":8},"end":{"line":36,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":45,"character":11},"end":{"line":54,"character":5}},"kind":6,"selectionRange":{"start":{"line":45,"character":16},"end":{"line":45,"character":36}},"name":"remove(_:)","references":[{"range":{"start":{"line":42,"character":8},"end":{"line":42,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":57,"character":11},"end":{"line":68,"character":5}},"kind":6,"selectionRange":{"start":{"line":57,"character":16},"end":{"line":59,"character":39}},"name":"addEdge(from:to:count:)","children":[{"range":{"start":{"line":61,"character":18},"end":{"line":61,"character":24}},"kind":13,"selectionRange":{"start":{"line":61,"character":18},"end":{"line":61,"character":24}},"name":"source"},{"range":{"start":{"line":61,"character":52},"end":{"line":61,"character":58}},"kind":13,"selectionRange":{"start":{"line":61,"character":52},"end":{"line":61,"character":58}},"name":"target"}],"references":[{"range":{"start":{"line":37,"character":22},"end":{"line":37,"character":22}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":40,"character":34},"end":{"line":40,"character":34}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":40,"character":34},"end":{"line":40,"character":34}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]},{"range":{"start":{"line":71,"character":11},"end":{"line":96,"character":5}},"kind":6,"selectionRange":{"start":{"line":71,"character":16},"end":{"line":73,"character":39}},"name":"addEdge(from:to:count:)","children":[{"range":{"start":{"line":75,"character":8},"end":{"line":75,"character":44}},"kind":13,"selectionRange":{"start":{"line":75,"character":12},"end":{"line":75,"character":18}},"name":"edgeID"},{"range":{"start":{"line":77,"character":15},"end":{"line":77,"character":19}},"kind":13,"selectionRange":{"start":{"line":77,"character":15},"end":{"line":77,"character":19}},"name":"edge"},{"range":{"start":{"line":87,"character":12},"end":{"line":87,"character":67}},"kind":13,"selectionRange":{"start":{"line":87,"character":16},"end":{"line":87,"character":20}},"name":"edge"}],"references":[{"range":{"start":{"line":67,"character":15},"end":{"line":67,"character":15}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":98,"character":11},"end":{"line":102,"character":5}},"kind":6,"selectionRange":{"start":{"line":98,"character":16},"end":{"line":98,"character":56}},"name":"edge(from:to:)","references":[{"range":{"start":{"line":53,"character":42},"end":{"line":53,"character":42}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":24,"character":56},"end":{"line":24,"character":56}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"}]},{"range":{"start":{"line":104,"character":11},"end":{"line":107,"character":5}},"kind":6,"selectionRange":{"start":{"line":104,"character":16},"end":{"line":104,"character":64}},"name":"edge(from:to:)","references":[{"range":{"start":{"line":101,"character":15},"end":{"line":101,"character":15}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":109,"character":11},"end":{"line":112,"character":5}},"kind":7,"selectionRange":{"start":{"line":109,"character":15},"end":{"line":109,"character":20}},"name":"edges"},{"range":{"start":{"line":114,"character":24},"end":{"line":114,"character":57}},"kind":7,"selectionRange":{"start":{"line":114,"character":28},"end":{"line":114,"character":37}},"name":"edgesByID","references":[{"range":{"start":{"line":12,"character":32},"end":{"line":12,"character":32}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":32,"character":49},"end":{"line":32,"character":49}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":41,"character":25},"end":{"line":41,"character":25}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":53,"character":8},"end":{"line":53,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":77,"character":22},"end":{"line":77,"character":22}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":88,"character":12},"end":{"line":88,"character":12}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":106,"character":8},"end":{"line":106,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":111,"character":8},"end":{"line":111,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":31,"character":20},"end":{"line":31,"character":20}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":31,"character":20},"end":{"line":31,"character":20}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]},{"range":{"start":{"line":124,"character":11},"end":{"line":131,"character":5}},"kind":6,"selectionRange":{"start":{"line":124,"character":16},"end":{"line":124,"character":42}},"name":"insert(_:)","children":[{"range":{"start":{"line":126,"character":8},"end":{"line":126,"character":46}},"kind":13,"selectionRange":{"start":{"line":126,"character":12},"end":{"line":126,"character":18}},"name":"nodeID"},{"range":{"start":{"line":127,"character":15},"end":{"line":127,"character":27}},"kind":13,"selectionRange":{"start":{"line":127,"character":15},"end":{"line":127,"character":27}},"name":"existingNode"},{"range":{"start":{"line":128,"character":8},"end":{"line":128,"character":49}},"kind":13,"selectionRange":{"start":{"line":128,"character":12},"end":{"line":128,"character":16}},"name":"node"}]},{"range":{"start":{"line":133,"character":13},"end":{"line":133,"character":58}},"kind":7,"selectionRange":{"start":{"line":133,"character":17},"end":{"line":133,"character":35}},"name":"makeNodeIDForValue","references":[{"range":{"start":{"line":30,"character":55},"end":{"line":30,"character":55}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":24,"character":13},"end":{"line":24,"character":13}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":126,"character":21},"end":{"line":126,"character":21}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":135,"character":11},"end":{"line":138,"character":5}},"kind":6,"selectionRange":{"start":{"line":135,"character":16},"end":{"line":135,"character":41}},"name":"value(for:)"},{"range":{"start":{"line":140,"character":11},"end":{"line":143,"character":5}},"kind":7,"selectionRange":{"start":{"line":140,"character":15},"end":{"line":140,"character":21}},"name":"values"},{"range":{"start":{"line":147,"character":11},"end":{"line":150,"character":5}},"kind":7,"selectionRange":{"start":{"line":147,"character":15},"end":{"line":147,"character":22}},"name":"sources","references":[{"range":{"start":{"line":16,"character":26},"end":{"line":16,"character":26}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":16,"character":26},"end":{"line":16,"character":26}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+TransitiveReduction.swift"}]},{"range":{"start":{"line":152,"character":11},"end":{"line":155,"character":5}},"kind":7,"selectionRange":{"start":{"line":152,"character":15},"end":{"line":152,"character":20}},"name":"sinks","references":[{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"}]},{"range":{"start":{"line":157,"character":11},"end":{"line":160,"character":5}},"kind":6,"selectionRange":{"start":{"line":157,"character":16},"end":{"line":157,"character":42}},"name":"contains(_:)","references":[{"range":{"start":{"line":34,"character":28},"end":{"line":34,"character":28}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":35,"character":28},"end":{"line":35,"character":28}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"}]},{"range":{"start":{"line":162,"character":11},"end":{"line":165,"character":5}},"kind":6,"selectionRange":{"start":{"line":162,"character":16},"end":{"line":162,"character":38}},"name":"contains(_:)","references":[{"range":{"start":{"line":100,"character":14},"end":{"line":100,"character":14}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":100,"character":32},"end":{"line":100,"character":32}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":167,"character":11},"end":{"line":170,"character":5}},"kind":6,"selectionRange":{"start":{"line":167,"character":16},"end":{"line":167,"character":40}},"name":"node(for:)","references":[{"range":{"start":{"line":61,"character":27},"end":{"line":61,"character":27}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":61,"character":61},"end":{"line":61,"character":61}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":137,"character":8},"end":{"line":137,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":159,"character":8},"end":{"line":159,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":164,"character":13},"end":{"line":164,"character":13}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":172,"character":11},"end":{"line":175,"character":5}},"kind":6,"selectionRange":{"start":{"line":172,"character":16},"end":{"line":172,"character":62}},"name":"sort(by:)"},{"range":{"start":{"line":177,"character":11},"end":{"line":180,"character":5}},"kind":7,"selectionRange":{"start":{"line":177,"character":15},"end":{"line":177,"character":23}},"name":"nodesIDs"},{"range":{"start":{"line":182,"character":11},"end":{"line":185,"character":5}},"kind":7,"selectionRange":{"start":{"line":182,"character":15},"end":{"line":182,"character":20}},"name":"nodes","references":[{"range":{"start":{"line":142,"character":8},"end":{"line":142,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":13,"character":20},"end":{"line":13,"character":20}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":13,"character":20},"end":{"line":13,"character":20}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":187,"character":24},"end":{"line":187,"character":73}},"kind":7,"selectionRange":{"start":{"line":187,"character":28},"end":{"line":187,"character":37}},"name":"nodesByID","references":[{"range":{"start":{"line":11,"character":20},"end":{"line":11,"character":20}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":19,"character":33},"end":{"line":19,"character":33}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":10,"character":20},"end":{"line":10,"character":20}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Components.swift"},{"range":{"start":{"line":13,"character":15},"end":{"line":13,"character":15}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":23,"character":8},"end":{"line":23,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":127,"character":30},"end":{"line":127,"character":30}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":129,"character":8},"end":{"line":129,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":149,"character":8},"end":{"line":149,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":154,"character":8},"end":{"line":154,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":169,"character":8},"end":{"line":169,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":174,"character":8},"end":{"line":174,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":179,"character":8},"end":{"line":179,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":184,"character":8},"end":{"line":184,"character":8}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]}],"references":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":11,"character":41},"end":{"line":11,"character":41}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":10}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":5,"character":47},"end":{"line":5,"character":47}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":10,"character":50},"end":{"line":10,"character":50}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":17,"character":57},"end":{"line":17,"character":57}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":29,"character":24},"end":{"line":29,"character":24}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Components.swift"},{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":52,"character":34},"end":{"line":52,"character":34}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+TransitiveReduction.swift"},{"range":{"start":{"line":11,"character":41},"end":{"line":11,"character":41}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+TransitiveReduction.swift"},{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"},{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"},{"range":{"start":{"line":52,"character":34},"end":{"line":52,"character":34}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]}],"code":"import OrderedCollections\nimport SwiftyToolz\n\n/**\n Holds values in nodes which can be connected through edges. Nodes maintain an order, and so the graph can be sorted.\n */\npublic class Graph<NodeID: Hashable, NodeValue>\n{\n    // MARK: - Initialize\n    \n    public convenience init(nodes: OrderedNodes = []) where NodeValue: Identifiable, NodeValue.ID == NodeID\n    {\n        self.init(nodes: nodes) { $0.id }\n    }\n    \n    public convenience init(nodes: OrderedNodes = []) where NodeID == NodeValue\n    {\n        self.init(nodes: nodes) { $0 }\n    }\n    \n    public init(nodes: OrderedNodes = [],\n                makeNodeIDForValue: @escaping (NodeValue) -> NodeID)\n    {\n        nodesByID = .init(uniqueKeysWithValues: nodes.map { ($0.id, $0) })\n        self.makeNodeIDForValue = makeNodeIDForValue\n    }\n    \n    // MARK: - Edges\n    \n    public func removeEdge(from sourceID: NodeID, to targetID: NodeID)\n    {\n        removeEdge(with: .init(sourceID, targetID))\n    }\n    \n    public func removeEdge(from source: Node, to target: Node)\n    {\n        removeEdge(with: .init(source, target))\n    }\n    \n    public func removeEdge(with id: Edge.ID)\n    {\n        guard let edge = edgesByID[id] else { return }\n        remove(edge)\n    }\n    \n    public func remove(_ edge: Edge)\n    {\n        // remove from node caches\n        edge.source.descendants -= edge.target\n        edge.target.ancestors -= edge.source\n        edge.count = 0\n        \n        // remove edge itself\n        edgesByID[edge.id] = nil\n    }\n    \n    @discardableResult\n    public func addEdge(from sourceID: NodeID,\n                        to targetID: NodeID,\n                        count: Int = 1) -> Edge?\n    {\n        guard let source = node(for: sourceID), let target = node(for: targetID) else\n        {\n            log(warning: \"Tried to add edge between non-existing node IDs:\\nsource ID = \\(sourceID)\\ntarget ID = \\(targetID)\")\n            return nil\n        }\n        \n        return addEdge(from: source, to: target, count: count)\n    }\n    \n    @discardableResult\n    public func addEdge(from source: Node,\n                        to target: Node,\n                        count: Int = 1) -> Edge\n    {\n        let edgeID = Edge.ID(source, target)\n        \n        if let edge = edgesByID[edgeID]\n        {\n            edge.count += count\n            \n            // TODO: maintain count in edge caches in nodes as well, for algorithms that take edge weight into account when traversing the graph, like dijkstra shortest path ...\n            \n            return edge\n        }\n        else\n        {\n            let edge = Edge(from: source, to: target, count: count)\n            edgesByID[edgeID] = edge\n            \n            // add to node caches\n            source.descendants += target\n            target.ancestors += source\n            \n            return edge\n        }\n    }\n    \n    public func edge(from source: Node, to target: Node) -> Edge?\n    {\n        guard contains(source), contains(target) else { return nil }\n        return edge(from: source.id, to: target.id)\n    }\n    \n    public func edge(from sourceID: NodeID, to targetID: NodeID) -> Edge?\n    {\n        edgesByID[.init(sourceID, targetID)]\n    }\n    \n    public var edges: Dictionary<Edge.ID, Edge>.Values\n    {\n        edgesByID.values\n    }\n    \n    public private(set) var edgesByID = [Edge.ID: Edge]()\n    \n    public typealias Edge = GraphEdge<NodeID, NodeValue>\n    \n    // MARK: - Node Values\n    \n    /**\n     Inserts a new node with the given value into the graph and returns the new node. If a node with the same generated node id already exists, the function returns the existing node.\n     */\n    @discardableResult\n    public func insert(_ value: NodeValue) -> Node\n    {\n        let nodeID = makeNodeIDForValue(value)\n        if let existingNode = nodesByID[nodeID] { return existingNode }\n        let node = Node(id: nodeID, value: value)\n        nodesByID[nodeID] = node\n        return node\n    }\n    \n    internal let makeNodeIDForValue: (NodeValue) -> NodeID\n    \n    public func value(for nodeID: NodeID) -> NodeValue?\n    {\n        node(for: nodeID)?.value\n    }\n    \n    public var values: [NodeValue]\n    {\n        nodes.map { $0.value }\n    }\n    \n    // MARK: - Nodes\n    \n    public var sources: [Node]\n    {\n        nodesByID.values.filter { $0.isSource }\n    }\n    \n    public var sinks: [Node]\n    {\n        nodesByID.values.filter { $0.isSink }\n    }\n    \n    public func contains(_ nodeID: NodeID) -> Bool\n    {\n        node(for: nodeID) != nil\n    }\n    \n    public func contains(_ node: Node) -> Bool\n    {\n        self.node(for: node.id) === node\n    }\n    \n    public func node(for nodeID: NodeID) -> Node?\n    {\n        nodesByID[nodeID]\n    }\n    \n    public func sort(by nodesAreInOrder: (Node, Node) -> Bool)\n    {\n        nodesByID.values.sort(by: nodesAreInOrder)\n    }\n    \n    public var nodesIDs: OrderedSet<NodeID>\n    {\n        nodesByID.keys\n    }\n    \n    public var nodes: OrderedDictionary<NodeID, Node>.Values\n    {\n        nodesByID.values\n    }\n    \n    public private(set) var nodesByID = OrderedDictionary<NodeID, Node>()\n    \n    public typealias OrderedNodes = OrderedSet<Node>\n    public typealias Nodes = Set<Node>\n    public typealias Node = GraphNode<NodeID, NodeValue>\n}\n"},{"name":"GraphNode.swift","symbols":[{"range":{"start":{"line":2,"character":7},"end":{"line":49,"character":1}},"kind":5,"selectionRange":{"start":{"line":2,"character":13},"end":{"line":2,"character":22}},"name":"GraphNode","children":[{"range":{"start":{"line":2,"character":23},"end":{"line":2,"character":35}},"kind":26,"selectionRange":{"start":{"line":2,"character":23},"end":{"line":2,"character":25}},"name":"ID","references":[{"range":{"start":{"line":37,"character":38},"end":{"line":37,"character":38}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":41,"character":22},"end":{"line":41,"character":22}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":47,"character":19},"end":{"line":47,"character":19}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"}]},{"range":{"start":{"line":2,"character":37},"end":{"line":2,"character":42}},"kind":26,"selectionRange":{"start":{"line":2,"character":37},"end":{"line":2,"character":42}},"name":"Value","references":[{"range":{"start":{"line":37,"character":42},"end":{"line":37,"character":42}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":41,"character":33},"end":{"line":41,"character":33}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":48,"character":22},"end":{"line":48,"character":22}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"}]},{"range":{"start":{"line":6,"character":11},"end":{"line":6,"character":32}},"kind":7,"selectionRange":{"start":{"line":6,"character":15},"end":{"line":6,"character":22}},"name":"marking","references":[{"range":{"start":{"line":13,"character":17},"end":{"line":13,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":20,"character":25},"end":{"line":20,"character":25}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":25,"character":13},"end":{"line":25,"character":13}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":13,"character":46},"end":{"line":13,"character":46}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":19,"character":30},"end":{"line":19,"character":30}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":42,"character":43},"end":{"line":42,"character":43}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":72,"character":52},"end":{"line":72,"character":52}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":42,"character":43},"end":{"line":42,"character":43}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"},{"range":{"start":{"line":72,"character":52},"end":{"line":72,"character":52}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":8,"character":11},"end":{"line":21,"character":5}},"kind":5,"selectionRange":{"start":{"line":8,"character":17},"end":{"line":8,"character":24}},"name":"Marking","children":[{"range":{"start":{"line":10,"character":15},"end":{"line":17,"character":9}},"kind":6,"selectionRange":{"start":{"line":10,"character":15},"end":{"line":11,"character":61}},"name":"init(number1:number2:flag1:flag2:)","references":[{"range":{"start":{"line":32,"character":42},"end":{"line":32,"character":42}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":94,"character":13},"end":{"line":94,"character":13}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":94,"character":13},"end":{"line":94,"character":13}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":33}},"kind":7,"selectionRange":{"start":{"line":19,"character":12},"end":{"line":19,"character":19}},"name":"number1","references":[{"range":{"start":{"line":42,"character":14},"end":{"line":42,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":43,"character":14},"end":{"line":43,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":99,"character":14},"end":{"line":99,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":100,"character":14},"end":{"line":100,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":13,"character":17},"end":{"line":13,"character":17}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":99,"character":14},"end":{"line":99,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"},{"range":{"start":{"line":100,"character":14},"end":{"line":100,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":33}},"kind":7,"selectionRange":{"start":{"line":19,"character":21},"end":{"line":19,"character":28}},"name":"number2","references":[{"range":{"start":{"line":105,"character":14},"end":{"line":105,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":106,"character":14},"end":{"line":106,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":14,"character":17},"end":{"line":14,"character":17}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":105,"character":14},"end":{"line":105,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"},{"range":{"start":{"line":106,"character":14},"end":{"line":106,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":30}},"kind":7,"selectionRange":{"start":{"line":20,"character":12},"end":{"line":20,"character":17}},"name":"flag1","references":[{"range":{"start":{"line":111,"character":14},"end":{"line":111,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":112,"character":14},"end":{"line":112,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":15,"character":17},"end":{"line":15,"character":17}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":111,"character":14},"end":{"line":111,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"},{"range":{"start":{"line":112,"character":14},"end":{"line":112,"character":14}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":30}},"kind":7,"selectionRange":{"start":{"line":20,"character":19},"end":{"line":20,"character":24}},"name":"flag2","references":[{"range":{"start":{"line":16,"character":17},"end":{"line":16,"character":17}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"}]}],"references":[{"range":{"start":{"line":9,"character":42},"end":{"line":9,"character":42}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":23,"character":28},"end":{"line":23,"character":28}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":23,"character":48},"end":{"line":23,"character":48}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":30,"character":27},"end":{"line":30,"character":27}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":32,"character":31},"end":{"line":32,"character":31}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":38,"character":28},"end":{"line":38,"character":28}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":30,"character":76},"end":{"line":30,"character":76}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":34,"character":31},"end":{"line":34,"character":31}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":90,"character":28},"end":{"line":90,"character":28}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":6,"character":24},"end":{"line":6,"character":24}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":30,"character":76},"end":{"line":30,"character":76}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"},{"range":{"start":{"line":34,"character":31},"end":{"line":34,"character":31}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"},{"range":{"start":{"line":90,"character":28},"end":{"line":90,"character":28}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":51}},"kind":7,"selectionRange":{"start":{"line":25,"character":15},"end":{"line":25,"character":21}},"name":"isSink","references":[{"range":{"start":{"line":154,"character":37},"end":{"line":154,"character":37}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":26,"character":11},"end":{"line":26,"character":51}},"kind":7,"selectionRange":{"start":{"line":26,"character":15},"end":{"line":26,"character":23}},"name":"isSource","references":[{"range":{"start":{"line":149,"character":37},"end":{"line":149,"character":37}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"}]},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":64}},"kind":7,"selectionRange":{"start":{"line":28,"character":15},"end":{"line":28,"character":25}},"name":"neighbours","references":[{"range":{"start":{"line":31,"character":30},"end":{"line":31,"character":30}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Components.swift"}]},{"range":{"start":{"line":30,"character":25},"end":{"line":30,"character":52}},"kind":7,"selectionRange":{"start":{"line":30,"character":29},"end":{"line":30,"character":38}},"name":"ancestors","references":[{"range":{"start":{"line":23,"character":35},"end":{"line":23,"character":35}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":49,"character":20},"end":{"line":49,"character":20}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":92,"character":19},"end":{"line":92,"character":19}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":26,"character":32},"end":{"line":26,"character":32}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":28,"character":39},"end":{"line":28,"character":39}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"}]},{"range":{"start":{"line":31,"character":25},"end":{"line":31,"character":54}},"kind":7,"selectionRange":{"start":{"line":31,"character":29},"end":{"line":31,"character":40}},"name":"descendants","references":[{"range":{"start":{"line":47,"character":31},"end":{"line":47,"character":31}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+MinimumEquivalentGraph.swift"},{"range":{"start":{"line":48,"character":20},"end":{"line":48,"character":20}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":91,"character":19},"end":{"line":91,"character":19}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":49,"character":31},"end":{"line":49,"character":31}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+TransitiveReduction.swift"},{"range":{"start":{"line":40,"character":27},"end":{"line":40,"character":27}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":25,"character":30},"end":{"line":25,"character":30}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":28,"character":51},"end":{"line":28,"character":51}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":40,"character":27},"end":{"line":40,"character":27}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]},{"range":{"start":{"line":35,"character":11},"end":{"line":35,"character":70}},"kind":6,"selectionRange":{"start":{"line":35,"character":16},"end":{"line":35,"character":47}},"name":"hash(into:)"},{"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":72}},"kind":6,"selectionRange":{"start":{"line":36,"character":23},"end":{"line":36,"character":48}},"name":"==(_:_:)"},{"range":{"start":{"line":41,"character":13},"end":{"line":45,"character":5}},"kind":6,"selectionRange":{"start":{"line":41,"character":13},"end":{"line":41,"character":39}},"name":"init(id:value:)","references":[{"range":{"start":{"line":27,"character":62},"end":{"line":27,"character":62}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":128,"character":19},"end":{"line":128,"character":19}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":27,"character":43},"end":{"line":27,"character":43}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Condensation.swift"},{"range":{"start":{"line":27,"character":43},"end":{"line":27,"character":43}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+CondensationGraph.swift"}]},{"range":{"start":{"line":47,"character":11},"end":{"line":47,"character":21}},"kind":7,"selectionRange":{"start":{"line":47,"character":15},"end":{"line":47,"character":17}},"name":"id","references":[{"range":{"start":{"line":27,"character":74},"end":{"line":27,"character":74}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":34,"character":57},"end":{"line":34,"character":57}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":35,"character":57},"end":{"line":35,"character":57}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":37,"character":56},"end":{"line":37,"character":56}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":38,"character":54},"end":{"line":38,"character":54}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":23,"character":64},"end":{"line":23,"character":64}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":101,"character":33},"end":{"line":101,"character":33}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":101,"character":48},"end":{"line":101,"character":48}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":164,"character":28},"end":{"line":164,"character":28}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":18,"character":29},"end":{"line":18,"character":29}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":18,"character":40},"end":{"line":18,"character":40}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":35,"character":65},"end":{"line":35,"character":65}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":43,"character":13},"end":{"line":43,"character":13}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"}]},{"range":{"start":{"line":48,"character":11},"end":{"line":48,"character":27}},"kind":7,"selectionRange":{"start":{"line":48,"character":15},"end":{"line":48,"character":20}},"name":"value","references":[{"range":{"start":{"line":27,"character":88},"end":{"line":27,"character":88}},"filePathRelativeToRoot":"Code/Graph+Copying.swift"},{"range":{"start":{"line":137,"character":27},"end":{"line":137,"character":27}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":142,"character":23},"end":{"line":142,"character":23}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":44,"character":13},"end":{"line":44,"character":13}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"}]}],"references":[{"range":{"start":{"line":18,"character":17},"end":{"line":18,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":30,"character":17},"end":{"line":30,"character":17}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":32,"character":21},"end":{"line":32,"character":21}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+Node.Marking.swift"},{"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":18}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+AncestorCount.swift"},{"range":{"start":{"line":191,"character":28},"end":{"line":191,"character":28}},"filePathRelativeToRoot":"Code/Graph/Graph.swift"},{"range":{"start":{"line":46,"character":28},"end":{"line":46,"character":28}},"filePathRelativeToRoot":"Code/Graph/GraphEdge.swift"},{"range":{"start":{"line":90,"character":18},"end":{"line":90,"character":18}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+StronglyConnectedComponents.swift"},{"range":{"start":{"line":37,"character":28},"end":{"line":37,"character":28}},"filePathRelativeToRoot":"Code/Graph/GraphNode.swift"},{"range":{"start":{"line":90,"character":18},"end":{"line":90,"character":18}},"filePathRelativeToRoot":"Code/Graph+Algorithms/Graph+SCCs.swift"}]}],"code":"import SwiftyToolz\n\npublic class GraphNode<ID: Hashable, Value>: Identifiable, Hashable\n{\n    // MARK: - Marking for Algorithms\n    \n    public var marking: Marking?\n    \n    public class Marking\n    {\n        public init(number1: Int = 0, number2: Int = 0,\n                    flag1: Bool = false, flag2: Bool = false)\n        {\n            self.number1 = number1\n            self.number2 = number2\n            self.flag1 = flag1\n            self.flag2 = flag2\n        }\n        \n        var number1, number2: Int\n        var flag1, flag2: Bool\n    }\n    \n    // MARK: - Caches for Accessing Neighbours Quickly\n    \n    public var isSink: Bool { descendants.isEmpty }\n    public var isSource: Bool { ancestors.isEmpty }\n    \n    public var neighbours: Set<Node> { ancestors + descendants }\n    \n    public internal(set) var ancestors = Set<Node>()\n    public internal(set) var descendants = Set<Node>()\n    \n    // MARK: - Hashability\n    \n    public func hash(into hasher: inout Hasher) { hasher.combine(id) }\n    public static func == (lhs: Node, rhs: Node) -> Bool { lhs === rhs }\n    public typealias Node = GraphNode<ID, Value>\n    \n    // MARK: - Identity & Value\n    \n    internal init(id: ID, value: Value)\n    {\n        self.id = id\n        self.value = value\n    }\n    \n    public let id: ID\n    public let value: Value\n}\n"}]}]}]}}