{"codebase":{"name":"SwiftObserver","files":[{"name":"Package.swift","symbols":[{"range":{"start":{"line":4,"character":0},"end":{"line":45,"character":1}},"kind":13,"selectionRange":{"start":{"line":4,"character":4},"end":{"line":4,"character":11}},"name":"package"}],"code":"// swift-tools-version:5.6.0\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"SwiftObserver\",\n    platforms: [\n        .iOS(.v12), .macOS(.v10_14), .tvOS(.v12), .watchOS(.v6)\n    ],\n    products: [\n        .library(\n            name: \"SwiftObserver\",\n            targets: [\"SwiftObserver\"]\n        ),\n        .library(\n            name: \"CombineObserver\",\n            targets: [\"CombineObserver\"]\n        ),\n    ],\n    dependencies: [\n        .package(\n            url: \"https://github.com/flowtoolz/SwiftyToolz.git\",\n            exact: \"0.5.1\"\n        )\n    ],\n    targets: [\n        .target(\n            name: \"SwiftObserver\",\n            dependencies: [\"SwiftyToolz\"],\n            path: \"Code/SwiftObserver\"\n        ),\n        .target(\n            name: \"CombineObserver\",\n            dependencies: [\"SwiftObserver\", \"SwiftyToolz\"],\n            path: \"Code/CombineObserver\"\n        ),\n        .testTarget(\n            name: \"SwiftObserverTests\",\n            dependencies: [\"SwiftObserver\", \"SwiftyToolz\"]\n        ),\n        .testTarget(\n            name: \"CombineObserverTests\",\n            dependencies: [\"CombineObserver\", \"SwiftObserver\", \"SwiftyToolz\"]\n        )\n    ]\n)\n"}],"subfolders":[{"name":"Tests","subfolders":[{"name":"CombineObserverTests","files":[{"name":"CombineObserverTests.swift","symbols":[{"range":{"start":{"line":6,"character":0},"end":{"line":56,"character":1}},"kind":5,"selectionRange":{"start":{"line":6,"character":6},"end":{"line":6,"character":26}},"name":"CombineObserverTests","children":[{"range":{"start":{"line":8,"character":4},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":8,"character":9},"end":{"line":8,"character":48}},"name":"testCreatingAndSubscribingToPublisher()","children":[{"range":{"start":{"line":10,"character":20},"end":{"line":10,"character":34}},"kind":13,"selectionRange":{"start":{"line":10,"character":24},"end":{"line":10,"character":30}},"name":"number"},{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":49}},"kind":13,"selectionRange":{"start":{"line":11,"character":12},"end":{"line":11,"character":27}},"name":"numberPublisher"},{"range":{"start":{"line":13,"character":8},"end":{"line":13,"character":37}},"kind":13,"selectionRange":{"start":{"line":13,"character":12},"end":{"line":13,"character":27}},"name":"receivedNumbers"},{"range":{"start":{"line":15,"character":8},"end":{"line":15,"character":76}},"kind":13,"selectionRange":{"start":{"line":15,"character":12},"end":{"line":15,"character":23}},"name":"cancellable"}]},{"range":{"start":{"line":24,"character":4},"end":{"line":38,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":9},"end":{"line":24,"character":40}},"name":"testUsingDropFirstOnPublisher()","children":[{"range":{"start":{"line":26,"character":20},"end":{"line":26,"character":34}},"kind":13,"selectionRange":{"start":{"line":26,"character":24},"end":{"line":26,"character":30}},"name":"number"},{"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":49}},"kind":13,"selectionRange":{"start":{"line":27,"character":12},"end":{"line":27,"character":27}},"name":"numberPublisher"},{"range":{"start":{"line":29,"character":8},"end":{"line":29,"character":37}},"kind":13,"selectionRange":{"start":{"line":29,"character":12},"end":{"line":29,"character":27}},"name":"receivedNumbers"},{"range":{"start":{"line":31,"character":8},"end":{"line":31,"character":88}},"kind":13,"selectionRange":{"start":{"line":31,"character":12},"end":{"line":31,"character":23}},"name":"cancellable"}]},{"range":{"start":{"line":40,"character":4},"end":{"line":55,"character":5}},"kind":6,"selectionRange":{"start":{"line":40,"character":9},"end":{"line":40,"character":52}},"name":"testCreatingPublisherOnUncachedObservable()","children":[{"range":{"start":{"line":42,"character":20},"end":{"line":42,"character":36}},"kind":13,"selectionRange":{"start":{"line":42,"character":24},"end":{"line":42,"character":30}},"name":"number"},{"range":{"start":{"line":43,"character":8},"end":{"line":43,"character":60}},"kind":13,"selectionRange":{"start":{"line":43,"character":12},"end":{"line":43,"character":24}},"name":"numberFilter"},{"range":{"start":{"line":44,"character":8},"end":{"line":44,"character":54}},"kind":13,"selectionRange":{"start":{"line":44,"character":12},"end":{"line":44,"character":27}},"name":"filterPublisher"},{"range":{"start":{"line":46,"character":8},"end":{"line":46,"character":37}},"kind":13,"selectionRange":{"start":{"line":46,"character":12},"end":{"line":46,"character":27}},"name":"receivedNumbers"},{"range":{"start":{"line":48,"character":8},"end":{"line":48,"character":72}},"kind":13,"selectionRange":{"start":{"line":48,"character":12},"end":{"line":48,"character":23}},"name":"cancellable"}]}]}],"code":"import XCTest\nimport CombineObserver\nimport SwiftObserver\nimport SwiftyToolz\n\n@available(iOS 13.0, tvOS 13.0, *)\nclass CombineObserverTests: XCTestCase\n{\n    func testCreatingAndSubscribingToPublisher()\n    {\n        @Observable var number = 7\n        let numberPublisher = $number.publisher()\n        \n        var receivedNumbers = [Int]()\n        \n        let cancellable = numberPublisher.sink { receivedNumbers += $0.new }\n        XCTAssertEqual(receivedNumbers, [7])\n        \n        number = 42\n        XCTAssertEqual(receivedNumbers, [7, 42])\n        \n        cancellable.cancel() // just to avoid warning\n    }\n    \n    func testUsingDropFirstOnPublisher()\n    {\n        @Observable var number = 7\n        let numberPublisher = $number.publisher()\n        \n        var receivedNumbers = [Int]()\n        \n        let cancellable = numberPublisher.dropFirst().sink { receivedNumbers += $0.new }\n        XCTAssertEqual(receivedNumbers, [])\n        \n        number = 42\n        XCTAssertEqual(receivedNumbers, [42])\n        \n        cancellable.cancel() // just to avoid warning\n    }\n    \n    func testCreatingPublisherOnUncachedObservable()\n    {\n        @Observable var number = 200\n        let numberFilter = $number.new().filter { $0 > 100 }\n        let filterPublisher = numberFilter.publisher()\n        \n        var receivedNumbers = [Int]()\n        \n        let cancellable = filterPublisher.sink { receivedNumbers += $0 }\n        XCTAssertEqual(receivedNumbers, [])\n        \n        number = 300\n        XCTAssertEqual(receivedNumbers, [300])\n        \n        cancellable.cancel() // just to avoid warning\n    }\n}\n"}]},{"name":"SwiftObserverTests","files":[{"name":"ObservationTransformTests.swift","symbols":[{"range":{"start":{"line":3,"character":0},"end":{"line":251,"character":1}},"kind":5,"selectionRange":{"start":{"line":3,"character":6},"end":{"line":3,"character":31}},"name":"ObservationTransformTests","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":26,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":41}},"name":"testChainingObservationMappers()","children":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":27}},"kind":13,"selectionRange":{"start":{"line":7,"character":12},"end":{"line":7,"character":19}},"name":"didFire"},{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":28}},"kind":13,"selectionRange":{"start":{"line":9,"character":12},"end":{"line":9,"character":18}},"name":"number"}]},{"range":{"start":{"line":28,"character":4},"end":{"line":43,"character":5}},"kind":6,"selectionRange":{"start":{"line":28,"character":9},"end":{"line":28,"character":52}},"name":"testChainingObservationMappersWithReceive()","children":[{"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":27}},"kind":13,"selectionRange":{"start":{"line":30,"character":12},"end":{"line":30,"character":19}},"name":"didFire"},{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":28}},"kind":13,"selectionRange":{"start":{"line":32,"character":12},"end":{"line":32,"character":18}},"name":"number"}]},{"range":{"start":{"line":45,"character":4},"end":{"line":62,"character":5}},"kind":6,"selectionRange":{"start":{"line":45,"character":9},"end":{"line":45,"character":33}},"name":"testObservationMapping()","children":[{"range":{"start":{"line":47,"character":8},"end":{"line":47,"character":37}},"kind":13,"selectionRange":{"start":{"line":47,"character":12},"end":{"line":47,"character":20}},"name":"testText"},{"range":{"start":{"line":49,"character":8},"end":{"line":49,"character":27}},"kind":13,"selectionRange":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"name":"didFire"},{"range":{"start":{"line":50,"character":8},"end":{"line":50,"character":35}},"kind":13,"selectionRange":{"start":{"line":50,"character":12},"end":{"line":50,"character":26}},"name":"observedString"}]},{"range":{"start":{"line":64,"character":4},"end":{"line":84,"character":5}},"kind":6,"selectionRange":{"start":{"line":64,"character":9},"end":{"line":64,"character":40}},"name":"testObservationMappingChained()","children":[{"range":{"start":{"line":66,"character":8},"end":{"line":66,"character":58}},"kind":13,"selectionRange":{"start":{"line":66,"character":12},"end":{"line":66,"character":20}},"name":"testText"},{"range":{"start":{"line":68,"character":8},"end":{"line":68,"character":27}},"kind":13,"selectionRange":{"start":{"line":68,"character":12},"end":{"line":68,"character":19}},"name":"didFire"},{"range":{"start":{"line":69,"character":8},"end":{"line":69,"character":35}},"kind":13,"selectionRange":{"start":{"line":69,"character":12},"end":{"line":69,"character":26}},"name":"observedString"}]},{"range":{"start":{"line":86,"character":4},"end":{"line":103,"character":5}},"kind":6,"selectionRange":{"start":{"line":86,"character":9},"end":{"line":86,"character":36}},"name":"testObservationMappingNew()","children":[{"range":{"start":{"line":88,"character":8},"end":{"line":88,"character":37}},"kind":13,"selectionRange":{"start":{"line":88,"character":12},"end":{"line":88,"character":20}},"name":"testText"},{"range":{"start":{"line":90,"character":8},"end":{"line":90,"character":27}},"kind":13,"selectionRange":{"start":{"line":90,"character":12},"end":{"line":90,"character":19}},"name":"didFire"},{"range":{"start":{"line":91,"character":8},"end":{"line":91,"character":35}},"kind":13,"selectionRange":{"start":{"line":91,"character":12},"end":{"line":91,"character":26}},"name":"observedString"}]},{"range":{"start":{"line":105,"character":4},"end":{"line":123,"character":5}},"kind":6,"selectionRange":{"start":{"line":105,"character":9},"end":{"line":105,"character":46}},"name":"testObservationMappingChainAfterNew()","children":[{"range":{"start":{"line":107,"character":8},"end":{"line":107,"character":37}},"kind":13,"selectionRange":{"start":{"line":107,"character":12},"end":{"line":107,"character":20}},"name":"testText"},{"range":{"start":{"line":109,"character":8},"end":{"line":109,"character":27}},"kind":13,"selectionRange":{"start":{"line":109,"character":12},"end":{"line":109,"character":19}},"name":"didFire"},{"range":{"start":{"line":110,"character":8},"end":{"line":110,"character":35}},"kind":13,"selectionRange":{"start":{"line":110,"character":12},"end":{"line":110,"character":26}},"name":"observedString"}]},{"range":{"start":{"line":125,"character":4},"end":{"line":142,"character":5}},"kind":6,"selectionRange":{"start":{"line":125,"character":9},"end":{"line":125,"character":39}},"name":"testObservationMappingUnwrap()","children":[{"range":{"start":{"line":127,"character":8},"end":{"line":127,"character":54}},"kind":13,"selectionRange":{"start":{"line":127,"character":12},"end":{"line":127,"character":16}},"name":"text"},{"range":{"start":{"line":129,"character":8},"end":{"line":129,"character":27}},"kind":13,"selectionRange":{"start":{"line":129,"character":12},"end":{"line":129,"character":19}},"name":"didFire"},{"range":{"start":{"line":130,"character":8},"end":{"line":130,"character":35}},"kind":13,"selectionRange":{"start":{"line":130,"character":12},"end":{"line":130,"character":26}},"name":"observedString"}]},{"range":{"start":{"line":144,"character":4},"end":{"line":161,"character":5}},"kind":6,"selectionRange":{"start":{"line":144,"character":9},"end":{"line":144,"character":49}},"name":"testObservationMappingChainAfterUnwrap()","children":[{"range":{"start":{"line":146,"character":8},"end":{"line":146,"character":54}},"kind":13,"selectionRange":{"start":{"line":146,"character":12},"end":{"line":146,"character":16}},"name":"text"},{"range":{"start":{"line":148,"character":8},"end":{"line":148,"character":27}},"kind":13,"selectionRange":{"start":{"line":148,"character":12},"end":{"line":148,"character":19}},"name":"didFire"},{"range":{"start":{"line":149,"character":8},"end":{"line":149,"character":31}},"kind":13,"selectionRange":{"start":{"line":149,"character":12},"end":{"line":149,"character":25}},"name":"observedCount"}]},{"range":{"start":{"line":163,"character":4},"end":{"line":183,"character":5}},"kind":6,"selectionRange":{"start":{"line":163,"character":9},"end":{"line":163,"character":39}},"name":"testObservationMappingFilter()","children":[{"range":{"start":{"line":165,"character":8},"end":{"line":165,"character":37}},"kind":13,"selectionRange":{"start":{"line":165,"character":12},"end":{"line":165,"character":20}},"name":"testText"},{"range":{"start":{"line":167,"character":8},"end":{"line":167,"character":27}},"kind":13,"selectionRange":{"start":{"line":167,"character":12},"end":{"line":167,"character":19}},"name":"didFire"},{"range":{"start":{"line":168,"character":8},"end":{"line":168,"character":35}},"kind":13,"selectionRange":{"start":{"line":168,"character":12},"end":{"line":168,"character":26}},"name":"observedString"}]},{"range":{"start":{"line":185,"character":4},"end":{"line":203,"character":5}},"kind":6,"selectionRange":{"start":{"line":185,"character":9},"end":{"line":185,"character":39}},"name":"testObservationMappingSelect()","children":[{"range":{"start":{"line":187,"character":8},"end":{"line":187,"character":33}},"kind":13,"selectionRange":{"start":{"line":187,"character":12},"end":{"line":187,"character":16}},"name":"text"},{"range":{"start":{"line":188,"character":8},"end":{"line":188,"character":47}},"kind":13,"selectionRange":{"start":{"line":188,"character":12},"end":{"line":188,"character":23}},"name":"textMapping"},{"range":{"start":{"line":190,"character":8},"end":{"line":190,"character":27}},"kind":13,"selectionRange":{"start":{"line":190,"character":12},"end":{"line":190,"character":19}},"name":"didFire"}]},{"range":{"start":{"line":205,"character":4},"end":{"line":221,"character":5}},"kind":6,"selectionRange":{"start":{"line":205,"character":9},"end":{"line":205,"character":21}},"name":"testSelect()","children":[{"range":{"start":{"line":207,"character":8},"end":{"line":207,"character":48}},"kind":13,"selectionRange":{"start":{"line":207,"character":12},"end":{"line":207,"character":25}},"name":"textMessenger"},{"range":{"start":{"line":208,"character":8},"end":{"line":208,"character":27}},"kind":13,"selectionRange":{"start":{"line":208,"character":12},"end":{"line":208,"character":19}},"name":"didFire"}]},{"range":{"start":{"line":223,"character":4},"end":{"line":243,"character":5}},"kind":6,"selectionRange":{"start":{"line":223,"character":9},"end":{"line":223,"character":38}},"name":"testSingleObservationFilter()","children":[{"range":{"start":{"line":225,"character":8},"end":{"line":225,"character":34}},"kind":13,"selectionRange":{"start":{"line":225,"character":12},"end":{"line":225,"character":18}},"name":"number"},{"range":{"start":{"line":226,"character":8},"end":{"line":226,"character":58}},"kind":13,"selectionRange":{"start":{"line":226,"character":12},"end":{"line":226,"character":33}},"name":"latestUnwrappedNumber"},{"range":{"start":{"line":228,"character":8},"end":{"line":228,"character":37}},"kind":13,"selectionRange":{"start":{"line":228,"character":12},"end":{"line":228,"character":27}},"name":"observedNumbers"}]},{"range":{"start":{"line":245,"character":4},"end":{"line":245,"character":35}},"kind":7,"selectionRange":{"start":{"line":245,"character":8},"end":{"line":245,"character":18}},"name":"controller","references":[{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":34,"character":8},"end":{"line":34,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":52,"character":8},"end":{"line":52,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":71,"character":8},"end":{"line":71,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":93,"character":8},"end":{"line":93,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":112,"character":8},"end":{"line":112,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":132,"character":8},"end":{"line":132,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":151,"character":8},"end":{"line":151,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":170,"character":8},"end":{"line":170,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":192,"character":8},"end":{"line":192,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":210,"character":8},"end":{"line":210,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":230,"character":8},"end":{"line":230,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}]},{"range":{"start":{"line":247,"character":4},"end":{"line":250,"character":5}},"kind":5,"selectionRange":{"start":{"line":247,"character":10},"end":{"line":247,"character":22}},"name":"TestObserver","references":[{"range":{"start":{"line":245,"character":21},"end":{"line":245,"character":21}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}],"children":[{"range":{"start":{"line":249,"character":8},"end":{"line":249,"character":33}},"kind":7,"selectionRange":{"start":{"line":249,"character":12},"end":{"line":249,"character":20}},"name":"receiver"}]}]}],"code":"import XCTest\nimport SwiftObserver\n\nclass ObservationTransformTests: XCTestCase\n{\n    func testChainingObservationMappers()\n    {\n        var didFire = false\n        \n        let number = Var(42)\n        \n        controller.observe(number).new().map {\n            \"\\($0)\"               // Int -> String\n        }.filter {\n            $0.count > 1          // filter out single digit integers\n        }.map {\n            Int.init($0)          // String -> Int?\n        }.filter {\n            $0 != nil             // filter out nil values\n        }.unwrap(-1) { _ in       // Int? -> Int\n            didFire = true        // process Int\n        }\n        \n        number <- 10\n        \n        XCTAssert(didFire)\n    }\n    \n    func testChainingObservationMappersWithReceive()\n    {\n        var didFire = false\n        \n        let number = Var(42)\n        \n        controller.observe(number).map {\n            $0.new           // Update<Int> -> Int\n        }.receive { _ in\n            didFire = true   // process Int\n        }\n        \n        number <- 10\n        \n        XCTAssert(didFire)\n    }\n    \n    func testObservationMapping()\n    {\n        let testText = Var<String?>()\n        \n        var didFire = false\n        var observedString: String?\n        \n        controller.observe(testText).map({ $0.new })\n        {\n            observedString = $0\n            didFire = true\n        }\n        \n        testText <- \"test\"\n        \n        XCTAssert(didFire)\n        XCTAssertEqual(\"test\", observedString)\n    }\n    \n    func testObservationMappingChained()\n    {\n        let testText = Var<String?>(\"non optional string\")\n        \n        var didFire = false\n        var observedString: String?\n        \n        controller.observe(testText).map {\n            $0.new\n        }.map {\n            $0 ?? \"untitled\"\n        }.receive {\n            observedString = $0\n            didFire = true\n        }\n        \n        testText <- nil\n        \n        XCTAssert(didFire)\n        XCTAssertEqual(\"untitled\", observedString)\n    }\n    \n    func testObservationMappingNew()\n    {\n        let testText = Var<String?>()\n        \n        var didFire = false\n        var observedString: String?\n        \n        controller.observe(testText).new\n            {\n                observedString = $0\n                didFire = true\n        }\n        \n        testText <- \"test\"\n        \n        XCTAssert(didFire)\n        XCTAssertEqual(\"test\", observedString)\n    }\n    \n    func testObservationMappingChainAfterNew()\n    {\n        let testText = Var<String?>()\n        \n        var didFire = false\n        var observedString: String?\n        \n        controller.observe(testText).new().map({ $0 ?? \"\"})\n        {\n            observedString = $0\n            \n            didFire = true\n        }\n        \n        testText <- \"test\"\n        \n        XCTAssert(didFire)\n        XCTAssertEqual(\"test\", observedString)\n    }\n    \n    func testObservationMappingUnwrap()\n    {\n        let text = Var<String?>(\"non optional string\")\n        \n        var didFire = false\n        var observedString: String?\n        \n        controller.observe(text).new().unwrap(\"untitled\")\n        {\n            observedString = $0\n            didFire = true\n        }\n        \n        text <- nil\n        \n        XCTAssert(didFire)\n        XCTAssertEqual(\"untitled\", observedString)\n    }\n    \n    func testObservationMappingChainAfterUnwrap()\n    {\n        let text = Var<String?>(\"non optional string\")\n        \n        var didFire = false\n        var observedCount: Int?\n        \n        controller.observe(text).new().unwrap(\"untitled\").map({ $0.count })\n        {\n            observedCount = $0\n            didFire = true\n        }\n        \n        text <- nil\n        \n        XCTAssert(didFire)\n        XCTAssertEqual(\"untitled\".count, observedCount)\n    }\n    \n    func testObservationMappingFilter()\n    {\n        let testText = Var<String?>()\n        \n        var didFire = false\n        var observedString: String?\n        \n        controller.observe(testText).filter({ $0.old != nil })\n        {\n            observedString = $0.new\n            didFire = true\n        }\n        \n        testText <- \"test\"\n        XCTAssert(!didFire)\n        XCTAssertNil(observedString)\n        \n        testText <- \"test2\"\n        XCTAssert(didFire)\n        XCTAssertEqual(\"test2\", observedString)\n    }\n    \n    func testObservationMappingSelect()\n    {\n        let text = Var<String?>()\n        let textMapping = text.new().unwrap(\"\")\n        \n        var didFire = false\n        \n        controller.observe(textMapping).select(\"test\")\n        {\n            didFire = true\n        }\n        \n        text <- \"test\"\n        XCTAssert(didFire)\n        \n        didFire = false\n        text <- \"test2\"\n        XCTAssert(!didFire)\n    }\n    \n    func testSelect()\n    {\n        let textMessenger = Var<String?>().new()\n        var didFire = false\n        \n        controller.observe(textMessenger).select(\"right message\")\n        {\n            didFire = true\n        }\n        \n        textMessenger.send(\"right message\")\n        XCTAssert(didFire)\n        \n        didFire = false\n        textMessenger.send(\"wrong message\")\n        XCTAssert(!didFire)\n    }\n    \n    func testSingleObservationFilter()\n    {\n        let number = Var<Int?>(99)\n        let latestUnwrappedNumber = number.new().unwrap(0)\n        \n        var observedNumbers = [Int]()\n        \n        controller.observe(latestUnwrappedNumber).filter({ $0 > 9 })\n        {\n            observedNumbers.append($0)\n        }\n        \n        number <- 10\n        number <- nil\n        number <- 11\n        number <- 1\n        number <- 12\n        number <- 2\n        \n        XCTAssertEqual(observedNumbers, [10, 11, 12])\n    }\n    \n    let controller = TestObserver()\n    \n    class TestObserver: Observer\n    {\n        let receiver = Receiver()\n    }\n}\n"},{"name":"VariableTests.swift","symbols":[{"range":{"start":{"line":3,"character":0},"end":{"line":157,"character":1}},"kind":5,"selectionRange":{"start":{"line":3,"character":6},"end":{"line":3,"character":19}},"name":"VariableTests","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":24,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":43}},"name":"testObservingVariableValueChange()","children":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":43}},"kind":13,"selectionRange":{"start":{"line":7,"character":12},"end":{"line":7,"character":16}},"name":"text"},{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":37}},"kind":13,"selectionRange":{"start":{"line":9,"character":12},"end":{"line":9,"character":28}},"name":"observedNewValue"},{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":37}},"kind":13,"selectionRange":{"start":{"line":10,"character":12},"end":{"line":10,"character":28}},"name":"observedOldValue"},{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":37}},"kind":13,"selectionRange":{"start":{"line":12,"character":12},"end":{"line":12,"character":20}},"name":"observer"}]},{"range":{"start":{"line":26,"character":4},"end":{"line":49,"character":5}},"kind":6,"selectionRange":{"start":{"line":26,"character":9},"end":{"line":26,"character":28}},"name":"testOptionalValue()","children":[{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":48}},"kind":13,"selectionRange":{"start":{"line":28,"character":12},"end":{"line":28,"character":16}},"name":"text"},{"range":{"start":{"line":34,"character":8},"end":{"line":34,"character":29}},"kind":13,"selectionRange":{"start":{"line":34,"character":12},"end":{"line":34,"character":21}},"name":"didUpdate"},{"range":{"start":{"line":36,"character":8},"end":{"line":36,"character":37}},"kind":13,"selectionRange":{"start":{"line":36,"character":12},"end":{"line":36,"character":20}},"name":"observer"}]},{"range":{"start":{"line":51,"character":4},"end":{"line":76,"character":5}},"kind":6,"selectionRange":{"start":{"line":51,"character":9},"end":{"line":51,"character":32}},"name":"testVariableIsCodable()","children":[{"range":{"start":{"line":53,"character":8},"end":{"line":53,"character":29}},"kind":13,"selectionRange":{"start":{"line":53,"character":12},"end":{"line":53,"character":21}},"name":"didEncode"},{"range":{"start":{"line":54,"character":8},"end":{"line":54,"character":29}},"kind":13,"selectionRange":{"start":{"line":54,"character":12},"end":{"line":54,"character":21}},"name":"didDecode"},{"range":{"start":{"line":56,"character":8},"end":{"line":56,"character":31}},"kind":13,"selectionRange":{"start":{"line":56,"character":12},"end":{"line":56,"character":20}},"name":"variable"},{"range":{"start":{"line":58,"character":15},"end":{"line":58,"character":27}},"kind":13,"selectionRange":{"start":{"line":58,"character":15},"end":{"line":58,"character":27}},"name":"variableData"},{"range":{"start":{"line":60,"character":12},"end":{"line":60,"character":78}},"kind":13,"selectionRange":{"start":{"line":60,"character":16},"end":{"line":60,"character":22}},"name":"actual"},{"range":{"start":{"line":61,"character":12},"end":{"line":61,"character":50}},"kind":13,"selectionRange":{"start":{"line":61,"character":16},"end":{"line":61,"character":24}},"name":"expected"},{"range":{"start":{"line":66,"character":19},"end":{"line":66,"character":34}},"kind":13,"selectionRange":{"start":{"line":66,"character":19},"end":{"line":66,"character":34}},"name":"decodedVariable"}]},{"range":{"start":{"line":78,"character":4},"end":{"line":113,"character":5}},"kind":6,"selectionRange":{"start":{"line":78,"character":9},"end":{"line":78,"character":62}},"name":"testCustomObservableWithVariablePropertiesIsCodable()","children":[{"range":{"start":{"line":80,"character":8},"end":{"line":84,"character":9}},"kind":5,"selectionRange":{"start":{"line":80,"character":14},"end":{"line":80,"character":26}},"name":"CodableModel","children":[{"range":{"start":{"line":82,"character":25},"end":{"line":82,"character":50}},"kind":7,"selectionRange":{"start":{"line":82,"character":29},"end":{"line":82,"character":33}},"name":"text"},{"range":{"start":{"line":83,"character":25},"end":{"line":83,"character":49}},"kind":7,"selectionRange":{"start":{"line":83,"character":29},"end":{"line":83,"character":35}},"name":"number"}]},{"range":{"start":{"line":86,"character":8},"end":{"line":86,"character":34}},"kind":13,"selectionRange":{"start":{"line":86,"character":12},"end":{"line":86,"character":17}},"name":"model"},{"range":{"start":{"line":88,"character":8},"end":{"line":88,"character":29}},"kind":13,"selectionRange":{"start":{"line":88,"character":12},"end":{"line":88,"character":21}},"name":"didEncode"},{"range":{"start":{"line":89,"character":8},"end":{"line":89,"character":29}},"kind":13,"selectionRange":{"start":{"line":89,"character":12},"end":{"line":89,"character":21}},"name":"didDecode"},{"range":{"start":{"line":94,"character":15},"end":{"line":94,"character":24}},"kind":13,"selectionRange":{"start":{"line":94,"character":15},"end":{"line":94,"character":24}},"name":"modelJson"},{"range":{"start":{"line":96,"character":12},"end":{"line":96,"character":75}},"kind":13,"selectionRange":{"start":{"line":96,"character":16},"end":{"line":96,"character":22}},"name":"actual"},{"range":{"start":{"line":97,"character":12},"end":{"line":97,"character":98}},"kind":13,"selectionRange":{"start":{"line":97,"character":16},"end":{"line":97,"character":24}},"name":"expected"},{"range":{"start":{"line":102,"character":19},"end":{"line":102,"character":31}},"kind":13,"selectionRange":{"start":{"line":102,"character":19},"end":{"line":102,"character":31}},"name":"decodedModel"}]},{"range":{"start":{"line":115,"character":4},"end":{"line":134,"character":5}},"kind":6,"selectionRange":{"start":{"line":115,"character":9},"end":{"line":115,"character":30}},"name":"testPropertyWrapper()","children":[{"range":{"start":{"line":117,"character":20},"end":{"line":117,"character":50}},"kind":13,"selectionRange":{"start":{"line":117,"character":24},"end":{"line":117,"character":28}},"name":"text"},{"range":{"start":{"line":119,"character":8},"end":{"line":119,"character":37}},"kind":13,"selectionRange":{"start":{"line":119,"character":12},"end":{"line":119,"character":28}},"name":"observedNewValue"},{"range":{"start":{"line":120,"character":8},"end":{"line":120,"character":37}},"kind":13,"selectionRange":{"start":{"line":120,"character":12},"end":{"line":120,"character":28}},"name":"observedOldValue"},{"range":{"start":{"line":122,"character":8},"end":{"line":122,"character":37}},"kind":13,"selectionRange":{"start":{"line":122,"character":12},"end":{"line":122,"character":20}},"name":"observer"}]},{"range":{"start":{"line":136,"character":4},"end":{"line":151,"character":5}},"kind":6,"selectionRange":{"start":{"line":136,"character":9},"end":{"line":136,"character":29}},"name":"testSendOnVariable()","children":[{"range":{"start":{"line":138,"character":8},"end":{"line":138,"character":40}},"kind":13,"selectionRange":{"start":{"line":138,"character":12},"end":{"line":138,"character":23}},"name":"initialText"},{"range":{"start":{"line":140,"character":8},"end":{"line":140,"character":35}},"kind":13,"selectionRange":{"start":{"line":140,"character":12},"end":{"line":140,"character":16}},"name":"text"},{"range":{"start":{"line":142,"character":8},"end":{"line":142,"character":33}},"kind":13,"selectionRange":{"start":{"line":142,"character":12},"end":{"line":142,"character":24}},"name":"observedText"},{"range":{"start":{"line":144,"character":8},"end":{"line":144,"character":37}},"kind":13,"selectionRange":{"start":{"line":144,"character":12},"end":{"line":144,"character":20}},"name":"observer"}]},{"range":{"start":{"line":153,"character":4},"end":{"line":156,"character":5}},"kind":5,"selectionRange":{"start":{"line":153,"character":10},"end":{"line":153,"character":22}},"name":"TestObserver","references":[{"range":{"start":{"line":12,"character":23},"end":{"line":12,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":36,"character":23},"end":{"line":36,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":122,"character":23},"end":{"line":122,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":144,"character":23},"end":{"line":144,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"}],"children":[{"range":{"start":{"line":155,"character":8},"end":{"line":155,"character":33}},"kind":7,"selectionRange":{"start":{"line":155,"character":12},"end":{"line":155,"character":20}},"name":"receiver"}]}]}],"code":"import XCTest\nimport SwiftObserver\n\nclass VariableTests: XCTestCase\n{\n    func testObservingVariableValueChange()\n    {\n        let text = Var<String?>(\"old text\")\n        \n        var observedNewValue: String?\n        var observedOldValue: String?\n        \n        let observer = TestObserver()\n        \n        observer.observe(text)\n        {\n            observedOldValue = $0.old\n            observedNewValue = $0.new\n        }\n        \n        text <- \"new text\"\n        \n        XCTAssertEqual(observedOldValue, \"old text\")\n        XCTAssertEqual(observedNewValue, \"new text\")\n    }\n    \n    func testOptionalValue()\n    {\n        let text = Var<String?>(\"initial value\")\n        \n        text <- nil\n        \n        XCTAssertNil(text.value)\n        \n        var didUpdate = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(text)\n        {\n            XCTAssertEqual($0.new, \"text\")\n            \n            didUpdate = true\n        }\n        \n        text <- \"text\"\n        \n        XCTAssertEqual(text.value, \"text\")\n        XCTAssert(didUpdate)\n    }\n    \n    func testVariableIsCodable()\n    {\n        var didEncode = false\n        var didDecode = false\n        \n        let variable = Var(123)\n        \n        if let variableData = try? JSONEncoder().encode(variable)\n        {\n            let actual = String(data: variableData, encoding: .utf8) ?? \"fail\"\n            let expected = \"{\\\"storedValue\\\":123}\"\n            XCTAssertEqual(actual, expected)\n            \n            didEncode = true\n            \n            if let decodedVariable = try? JSONDecoder().decode(Var<Int>.self,\n                                                               from: variableData)\n            {\n                XCTAssertEqual(decodedVariable.value, 123)\n                didDecode = true\n            }\n        }\n        \n        XCTAssert(didEncode)\n        XCTAssert(didDecode)\n    }\n    \n    func testCustomObservableWithVariablePropertiesIsCodable()\n    {\n        class CodableModel: Codable\n        {\n            private(set) var text = Var<String?>()\n            private(set) var number = Var<Int?>()\n        }\n        \n        let model = CodableModel()\n        \n        var didEncode = false\n        var didDecode = false\n        \n        model.text <- \"123\"\n        model.number <- 123\n        \n        if let modelJson = try? JSONEncoder().encode(model)\n        {\n            let actual = String(data: modelJson, encoding: .utf8) ?? \"fail\"\n            let expected = \"{\\\"number\\\":{\\\"storedValue\\\":123},\\\"text\\\":{\\\"storedValue\\\":\\\"123\\\"}}\"\n            XCTAssertEqual(actual, expected)\n            \n            didEncode = true\n            \n            if let decodedModel = try? JSONDecoder().decode(CodableModel.self,\n                                                            from: modelJson)\n            {\n                XCTAssertEqual(decodedModel.text.value, \"123\")\n                XCTAssertEqual(decodedModel.number.value, 123)\n                didDecode = true\n            }\n        }\n        \n        XCTAssert(didEncode)\n        XCTAssert(didDecode)\n    }\n    \n    func testPropertyWrapper()\n    {\n        @Observable var text: String? = \"old text\"\n        \n        var observedNewValue: String?\n        var observedOldValue: String?\n        \n        let observer = TestObserver()\n        \n        observer.observe($text)\n        {\n            observedOldValue = $0.old\n            observedNewValue = $0.new\n        }\n        \n        text = \"new text\"\n        \n        XCTAssertEqual(observedOldValue, \"old text\")\n        XCTAssertEqual(observedNewValue, \"new text\")\n    }\n    \n    func testSendOnVariable()\n    {\n        let initialText = \"initial text\"\n        \n        let text = Var(initialText)\n        \n        var observedText: String?\n        \n        let observer = TestObserver()\n        \n        observer.observe(text) { observedText = $0.new }\n        \n        text.send()\n        \n        XCTAssertEqual(observedText, initialText)\n    }\n    \n    class TestObserver: Observer\n    {\n        let receiver = Receiver()\n    }\n}\n"},{"name":"ObservableTransformTests.swift","symbols":[{"range":{"start":{"line":4,"character":0},"end":{"line":261,"character":1}},"kind":5,"selectionRange":{"start":{"line":4,"character":6},"end":{"line":4,"character":30}},"name":"ObservableTransformTests","children":[{"range":{"start":{"line":6,"character":13},"end":{"line":15,"character":5}},"kind":6,"selectionRange":{"start":{"line":6,"character":18},"end":{"line":6,"character":25}},"name":"setUp()"},{"range":{"start":{"line":17,"character":4},"end":{"line":21,"character":5}},"kind":6,"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":74}},"name":"testCacheLatestMessageIsOptionalOnObservableWithOptionalMessage()","children":[{"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":45}},"kind":13,"selectionRange":{"start":{"line":19,"character":12},"end":{"line":19,"character":17}},"name":"cache"}]},{"range":{"start":{"line":23,"character":4},"end":{"line":27,"character":5}},"kind":6,"selectionRange":{"start":{"line":23,"character":9},"end":{"line":23,"character":77}},"name":"testCacheLatestMessageIsOptionalOnObservableWithNonOptionalMessage()","children":[{"range":{"start":{"line":25,"character":8},"end":{"line":25,"character":44}},"kind":13,"selectionRange":{"start":{"line":25,"character":12},"end":{"line":25,"character":17}},"name":"cache"}]},{"range":{"start":{"line":29,"character":4},"end":{"line":35,"character":5}},"kind":6,"selectionRange":{"start":{"line":29,"character":9},"end":{"line":29,"character":71}},"name":"testLogWarningWhenApplyingCacheToCacheWithNonOptionalMessage()","children":[{"range":{"start":{"line":31,"character":8},"end":{"line":31,"character":39}},"kind":13,"selectionRange":{"start":{"line":31,"character":12},"end":{"line":31,"character":25}},"name":"alreadyACache"},{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":94}},"kind":13,"selectionRange":{"start":{"line":32,"character":12},"end":{"line":32,"character":27}},"name":"expectedWarning"}]},{"range":{"start":{"line":37,"character":4},"end":{"line":45,"character":5}},"kind":6,"selectionRange":{"start":{"line":37,"character":9},"end":{"line":37,"character":68}},"name":"testLogWarningWhenApplyingCacheToCacheWithOptionalMessage()","children":[{"range":{"start":{"line":40,"character":8},"end":{"line":40,"character":52}},"kind":13,"selectionRange":{"start":{"line":40,"character":12},"end":{"line":40,"character":25}},"name":"alreadyACache"},{"range":{"start":{"line":42,"character":8},"end":{"line":42,"character":93}},"kind":13,"selectionRange":{"start":{"line":42,"character":12},"end":{"line":42,"character":27}},"name":"expectedWarning"}]},{"range":{"start":{"line":47,"character":4},"end":{"line":94,"character":5}},"kind":6,"selectionRange":{"start":{"line":47,"character":9},"end":{"line":47,"character":41}},"name":"testReplacingOriginOfTransform()","children":[{"range":{"start":{"line":49,"character":8},"end":{"line":49,"character":35}},"kind":13,"selectionRange":{"start":{"line":49,"character":12},"end":{"line":49,"character":20}},"name":"original"},{"range":{"start":{"line":51,"character":8},"end":{"line":51,"character":63}},"kind":13,"selectionRange":{"start":{"line":51,"character":12},"end":{"line":51,"character":21}},"name":"transform"},{"range":{"start":{"line":53,"character":8},"end":{"line":53,"character":37}},"kind":13,"selectionRange":{"start":{"line":53,"character":12},"end":{"line":53,"character":20}},"name":"observer"},{"range":{"start":{"line":55,"character":8},"end":{"line":55,"character":49}},"kind":13,"selectionRange":{"start":{"line":55,"character":12},"end":{"line":55,"character":34}},"name":"lastUpdateFromOriginal"},{"range":{"start":{"line":62,"character":8},"end":{"line":62,"character":44}},"kind":13,"selectionRange":{"start":{"line":62,"character":12},"end":{"line":62,"character":35}},"name":"lastUpdateFromTransform"},{"range":{"start":{"line":80,"character":8},"end":{"line":80,"character":39}},"kind":13,"selectionRange":{"start":{"line":80,"character":12},"end":{"line":80,"character":23}},"name":"replacement"}]},{"range":{"start":{"line":96,"character":4},"end":{"line":101,"character":5}},"kind":6,"selectionRange":{"start":{"line":96,"character":9},"end":{"line":96,"character":43}},"name":"testThatMappersOfCachesAreCaches()"},{"range":{"start":{"line":103,"character":4},"end":{"line":123,"character":5}},"kind":6,"selectionRange":{"start":{"line":103,"character":9},"end":{"line":103,"character":28}},"name":"testMappingSelect()","children":[{"range":{"start":{"line":105,"character":8},"end":{"line":105,"character":33}},"kind":13,"selectionRange":{"start":{"line":105,"character":12},"end":{"line":105,"character":16}},"name":"text"},{"range":{"start":{"line":106,"character":8},"end":{"line":106,"character":62}},"kind":13,"selectionRange":{"start":{"line":106,"character":12},"end":{"line":106,"character":23}},"name":"textMapping"},{"range":{"start":{"line":108,"character":8},"end":{"line":108,"character":27}},"kind":13,"selectionRange":{"start":{"line":108,"character":12},"end":{"line":108,"character":19}},"name":"didFire"},{"range":{"start":{"line":110,"character":8},"end":{"line":110,"character":37}},"kind":13,"selectionRange":{"start":{"line":110,"character":12},"end":{"line":110,"character":20}},"name":"observer"}]},{"range":{"start":{"line":125,"character":4},"end":{"line":147,"character":5}},"kind":6,"selectionRange":{"start":{"line":125,"character":9},"end":{"line":125,"character":38}},"name":"testMappingsIncludingFilter()","children":[{"range":{"start":{"line":127,"character":8},"end":{"line":127,"character":34}},"kind":13,"selectionRange":{"start":{"line":127,"character":12},"end":{"line":127,"character":18}},"name":"number"},{"range":{"start":{"line":128,"character":8},"end":{"line":128,"character":67}},"kind":13,"selectionRange":{"start":{"line":128,"character":12},"end":{"line":128,"character":24}},"name":"doubleDigits"},{"range":{"start":{"line":130,"character":8},"end":{"line":130,"character":37}},"kind":13,"selectionRange":{"start":{"line":130,"character":12},"end":{"line":130,"character":27}},"name":"observedNumbers"},{"range":{"start":{"line":132,"character":8},"end":{"line":132,"character":37}},"kind":13,"selectionRange":{"start":{"line":132,"character":12},"end":{"line":132,"character":20}},"name":"observer"}]},{"range":{"start":{"line":149,"character":4},"end":{"line":169,"character":5}},"kind":6,"selectionRange":{"start":{"line":149,"character":9},"end":{"line":149,"character":37}},"name":"testFilterSupressesMessage()","children":[{"range":{"start":{"line":151,"character":8},"end":{"line":151,"character":41}},"kind":13,"selectionRange":{"start":{"line":151,"character":12},"end":{"line":151,"character":21}},"name":"messenger"},{"range":{"start":{"line":152,"character":8},"end":{"line":152,"character":55}},"kind":13,"selectionRange":{"start":{"line":152,"character":12},"end":{"line":152,"character":21}},"name":"transform"},{"range":{"start":{"line":154,"character":8},"end":{"line":154,"character":38}},"kind":13,"selectionRange":{"start":{"line":154,"character":12},"end":{"line":154,"character":26}},"name":"observedNumber"},{"range":{"start":{"line":156,"character":8},"end":{"line":156,"character":37}},"kind":13,"selectionRange":{"start":{"line":156,"character":12},"end":{"line":156,"character":20}},"name":"observer"}]},{"range":{"start":{"line":171,"character":4},"end":{"line":187,"character":5}},"kind":6,"selectionRange":{"start":{"line":171,"character":9},"end":{"line":171,"character":40}},"name":"testObservableTransformObject()","children":[{"range":{"start":{"line":173,"character":8},"end":{"line":173,"character":48}},"kind":13,"selectionRange":{"start":{"line":173,"character":12},"end":{"line":173,"character":25}},"name":"textMessenger"},{"range":{"start":{"line":174,"character":8},"end":{"line":174,"character":36}},"kind":13,"selectionRange":{"start":{"line":174,"character":12},"end":{"line":174,"character":27}},"name":"receivedMessage"},{"range":{"start":{"line":175,"character":8},"end":{"line":175,"character":39}},"kind":13,"selectionRange":{"start":{"line":175,"character":12},"end":{"line":175,"character":27}},"name":"expectedMessage"},{"range":{"start":{"line":177,"character":8},"end":{"line":177,"character":37}},"kind":13,"selectionRange":{"start":{"line":177,"character":12},"end":{"line":177,"character":20}},"name":"observer"}]},{"range":{"start":{"line":189,"character":4},"end":{"line":209,"character":5}},"kind":6,"selectionRange":{"start":{"line":189,"character":9},"end":{"line":189,"character":34}},"name":"testObservableMapObject()","children":[{"range":{"start":{"line":191,"character":8},"end":{"line":191,"character":33}},"kind":13,"selectionRange":{"start":{"line":191,"character":12},"end":{"line":191,"character":16}},"name":"text"},{"range":{"start":{"line":193,"character":8},"end":{"line":193,"character":55}},"kind":13,"selectionRange":{"start":{"line":193,"character":12},"end":{"line":193,"character":27}},"name":"nonOptionalText"},{"range":{"start":{"line":195,"character":8},"end":{"line":195,"character":29}},"kind":13,"selectionRange":{"start":{"line":195,"character":12},"end":{"line":195,"character":21}},"name":"didUpdate"},{"range":{"start":{"line":197,"character":8},"end":{"line":197,"character":37}},"kind":13,"selectionRange":{"start":{"line":197,"character":12},"end":{"line":197,"character":20}},"name":"observer"}]},{"range":{"start":{"line":211,"character":4},"end":{"line":229,"character":5}},"kind":6,"selectionRange":{"start":{"line":211,"character":9},"end":{"line":211,"character":43}},"name":"testObservableNewAndUnwrapObject()","children":[{"range":{"start":{"line":213,"character":8},"end":{"line":213,"character":33}},"kind":13,"selectionRange":{"start":{"line":213,"character":12},"end":{"line":213,"character":16}},"name":"text"},{"range":{"start":{"line":214,"character":8},"end":{"line":214,"character":49}},"kind":13,"selectionRange":{"start":{"line":214,"character":12},"end":{"line":214,"character":25}},"name":"unwrappedText"},{"range":{"start":{"line":216,"character":8},"end":{"line":216,"character":29}},"kind":13,"selectionRange":{"start":{"line":216,"character":12},"end":{"line":216,"character":21}},"name":"didUpdate"},{"range":{"start":{"line":218,"character":8},"end":{"line":218,"character":37}},"kind":13,"selectionRange":{"start":{"line":218,"character":12},"end":{"line":218,"character":20}},"name":"observer"}]},{"range":{"start":{"line":231,"character":4},"end":{"line":239,"character":5}},"kind":6,"selectionRange":{"start":{"line":231,"character":9},"end":{"line":231,"character":36}},"name":"testWeakObservableWrapper()","children":[{"range":{"start":{"line":233,"character":8},"end":{"line":233,"character":39}},"kind":13,"selectionRange":{"start":{"line":233,"character":12},"end":{"line":233,"character":23}},"name":"weakNumber1"},{"range":{"start":{"line":236,"character":8},"end":{"line":236,"character":33}},"kind":13,"selectionRange":{"start":{"line":236,"character":12},"end":{"line":236,"character":24}},"name":"strongNumber"},{"range":{"start":{"line":237,"character":8},"end":{"line":237,"character":45}},"kind":13,"selectionRange":{"start":{"line":237,"character":12},"end":{"line":237,"character":23}},"name":"weakNumber2"}]},{"range":{"start":{"line":241,"character":4},"end":{"line":252,"character":5}},"kind":6,"selectionRange":{"start":{"line":241,"character":9},"end":{"line":241,"character":29}},"name":"testWeakObservable()","children":[{"range":{"start":{"line":243,"character":8},"end":{"line":243,"character":49}},"kind":13,"selectionRange":{"start":{"line":243,"character":12},"end":{"line":243,"character":28}},"name":"strongObservable"},{"range":{"start":{"line":245,"character":8},"end":{"line":245,"character":53}},"kind":13,"selectionRange":{"start":{"line":245,"character":12},"end":{"line":245,"character":26}},"name":"weakObservable"}]},{"range":{"start":{"line":254,"character":4},"end":{"line":254,"character":63}},"kind":6,"selectionRange":{"start":{"line":254,"character":9},"end":{"line":254,"character":36}},"name":"receive(_:)"},{"range":{"start":{"line":255,"character":12},"end":{"line":255,"character":42}},"kind":7,"selectionRange":{"start":{"line":255,"character":16},"end":{"line":255,"character":30}},"name":"latestLogEntry","references":[{"range":{"start":{"line":13,"character":17},"end":{"line":13,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":34,"character":18},"end":{"line":34,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":39,"character":8},"end":{"line":39,"character":8}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":41,"character":21},"end":{"line":41,"character":21}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":44,"character":18},"end":{"line":44,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":254,"character":39},"end":{"line":254,"character":39}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}]},{"range":{"start":{"line":257,"character":4},"end":{"line":260,"character":5}},"kind":5,"selectionRange":{"start":{"line":257,"character":10},"end":{"line":257,"character":22}},"name":"TestObserver","references":[{"range":{"start":{"line":53,"character":23},"end":{"line":53,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":110,"character":23},"end":{"line":110,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":132,"character":23},"end":{"line":132,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":156,"character":23},"end":{"line":156,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":177,"character":23},"end":{"line":177,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":197,"character":23},"end":{"line":197,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":218,"character":23},"end":{"line":218,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":259,"character":8},"end":{"line":259,"character":33}},"kind":7,"selectionRange":{"start":{"line":259,"character":12},"end":{"line":259,"character":20}},"name":"receiver"}]}]}],"code":"import XCTest\n@testable import SwiftObserver\nimport SwiftyToolz\n\nclass ObservableTransformTests: XCTestCase\n{\n    override func setUp()\n    {\n        super.setUp()\n        Log.shared.minimumPrintLevel = .error\n        \n        Log.shared.add(observer: self)\n        {\n            self.latestLogEntry = $0\n        }\n    }\n    \n    func testCacheLatestMessageIsOptionalOnObservableWithOptionalMessage()\n    {\n        let cache = Messenger<Int?>().cache()\n        XCTAssert(type(of: cache.latestMessage) == Int?.self)\n    }\n    \n    func testCacheLatestMessageIsOptionalOnObservableWithNonOptionalMessage()\n    {\n        let cache = Messenger<Int>().cache()\n        XCTAssert(type(of: cache.latestMessage) == Int?.self)\n    }\n    \n    func testLogWarningWhenApplyingCacheToCacheWithNonOptionalMessage()\n    {\n        let alreadyACache = Var<Int?>()\n        let expectedWarning = alreadyACache.warningWhenApplyingCache(messageIsOptional: false)\n        _ = alreadyACache.cache()\n        XCTAssert(latestLogEntry?.message.contains(expectedWarning) ?? false)\n    }\n    \n    func testLogWarningWhenApplyingCacheToCacheWithOptionalMessage()\n    {\n        latestLogEntry = nil\n        let alreadyACache = Messenger<Int>().cache()\n        XCTAssertNil(latestLogEntry)\n        let expectedWarning = alreadyACache.warningWhenApplyingCache(messageIsOptional: true)\n        _ = alreadyACache.cache()\n        XCTAssert(latestLogEntry?.message.contains(expectedWarning) ?? false)\n    }\n    \n    func testReplacingOriginOfTransform()\n    {\n        let original = Var<Int?>(1)\n        \n        let transform = original.new().unwrap().map { \"\\($0)\" }\n        \n        let observer = TestObserver()\n        \n        var lastUpdateFromOriginal: Update<Int?>?\n        \n        observer.observe(original)\n        {\n            lastUpdateFromOriginal = $0\n        }\n        \n        var lastUpdateFromTransform: String?\n        \n        observer.observe(transform)\n        {\n            lastUpdateFromTransform = $0\n        }\n        \n        XCTAssertNil(lastUpdateFromOriginal)\n        XCTAssertNil(lastUpdateFromTransform)\n        \n        original.send()\n        \n        XCTAssertEqual(lastUpdateFromOriginal?.new, 1)\n        XCTAssertEqual(lastUpdateFromTransform, \"1\")\n        \n        lastUpdateFromOriginal = nil\n        lastUpdateFromTransform = nil\n        \n        let replacement = Var<Int?>(42)\n        transform.origin.origin.origin = replacement\n        \n        XCTAssertNil(lastUpdateFromOriginal)\n        XCTAssertNil(lastUpdateFromTransform)\n        \n        original.send()\n        \n        XCTAssertEqual(lastUpdateFromOriginal?.new, 1)\n        XCTAssertNil(lastUpdateFromTransform)\n        \n        replacement.send()\n        \n        XCTAssertEqual(lastUpdateFromTransform, \"42\")\n    }\n    \n    func testThatMappersOfCachesAreCaches()\n    {\n        XCTAssertEqual(Var(1).new().latestMessage, 1)\n        XCTAssertEqual(Var<Int?>().new().unwrap(23).latestMessage, 23)\n        XCTAssertEqual(Var(5).map({ $0.new == 5 }).latestMessage, true)\n    }\n    \n    func testMappingSelect()\n    {\n        let text = Var<String?>()\n        let textMapping = text.new().unwrap(\"\").select(\"test\")\n        \n        var didFire = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(textMapping)\n        {\n            didFire = true\n        }\n        \n        text <- \"test\"\n        XCTAssert(didFire)\n        \n        didFire = false\n        text <- \"test2\"\n        XCTAssert(!didFire)\n    }\n    \n    func testMappingsIncludingFilter()\n    {\n        let number = Var<Int?>(99)\n        let doubleDigits = number.new().unwrap(0).filter { $0 > 9 }\n        \n        var observedNumbers = [Int]()\n        \n        let observer = TestObserver()\n        \n        observer.observe(doubleDigits)\n        {\n            observedNumbers.append($0)\n        }\n        \n        number <- 10\n        number <- nil\n        number <- 11\n        number <- 1\n        number <- 12\n        number <- 2\n        \n        XCTAssertEqual(observedNumbers, [10, 11, 12])\n    }\n    \n    func testFilterSupressesMessage()\n    {\n        let messenger = Messenger<Int?>()\n        let transform = Filter(messenger) { $0 != nil }\n        \n        var observedNumber: Int? = nil\n        \n        let observer = TestObserver()\n        \n        observer.observe(transform)\n        {\n            observedNumber = $0\n            XCTAssertNotNil($0)\n        }\n        \n        messenger.send(3)\n        XCTAssertEqual(observedNumber, 3)\n\n        messenger.send(nil)\n        XCTAssertEqual(observedNumber, 3)\n    }\n    \n    func testObservableTransformObject()\n    {\n        let textMessenger = Var<String?>().new()\n        var receivedMessage: String?\n        let expectedMessage = \"message\"\n        \n        let observer = TestObserver()\n        \n        observer.observe(textMessenger)\n        {\n            receivedMessage = $0\n        }\n        \n        textMessenger.send(expectedMessage)\n        \n        XCTAssertEqual(receivedMessage, expectedMessage)\n    }\n    \n    func testObservableMapObject()\n    {\n        let text = Var<String?>()\n        \n        let nonOptionalText = text.map { $0.new ?? \"\" }\n        \n        var didUpdate = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(nonOptionalText)\n        {\n            XCTAssertEqual($0, \"\")\n            \n            didUpdate = true\n        }\n        \n        text.send()\n        \n        XCTAssert(didUpdate)\n    }\n    \n    func testObservableNewAndUnwrapObject()\n    {\n        let text = Var<String?>()\n        let unwrappedText = text.new().unwrap(\"\")\n        \n        var didUpdate = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(unwrappedText)\n        {\n            XCTAssertEqual($0, \"\")\n            didUpdate = true\n        }\n        \n        text.send()\n        \n        XCTAssert(didUpdate)\n    }\n    \n    func testWeakObservableWrapper()\n    {\n        let weakNumber1 = Var(1).weak()\n        XCTAssertNil(weakNumber1.origin)\n        \n        let strongNumber = Var(2)\n        let weakNumber2 = strongNumber.weak()\n        XCTAssertEqual(weakNumber2.origin?.value, 2)\n    }\n    \n    func testWeakObservable()\n    {\n        var strongObservable: Var<Int>? = Var(10)\n        \n        let weakObservable = strongObservable!.weak()\n        \n        XCTAssert(strongObservable === weakObservable.origin)\n        \n        strongObservable = nil\n        \n        XCTAssertNil(weakObservable.origin)\n    }\n    \n    func receive(_ entry: Log.Entry) { latestLogEntry = entry }\n    private var latestLogEntry: Log.Entry?\n    \n    class TestObserver: Observer\n    {\n        let receiver = Receiver()\n    }\n}\n"},{"name":"BasicTests.swift","symbols":[{"range":{"start":{"line":3,"character":0},"end":{"line":103,"character":1}},"kind":5,"selectionRange":{"start":{"line":3,"character":6},"end":{"line":3,"character":16}},"name":"BasicTests","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":18,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":27}},"name":"testObserverving()","children":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":40}},"kind":13,"selectionRange":{"start":{"line":7,"character":12},"end":{"line":7,"character":21}},"name":"messenger"},{"range":{"start":{"line":8,"character":8},"end":{"line":8,"character":37}},"kind":13,"selectionRange":{"start":{"line":8,"character":12},"end":{"line":8,"character":20}},"name":"observer"},{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":32}},"kind":13,"selectionRange":{"start":{"line":9,"character":12},"end":{"line":9,"character":26}},"name":"receivedNumber"}]},{"range":{"start":{"line":20,"character":4},"end":{"line":34,"character":5}},"kind":6,"selectionRange":{"start":{"line":20,"character":9},"end":{"line":20,"character":48}},"name":"testObservingAloneDoesNotSendAMessage()","children":[{"range":{"start":{"line":22,"character":8},"end":{"line":22,"character":41}},"kind":13,"selectionRange":{"start":{"line":22,"character":12},"end":{"line":22,"character":21}},"name":"messenger"},{"range":{"start":{"line":24,"character":8},"end":{"line":24,"character":36}},"kind":13,"selectionRange":{"start":{"line":24,"character":12},"end":{"line":24,"character":28}},"name":"didTriggerUpdate"},{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":37}},"kind":13,"selectionRange":{"start":{"line":26,"character":12},"end":{"line":26,"character":20}},"name":"observer"}]},{"range":{"start":{"line":36,"character":4},"end":{"line":61,"character":5}},"kind":6,"selectionRange":{"start":{"line":36,"character":9},"end":{"line":36,"character":38}},"name":"testMaintainingMessageOrder()","children":[{"range":{"start":{"line":38,"character":8},"end":{"line":38,"character":40}},"kind":13,"selectionRange":{"start":{"line":38,"character":12},"end":{"line":38,"character":21}},"name":"messenger"},{"range":{"start":{"line":39,"character":8},"end":{"line":39,"character":38}},"kind":13,"selectionRange":{"start":{"line":39,"character":12},"end":{"line":39,"character":21}},"name":"observer1"},{"range":{"start":{"line":40,"character":8},"end":{"line":40,"character":38}},"kind":13,"selectionRange":{"start":{"line":40,"character":12},"end":{"line":40,"character":21}},"name":"observer2"},{"range":{"start":{"line":41,"character":8},"end":{"line":41,"character":37}},"kind":13,"selectionRange":{"start":{"line":41,"character":12},"end":{"line":41,"character":27}},"name":"receivedNumbers"}]},{"range":{"start":{"line":63,"character":4},"end":{"line":81,"character":5}},"kind":6,"selectionRange":{"start":{"line":63,"character":9},"end":{"line":63,"character":42}},"name":"testObservingAndReceivingAuthor()","children":[{"range":{"start":{"line":65,"character":8},"end":{"line":65,"character":40}},"kind":13,"selectionRange":{"start":{"line":65,"character":12},"end":{"line":65,"character":21}},"name":"messenger"},{"range":{"start":{"line":66,"character":8},"end":{"line":66,"character":37}},"kind":13,"selectionRange":{"start":{"line":66,"character":12},"end":{"line":66,"character":20}},"name":"observer"},{"range":{"start":{"line":67,"character":8},"end":{"line":67,"character":32}},"kind":13,"selectionRange":{"start":{"line":67,"character":12},"end":{"line":67,"character":26}},"name":"receivedNumber"},{"range":{"start":{"line":68,"character":8},"end":{"line":68,"character":38}},"kind":13,"selectionRange":{"start":{"line":68,"character":12},"end":{"line":68,"character":26}},"name":"receivedAuthor"}]},{"range":{"start":{"line":83,"character":4},"end":{"line":97,"character":5}},"kind":6,"selectionRange":{"start":{"line":83,"character":9},"end":{"line":83,"character":65}},"name":"testObservingSameObservableWithMultipleMessageHandlers()","children":[{"range":{"start":{"line":85,"character":8},"end":{"line":85,"character":41}},"kind":13,"selectionRange":{"start":{"line":85,"character":12},"end":{"line":85,"character":21}},"name":"messenger"},{"range":{"start":{"line":86,"character":8},"end":{"line":86,"character":37}},"kind":13,"selectionRange":{"start":{"line":86,"character":12},"end":{"line":86,"character":20}},"name":"observer"},{"range":{"start":{"line":87,"character":8},"end":{"line":87,"character":19}},"kind":13,"selectionRange":{"start":{"line":87,"character":12},"end":{"line":87,"character":15}},"name":"sum"}]},{"range":{"start":{"line":99,"character":4},"end":{"line":102,"character":5}},"kind":5,"selectionRange":{"start":{"line":99,"character":10},"end":{"line":99,"character":22}},"name":"TestObserver","references":[{"range":{"start":{"line":8,"character":23},"end":{"line":8,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":26,"character":23},"end":{"line":26,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":39,"character":24},"end":{"line":39,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":40,"character":24},"end":{"line":40,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":66,"character":23},"end":{"line":66,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":86,"character":23},"end":{"line":86,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"}],"children":[{"range":{"start":{"line":101,"character":8},"end":{"line":101,"character":33}},"kind":7,"selectionRange":{"start":{"line":101,"character":12},"end":{"line":101,"character":20}},"name":"receiver"}]}]}],"code":"import XCTest\nimport SwiftObserver\n\nclass BasicTests: XCTestCase\n{\n    func testObserverving()\n    {\n        let messenger = Messenger<Int>()\n        let observer = TestObserver()\n        var receivedNumber: Int?\n        \n        observer.observe(messenger) { receivedNumber = $0 }\n        \n        XCTAssertEqual(receivedNumber, nil)\n        \n        messenger.send(42)\n        \n        XCTAssertEqual(receivedNumber, 42)\n    }\n    \n    func testObservingAloneDoesNotSendAMessage()\n    {\n        let messenger = Messenger<Void>()\n        \n        var didTriggerUpdate = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(messenger)\n        {\n            didTriggerUpdate = true\n        }\n        \n        XCTAssertFalse(didTriggerUpdate)\n    }\n    \n    func testMaintainingMessageOrder()\n    {\n        let messenger = Messenger<Int>()\n        let observer1 = TestObserver()\n        let observer2 = TestObserver()\n        var receivedNumbers = [Int]()\n        \n        observer1.observe(messenger)\n        {\n            receivedNumbers.append($0)\n            if $0 == 0 { messenger.send(1) }\n        }\n        \n        observer2.observe(messenger)\n        {\n            receivedNumbers.append($0)\n            if $0 == 0 { messenger.send(2) }\n        }\n        \n        messenger.send(0)\n        \n        XCTAssertEqual(receivedNumbers.count, 6)\n        XCTAssertEqual(receivedNumbers[0], 0)\n        XCTAssertEqual(receivedNumbers[1], 0)\n        XCTAssertEqual(receivedNumbers[2], receivedNumbers[3])\n    }\n    \n    func testObservingAndReceivingAuthor()\n    {\n        let messenger = Messenger<Int>()\n        let observer = TestObserver()\n        var receivedNumber: Int?\n        var receivedAuthor: AnyAuthor?\n        \n        observer.observe(messenger)\n        {\n            number, author in\n            receivedNumber = number\n            receivedAuthor = author\n        }\n        \n        messenger.send(42, from: observer)\n        \n        XCTAssertEqual(receivedNumber, 42)\n        XCTAssert(receivedAuthor === observer)\n    }\n    \n    func testObservingSameObservableWithMultipleMessageHandlers()\n    {\n        let messenger = Messenger<Void>()\n        let observer = TestObserver()\n        var sum = 0\n        \n        observer.observe(messenger) { sum += 1 }\n        observer.observe(messenger) { sum += 2 }\n        \n        XCTAssertEqual(sum, 0)\n        \n        messenger.send(())\n        \n        XCTAssertEqual(sum, 3)\n    }\n    \n    class TestObserver: Observer\n    {\n        let receiver = Receiver()\n    }\n}\n"},{"name":"CustomObservableTests.swift","symbols":[{"range":{"start":{"line":3,"character":0},"end":{"line":124,"character":1}},"kind":5,"selectionRange":{"start":{"line":3,"character":6},"end":{"line":3,"character":27}},"name":"CustomObservableTests","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":41}},"name":"testObservingACustomObservable()","children":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":37}},"kind":13,"selectionRange":{"start":{"line":7,"character":12},"end":{"line":7,"character":17}},"name":"model"},{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":29}},"kind":13,"selectionRange":{"start":{"line":9,"character":12},"end":{"line":9,"character":21}},"name":"didUpdate"},{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":37}},"kind":13,"selectionRange":{"start":{"line":11,"character":12},"end":{"line":11,"character":20}},"name":"observer"}]},{"range":{"start":{"line":24,"character":4},"end":{"line":41,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":9},"end":{"line":24,"character":47}},"name":"testMapObservationOfCustomObservable()","children":[{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":37}},"kind":13,"selectionRange":{"start":{"line":26,"character":12},"end":{"line":26,"character":17}},"name":"model"},{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":27}},"kind":13,"selectionRange":{"start":{"line":28,"character":12},"end":{"line":28,"character":19}},"name":"didFire"},{"range":{"start":{"line":30,"character":8},"end":{"line":30,"character":37}},"kind":13,"selectionRange":{"start":{"line":30,"character":12},"end":{"line":30,"character":20}},"name":"observer"}]},{"range":{"start":{"line":43,"character":4},"end":{"line":64,"character":5}},"kind":6,"selectionRange":{"start":{"line":43,"character":9},"end":{"line":43,"character":53}},"name":"testMapSelectObservationOfCustomObservable()","children":[{"range":{"start":{"line":45,"character":8},"end":{"line":45,"character":37}},"kind":13,"selectionRange":{"start":{"line":45,"character":12},"end":{"line":45,"character":17}},"name":"model"},{"range":{"start":{"line":47,"character":8},"end":{"line":47,"character":50}},"kind":13,"selectionRange":{"start":{"line":47,"character":12},"end":{"line":47,"character":23}},"name":"mappedModel"},{"range":{"start":{"line":49,"character":8},"end":{"line":49,"character":27}},"kind":13,"selectionRange":{"start":{"line":49,"character":12},"end":{"line":49,"character":19}},"name":"didFire"},{"range":{"start":{"line":51,"character":8},"end":{"line":51,"character":37}},"kind":13,"selectionRange":{"start":{"line":51,"character":12},"end":{"line":51,"character":20}},"name":"observer"}]},{"range":{"start":{"line":66,"character":4},"end":{"line":88,"character":5}},"kind":6,"selectionRange":{"start":{"line":66,"character":9},"end":{"line":66,"character":43}},"name":"testNewMappingOnCustomObservable()","children":[{"range":{"start":{"line":68,"character":8},"end":{"line":68,"character":47}},"kind":13,"selectionRange":{"start":{"line":68,"character":12},"end":{"line":68,"character":28}},"name":"customObservable"},{"range":{"start":{"line":70,"character":8},"end":{"line":70,"character":45}},"kind":13,"selectionRange":{"start":{"line":70,"character":12},"end":{"line":70,"character":20}},"name":"newState"},{"range":{"start":{"line":74,"character":8},"end":{"line":74,"character":29}},"kind":13,"selectionRange":{"start":{"line":74,"character":12},"end":{"line":74,"character":21}},"name":"didUpdate"},{"range":{"start":{"line":76,"character":8},"end":{"line":76,"character":37}},"kind":13,"selectionRange":{"start":{"line":76,"character":12},"end":{"line":76,"character":20}},"name":"observer"}]},{"range":{"start":{"line":90,"character":4},"end":{"line":97,"character":5}},"kind":5,"selectionRange":{"start":{"line":90,"character":10},"end":{"line":90,"character":25}},"name":"ObservableModel","references":[{"range":{"start":{"line":7,"character":20},"end":{"line":7,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":26,"character":20},"end":{"line":26,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":45,"character":20},"end":{"line":45,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":92,"character":8},"end":{"line":92,"character":48}},"kind":7,"selectionRange":{"start":{"line":92,"character":12},"end":{"line":92,"character":25}},"name":"latestMessage"},{"range":{"start":{"line":94,"character":8},"end":{"line":94,"character":42}},"kind":7,"selectionRange":{"start":{"line":94,"character":12},"end":{"line":94,"character":21}},"name":"messenger"},{"range":{"start":{"line":96,"character":8},"end":{"line":96,"character":67}},"kind":10,"selectionRange":{"start":{"line":96,"character":13},"end":{"line":96,"character":18}},"name":"Event","references":[{"range":{"start":{"line":92,"character":27},"end":{"line":92,"character":27}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":94,"character":34},"end":{"line":94,"character":34}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":96,"character":34},"end":{"line":96,"character":44}},"kind":22,"selectionRange":{"start":{"line":96,"character":34},"end":{"line":96,"character":44}},"name":"didNothing","references":[{"range":{"start":{"line":92,"character":36},"end":{"line":92,"character":36}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}]},{"range":{"start":{"line":96,"character":46},"end":{"line":96,"character":55}},"kind":22,"selectionRange":{"start":{"line":96,"character":46},"end":{"line":96,"character":55}},"name":"didUpdate","references":[{"range":{"start":{"line":15,"character":32},"end":{"line":15,"character":32}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":19,"character":20},"end":{"line":19,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":38,"character":20},"end":{"line":38,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":47,"character":40},"end":{"line":47,"character":40}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":58,"character":20},"end":{"line":58,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}]},{"range":{"start":{"line":96,"character":57},"end":{"line":96,"character":65}},"kind":22,"selectionRange":{"start":{"line":96,"character":57},"end":{"line":96,"character":65}},"name":"didReset","references":[{"range":{"start":{"line":62,"character":20},"end":{"line":62,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}]}]}]},{"range":{"start":{"line":99,"character":4},"end":{"line":118,"character":5}},"kind":5,"selectionRange":{"start":{"line":99,"character":10},"end":{"line":99,"character":24}},"name":"ModelWithState","references":[{"range":{"start":{"line":68,"character":31},"end":{"line":68,"character":31}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":101,"character":8},"end":{"line":104,"character":9}},"kind":7,"selectionRange":{"start":{"line":101,"character":12},"end":{"line":101,"character":25}},"name":"latestMessage"},{"range":{"start":{"line":106,"character":8},"end":{"line":115,"character":9}},"kind":7,"selectionRange":{"start":{"line":106,"character":12},"end":{"line":106,"character":17}},"name":"state","references":[{"range":{"start":{"line":72,"character":25},"end":{"line":72,"character":25}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":85,"character":25},"end":{"line":85,"character":25}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":103,"character":19},"end":{"line":103,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":103,"character":26},"end":{"line":103,"character":26}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":110,"character":31},"end":{"line":110,"character":31}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":112,"character":42},"end":{"line":112,"character":42}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}]},{"range":{"start":{"line":117,"character":8},"end":{"line":117,"character":51}},"kind":7,"selectionRange":{"start":{"line":117,"character":12},"end":{"line":117,"character":21}},"name":"messenger"}]},{"range":{"start":{"line":120,"character":4},"end":{"line":123,"character":5}},"kind":5,"selectionRange":{"start":{"line":120,"character":10},"end":{"line":120,"character":22}},"name":"TestObserver","references":[{"range":{"start":{"line":11,"character":23},"end":{"line":11,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":30,"character":23},"end":{"line":30,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":51,"character":23},"end":{"line":51,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":76,"character":23},"end":{"line":76,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":122,"character":8},"end":{"line":122,"character":33}},"kind":7,"selectionRange":{"start":{"line":122,"character":12},"end":{"line":122,"character":20}},"name":"receiver"}]}]}],"code":"import XCTest\nimport SwiftObserver\n\nclass CustomObservableTests: XCTestCase\n{\n    func testObservingACustomObservable()\n    {\n        let model = ObservableModel()\n        \n        var didUpdate = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(model)\n        {\n            XCTAssertEqual($0, .didUpdate)\n            didUpdate = true\n        }\n        \n        model.send(.didUpdate)\n        \n        XCTAssert(didUpdate)\n    }\n    \n    func testMapObservationOfCustomObservable()\n    {\n        let model = ObservableModel()\n        \n        var didFire = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(model).map({ $0.rawValue })\n        {\n            XCTAssertEqual($0, \"didUpdate\")\n            didFire = true\n        }\n        \n        model.send(.didUpdate)\n        \n        XCTAssert(didFire)\n    }\n    \n    func testMapSelectObservationOfCustomObservable()\n    {\n        let model = ObservableModel()\n        \n        let mappedModel = model.select(.didUpdate)\n        \n        var didFire = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(mappedModel)\n        {\n            didFire = true\n        }\n        \n        model.send(.didUpdate)\n        XCTAssert(didFire)\n        \n        didFire = false\n        model.send(.didReset)\n        XCTAssert(!didFire)\n    }\n    \n    func testNewMappingOnCustomObservable()\n    {\n        let customObservable = ModelWithState()\n        \n        let newState = customObservable.new()\n        \n        customObservable.state = \"state1\"\n        \n        var didUpdate = false\n        \n        let observer = TestObserver()\n        \n        observer.observe(newState)\n        {\n            XCTAssert($0 == \"state1\" || $0 == \"state2\")\n            \n            didUpdate = $0 == \"state2\"\n        }\n        \n        customObservable.state = \"state2\"\n        \n        XCTAssert(didUpdate)\n    }\n    \n    class ObservableModel: ObservableCache\n    {\n        var latestMessage: Event { .didNothing }\n\n        let messenger = Messenger<Event>()\n\n        enum Event: String { case didNothing, didUpdate, didReset }\n    }\n\n    class ModelWithState: ObservableCache\n    {\n        var latestMessage: Update<String>\n        {\n            Update(state, state)\n        }\n\n        var state = \"initial state\"\n        {\n            didSet\n            {\n                if oldValue != state\n                {\n                    send(Update(oldValue, state))\n                }\n            }\n        }\n\n        let messenger = Messenger<Update<String>>()\n    }\n    \n    class TestObserver: Observer\n    {\n        let receiver = Receiver()\n    }\n}\n\n"}]}]},{"name":"Code","subfolders":[{"name":"CombineObserver","files":[{"name":"SwiftObserver+Combine.swift","symbols":[{"range":{"start":{"line":6,"character":7},"end":{"line":12,"character":1}},"kind":3,"selectionRange":{"start":{"line":6,"character":17},"end":{"line":6,"character":32}},"name":"ObservableCache","children":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":72}},"kind":6,"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":20}},"name":"publisher()","references":[{"range":{"start":{"line":11,"character":38},"end":{"line":11,"character":38}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":27,"character":38},"end":{"line":27,"character":38}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"}]}]},{"range":{"start":{"line":15,"character":7},"end":{"line":34,"character":1}},"kind":5,"selectionRange":{"start":{"line":15,"character":13},"end":{"line":15,"character":39}},"name":"PublisherOnObservableCache","references":[{"range":{"start":{"line":11,"character":24},"end":{"line":11,"character":24}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}],"children":[{"range":{"start":{"line":15,"character":40},"end":{"line":15,"character":58}},"kind":26,"selectionRange":{"start":{"line":15,"character":40},"end":{"line":15,"character":41}},"name":"O","references":[{"range":{"start":{"line":17,"character":23},"end":{"line":17,"character":23}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":24,"character":28},"end":{"line":24,"character":28}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":32,"character":30},"end":{"line":32,"character":30}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}]},{"range":{"start":{"line":17,"character":4},"end":{"line":21,"character":5}},"kind":6,"selectionRange":{"start":{"line":17,"character":4},"end":{"line":17,"character":25}},"name":"init(_:)","references":[{"range":{"start":{"line":11,"character":60},"end":{"line":11,"character":60}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}]},{"range":{"start":{"line":23,"character":11},"end":{"line":23,"character":36}},"kind":7,"selectionRange":{"start":{"line":23,"character":15},"end":{"line":23,"character":23}},"name":"receiver"},{"range":{"start":{"line":24,"character":12},"end":{"line":24,"character":29}},"kind":7,"selectionRange":{"start":{"line":24,"character":16},"end":{"line":24,"character":26}},"name":"observable","references":[{"range":{"start":{"line":18,"character":13},"end":{"line":18,"character":13}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}]},{"range":{"start":{"line":26,"character":11},"end":{"line":28,"character":5}},"kind":6,"selectionRange":{"start":{"line":26,"character":16},"end":{"line":26,"character":41}},"name":"receive(subscriber:)","children":[{"range":{"start":{"line":26,"character":24},"end":{"line":26,"character":25}},"kind":26,"selectionRange":{"start":{"line":26,"character":24},"end":{"line":26,"character":25}},"name":"S"}]},{"range":{"start":{"line":30,"character":12},"end":{"line":30,"character":63}},"kind":7,"selectionRange":{"start":{"line":30,"character":16},"end":{"line":30,"character":25}},"name":"publisher","references":[{"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":8}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":20,"character":37},"end":{"line":20,"character":37}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":8}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}]}]},{"range":{"start":{"line":37,"character":7},"end":{"line":43,"character":1}},"kind":3,"selectionRange":{"start":{"line":37,"character":17},"end":{"line":37,"character":47}},"name":"SwiftObserver.ObservableObject","children":[{"range":{"start":{"line":42,"character":4},"end":{"line":42,"character":67}},"kind":6,"selectionRange":{"start":{"line":42,"character":9},"end":{"line":42,"character":20}},"name":"publisher()","references":[{"range":{"start":{"line":44,"character":43},"end":{"line":44,"character":43}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"}]}]},{"range":{"start":{"line":46,"character":7},"end":{"line":64,"character":1}},"kind":5,"selectionRange":{"start":{"line":46,"character":13},"end":{"line":46,"character":34}},"name":"PublisherOnObservable","references":[{"range":{"start":{"line":42,"character":24},"end":{"line":42,"character":24}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}],"children":[{"range":{"start":{"line":46,"character":35},"end":{"line":46,"character":68}},"kind":26,"selectionRange":{"start":{"line":46,"character":35},"end":{"line":46,"character":36}},"name":"O","references":[{"range":{"start":{"line":48,"character":23},"end":{"line":48,"character":23}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":54,"character":28},"end":{"line":54,"character":28}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":62,"character":30},"end":{"line":62,"character":30}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}]},{"range":{"start":{"line":48,"character":4},"end":{"line":51,"character":5}},"kind":6,"selectionRange":{"start":{"line":48,"character":4},"end":{"line":48,"character":25}},"name":"init(_:)","references":[{"range":{"start":{"line":42,"character":55},"end":{"line":42,"character":55}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}]},{"range":{"start":{"line":53,"character":11},"end":{"line":53,"character":36}},"kind":7,"selectionRange":{"start":{"line":53,"character":15},"end":{"line":53,"character":23}},"name":"receiver"},{"range":{"start":{"line":54,"character":12},"end":{"line":54,"character":29}},"kind":7,"selectionRange":{"start":{"line":54,"character":16},"end":{"line":54,"character":26}},"name":"observable","references":[{"range":{"start":{"line":49,"character":13},"end":{"line":49,"character":13}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}]},{"range":{"start":{"line":56,"character":11},"end":{"line":58,"character":5}},"kind":6,"selectionRange":{"start":{"line":56,"character":16},"end":{"line":56,"character":41}},"name":"receive(subscriber:)","children":[{"range":{"start":{"line":56,"character":24},"end":{"line":56,"character":25}},"kind":26,"selectionRange":{"start":{"line":56,"character":24},"end":{"line":56,"character":25}},"name":"S"}]},{"range":{"start":{"line":60,"character":12},"end":{"line":60,"character":65}},"kind":7,"selectionRange":{"start":{"line":60,"character":16},"end":{"line":60,"character":25}},"name":"publisher","references":[{"range":{"start":{"line":50,"character":37},"end":{"line":50,"character":37}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":57,"character":8},"end":{"line":57,"character":8}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"}]}]}],"code":"#if canImport(Combine)\n\nimport Combine\nimport SwiftObserver\n\n@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)\npublic extension ObservableCache {\n    \n    /**\n     Create a `Publisher` that publishes all messages sent by this `ObservableCache`\n     */\n    func publisher() -> PublisherOnObservableCache<Self> { .init(self) }\n}\n\n@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)\npublic class PublisherOnObservableCache<O: ObservableCache>: Publisher, Observer {\n    \n    init(_ observable: O) {\n        self.observable = observable\n        publisher = .init(observable.latestMessage)\n        observe(observable, receive: publisher.send)\n    }\n    \n    public let receiver = Receiver()\n    private let observable: O\n    \n    public func receive<S>(subscriber: S) where S: Subscriber, Failure == S.Failure, Output == S.Input {\n        publisher.receive(subscriber: subscriber)\n    }\n    \n    private let publisher: CurrentValueSubject<Output, Failure>\n    \n    public typealias Output = O.Message\n    public typealias Failure = Never\n}\n\n@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)\npublic extension SwiftObserver.ObservableObject {\n    \n    /**\n     Create a `Publisher` that publishes all messages sent by this `ObservableObject`\n     */\n    func publisher() -> PublisherOnObservable<Self> { .init(self) }\n}\n\n@available(iOS 13.0, macOS 10.15, tvOS 13.0, *)\npublic class PublisherOnObservable<O: SwiftObserver.ObservableObject>: Publisher, Observer {\n    \n    init(_ observable: O) {\n        self.observable = observable\n        observe(observable, receive: publisher.send)\n    }\n    \n    public let receiver = Receiver()\n    private let observable: O\n    \n    public func receive<S>(subscriber: S) where S: Subscriber, Failure == S.Failure, Output == S.Input {\n        publisher.receive(subscriber: subscriber)\n    }\n    \n    private let publisher = PassthroughSubject<Output, Failure>()\n    \n    public typealias Output = O.Message\n    public typealias Failure = Never\n}\n\n#endif\n"}]},{"name":"SwiftObserver","files":[{"name":"Connection.swift","symbols":[{"range":{"start":{"line":4,"character":0},"end":{"line":29,"character":1}},"kind":5,"selectionRange":{"start":{"line":4,"character":6},"end":{"line":4,"character":16}},"name":"Connection","references":[{"range":{"start":{"line":32,"character":39},"end":{"line":32,"character":39}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":51,"character":45},"end":{"line":51,"character":45}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":54,"character":68},"end":{"line":54,"character":68}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":60,"character":78},"end":{"line":60,"character":78}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":24,"character":65},"end":{"line":24,"character":65}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":33,"character":33},"end":{"line":33,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":43,"character":29},"end":{"line":43,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":77,"character":25},"end":{"line":77,"character":25}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":101,"character":29},"end":{"line":101,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}],"children":[{"range":{"start":{"line":6,"character":4},"end":{"line":12,"character":5}},"kind":6,"selectionRange":{"start":{"line":6,"character":4},"end":{"line":6,"character":68}},"name":"init(messenger:receiver:)","references":[{"range":{"start":{"line":33,"character":33},"end":{"line":33,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":43,"character":29},"end":{"line":43,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}]},{"range":{"start":{"line":14,"character":4},"end":{"line":17,"character":5}},"kind":6,"selectionRange":{"start":{"line":14,"character":9},"end":{"line":14,"character":30}},"name":"releaseFromReceiver()","references":[{"range":{"start":{"line":6,"character":59},"end":{"line":6,"character":59}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":52,"character":53},"end":{"line":52,"character":53}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":59,"character":27},"end":{"line":59,"character":27}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}]},{"range":{"start":{"line":19,"character":4},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":19,"character":9},"end":{"line":19,"character":34}},"name":"unregisterFromMessenger()","references":[{"range":{"start":{"line":15,"character":40},"end":{"line":15,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":22,"character":35},"end":{"line":22,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":28,"character":40},"end":{"line":28,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"}]},{"range":{"start":{"line":24,"character":4},"end":{"line":24,"character":32}},"kind":7,"selectionRange":{"start":{"line":24,"character":8},"end":{"line":24,"character":19}},"name":"receiverKey","references":[{"range":{"start":{"line":9,"character":13},"end":{"line":9,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"},{"range":{"start":{"line":21,"character":46},"end":{"line":21,"character":46}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}]},{"range":{"start":{"line":25,"character":9},"end":{"line":25,"character":41}},"kind":7,"selectionRange":{"start":{"line":25,"character":13},"end":{"line":25,"character":21}},"name":"receiver","references":[{"range":{"start":{"line":34,"character":22},"end":{"line":34,"character":22}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":19,"character":54},"end":{"line":19,"character":54}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":90,"character":29},"end":{"line":90,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"},{"range":{"start":{"line":16,"character":8},"end":{"line":16,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}]},{"range":{"start":{"line":27,"character":4},"end":{"line":27,"character":34}},"kind":7,"selectionRange":{"start":{"line":27,"character":8},"end":{"line":27,"character":20}},"name":"messengerKey","references":[{"range":{"start":{"line":39,"character":31},"end":{"line":39,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":11,"character":13},"end":{"line":11,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"},{"range":{"start":{"line":16,"character":42},"end":{"line":16,"character":42}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}]},{"range":{"start":{"line":28,"character":9},"end":{"line":28,"character":43}},"kind":7,"selectionRange":{"start":{"line":28,"character":13},"end":{"line":28,"character":22}},"name":"messenger","references":[{"range":{"start":{"line":10,"character":13},"end":{"line":10,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"},{"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}]}]},{"range":{"start":{"line":33,"character":0},"end":{"line":36,"character":1}},"kind":3,"selectionRange":{"start":{"line":33,"character":10},"end":{"line":33,"character":27}},"name":"ReceiverInterface","children":[{"range":{"start":{"line":35,"character":4},"end":{"line":35,"character":46}},"kind":7,"selectionRange":{"start":{"line":35,"character":8},"end":{"line":35,"character":11}},"name":"key","references":[{"range":{"start":{"line":19,"character":36},"end":{"line":19,"character":36}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":26,"character":71},"end":{"line":26,"character":71}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":45,"character":40},"end":{"line":45,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":9,"character":36},"end":{"line":9,"character":36}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}]}]},{"range":{"start":{"line":38,"character":0},"end":{"line":41,"character":1}},"kind":11,"selectionRange":{"start":{"line":38,"character":9},"end":{"line":38,"character":26}},"name":"ReceiverInterface","references":[{"range":{"start":{"line":2,"character":20},"end":{"line":2,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":48,"character":43},"end":{"line":48,"character":43}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":53,"character":38},"end":{"line":53,"character":38}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":59,"character":38},"end":{"line":59,"character":38}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":17,"character":30},"end":{"line":17,"character":30}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":22,"character":25},"end":{"line":22,"character":25}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":6,"character":50},"end":{"line":6,"character":50}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"},{"range":{"start":{"line":25,"character":23},"end":{"line":25,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"},{"range":{"start":{"line":33,"character":10},"end":{"line":33,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}],"children":[{"range":{"start":{"line":40,"character":4},"end":{"line":40,"character":59}},"kind":6,"selectionRange":{"start":{"line":40,"character":9},"end":{"line":40,"character":59}},"name":"releaseConnection(with:)","references":[{"range":{"start":{"line":16,"character":18},"end":{"line":16,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}]}]},{"range":{"start":{"line":45,"character":0},"end":{"line":48,"character":1}},"kind":3,"selectionRange":{"start":{"line":45,"character":10},"end":{"line":45,"character":28}},"name":"MessengerInterface","children":[{"range":{"start":{"line":47,"character":4},"end":{"line":47,"character":48}},"kind":7,"selectionRange":{"start":{"line":47,"character":8},"end":{"line":47,"character":11}},"name":"key","references":[{"range":{"start":{"line":41,"character":60},"end":{"line":41,"character":60}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":11,"character":38},"end":{"line":11,"character":38}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}]}]},{"range":{"start":{"line":50,"character":0},"end":{"line":53,"character":1}},"kind":11,"selectionRange":{"start":{"line":50,"character":9},"end":{"line":50,"character":27}},"name":"MessengerInterface","references":[{"range":{"start":{"line":2,"character":21},"end":{"line":2,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":23,"character":28},"end":{"line":23,"character":28}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":6,"character":20},"end":{"line":6,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"},{"range":{"start":{"line":28,"character":24},"end":{"line":28,"character":24}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"},{"range":{"start":{"line":45,"character":10},"end":{"line":45,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}],"children":[{"range":{"start":{"line":52,"character":4},"end":{"line":52,"character":60}},"kind":6,"selectionRange":{"start":{"line":52,"character":9},"end":{"line":52,"character":60}},"name":"unregisterConnection(with:)","references":[{"range":{"start":{"line":21,"character":19},"end":{"line":21,"character":19}},"filePathRelativeToRoot":"Code/SwiftObserver/Connection.swift"}]}]}],"code":"import SwiftyToolz\n\n// MARK: - Connection\n\nclass Connection\n{\n    init(messenger: MessengerInterface, receiver: ReceiverInterface)\n    {\n        self.receiver = receiver\n        self.receiverKey = receiver.key\n        self.messenger = messenger\n        self.messengerKey = messenger.key\n    }\n    \n    func releaseFromReceiver()\n    {\n        receiver?.releaseConnection(with: messengerKey)\n    }\n    \n    func unregisterFromMessenger()\n    {\n        messenger?.unregisterConnection(with: receiverKey)\n    }\n    \n    let receiverKey: ReceiverKey\n    weak var receiver: ReceiverInterface?\n    \n    let messengerKey: MessengerKey\n    weak var messenger: MessengerInterface?\n}\n\n// MARK: - Receiver Interface\n\nextension ReceiverInterface\n{\n    var key: ReceiverKey { ReceiverKey(self) }\n}\n\nprotocol ReceiverInterface: AnyObject\n{\n    func releaseConnection(with messengerKey: MessengerKey)\n}\n\n// MARK: - Messenger Interface\n\nextension MessengerInterface\n{\n    var key: MessengerKey { MessengerKey(self) }\n}\n\nprotocol MessengerInterface: AnyObject\n{\n    func unregisterConnection(with receiverKey: ReceiverKey)\n}\n\n// MARK: - Keys\n\ntypealias ReceiverKey = ObjectIdentifier\ntypealias MessengerKey = ObjectIdentifier\n"},{"name":"AnyAuthor.swift","symbols":[],"code":"/**\n ``ObservableObject/Message`` authors must be objects.\n \n Typically, the message author is either an ``Observer`` that triggered the ``ObservableObject/Message`` or the sending ``ObservableObject`` itself.\n */\npublic typealias AnyAuthor = AnyObject\n"}],"subfolders":[{"name":"ObservableObject","files":[{"name":"ObservableCache.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":32}},"name":"ObservableCache","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":5,"character":39}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":15}},"name":"send()","references":[{"range":{"start":{"line":148,"character":13},"end":{"line":148,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":72,"character":17},"end":{"line":72,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":86,"character":17},"end":{"line":86,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":91,"character":20},"end":{"line":91,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":206,"character":13},"end":{"line":206,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":226,"character":13},"end":{"line":226,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}]}]},{"range":{"start":{"line":17,"character":7},"end":{"line":23,"character":1}},"kind":11,"selectionRange":{"start":{"line":17,"character":16},"end":{"line":17,"character":31}},"name":"ObservableCache","references":[{"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper+Cache.swift"},{"range":{"start":{"line":0,"character":43},"end":{"line":0,"character":43}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper+Cache.swift"},{"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ObservableCache.swift"},{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":17,"character":19},"end":{"line":17,"character":19}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":6,"character":17},"end":{"line":6,"character":17}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":15,"character":43},"end":{"line":15,"character":43}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableCache.swift"},{"range":{"start":{"line":90,"character":27},"end":{"line":90,"character":27}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":99,"character":26},"end":{"line":99,"character":26}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":22,"character":4},"end":{"line":22,"character":38}},"kind":7,"selectionRange":{"start":{"line":22,"character":8},"end":{"line":22,"character":21}},"name":"latestMessage","references":[{"range":{"start":{"line":4,"character":19},"end":{"line":4,"character":19}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper+Cache.swift"},{"range":{"start":{"line":19,"character":37},"end":{"line":19,"character":37}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":5,"character":23},"end":{"line":5,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableCache.swift"}]}]}],"code":"public extension ObservableCache\n{\n    /**\n     Send the ``latestMessage`` to all ``Observer``s\n     */\n    func send() { send(latestMessage) }\n}\n\n/**\n An ``ObservableObject`` that can provide its last sent (or some analogous) ``ObservableObject/Message``\n \n `ObservableCache` has a function ``send()`` that sends ``latestMessage``.\n \n A typical `ObservableCache` derives its `latestMessage` from some form of state.\n \n ``Variable`` is the most prominent `ObservableCache` in SwiftObserver. Its ``latestMessage`` is an ``Update`` in which ``Update/old`` and ``Update/new`` both hold the current ``Variable/value``.\n */\npublic protocol ObservableCache: ObservableObject\n{\n    /**\n     Typically the last sent ``ObservableObject/Message`` or one that indicates that \"nothing has changed\"\n     */\n    var latestMessage: Message { get }\n}\n"},{"name":"ObservableObject+StopObservation.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":9,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":8,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":28}},"name":"stopBeingObserved()"}]}],"code":"public extension ObservableObject\n{\n    /**\n     Ends all observations by all ``Observer``s\n     */\n    func stopBeingObserved()\n    {\n        messenger.disconnectAllReceivers()\n    }\n}\n"},{"name":"Messenger.swift","symbols":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":42}},"kind":3,"selectionRange":{"start":{"line":2,"character":10},"end":{"line":2,"character":19}},"name":"Messenger"},{"range":{"start":{"line":19,"character":7},"end":{"line":87,"character":1}},"kind":5,"selectionRange":{"start":{"line":19,"character":13},"end":{"line":19,"character":22}},"name":"Messenger","references":[{"range":{"start":{"line":0,"character":56},"end":{"line":0,"character":56}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":9,"character":47},"end":{"line":9,"character":47}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":0,"character":54},"end":{"line":0,"character":54}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"},{"range":{"start":{"line":2,"character":26},"end":{"line":2,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"},{"range":{"start":{"line":28,"character":19},"end":{"line":28,"character":19}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"},{"range":{"start":{"line":0,"character":48},"end":{"line":0,"character":48}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":19,"character":20},"end":{"line":19,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":25,"character":20},"end":{"line":25,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":40,"character":28},"end":{"line":40,"character":28}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":151,"character":24},"end":{"line":151,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":0,"character":50},"end":{"line":0,"character":50}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":7,"character":24},"end":{"line":7,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":22,"character":24},"end":{"line":22,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":38,"character":24},"end":{"line":38,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":65,"character":24},"end":{"line":65,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":85,"character":24},"end":{"line":85,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":1,"character":4},"end":{"line":1,"character":4}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":1,"character":4},"end":{"line":1,"character":4}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":94,"character":24},"end":{"line":94,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":117,"character":24},"end":{"line":117,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":0,"character":40},"end":{"line":0,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}],"children":[{"range":{"start":{"line":19,"character":23},"end":{"line":19,"character":30}},"kind":26,"selectionRange":{"start":{"line":19,"character":23},"end":{"line":19,"character":30}},"name":"Message","references":[{"range":{"start":{"line":27,"character":35},"end":{"line":27,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":41,"character":40},"end":{"line":41,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":54,"character":47},"end":{"line":54,"character":47}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":60,"character":46},"end":{"line":60,"character":46}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":86,"character":41},"end":{"line":86,"character":41}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":2,"character":36},"end":{"line":2,"character":36}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"}]},{"range":{"start":{"line":23,"character":11},"end":{"line":23,"character":20}},"kind":6,"selectionRange":{"start":{"line":23,"character":11},"end":{"line":23,"character":17}},"name":"init()","references":[{"range":{"start":{"line":6,"character":14},"end":{"line":6,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":7,"character":14},"end":{"line":7,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":9,"character":14},"end":{"line":9,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":9,"character":14},"end":{"line":9,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":5,"character":14},"end":{"line":5,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}]},{"range":{"start":{"line":27,"character":13},"end":{"line":39,"character":5}},"kind":6,"selectionRange":{"start":{"line":27,"character":18},"end":{"line":27,"character":67}},"name":"_send(_:from:)","references":[{"range":{"start":{"line":12,"character":18},"end":{"line":12,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"},{"range":{"start":{"line":16,"character":14},"end":{"line":16,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":16,"character":14},"end":{"line":16,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"}],"children":[{"range":{"start":{"line":33,"character":19},"end":{"line":33,"character":26}},"kind":13,"selectionRange":{"start":{"line":33,"character":19},"end":{"line":33,"character":26}},"name":"message"},{"range":{"start":{"line":33,"character":28},"end":{"line":33,"character":34}},"kind":13,"selectionRange":{"start":{"line":33,"character":28},"end":{"line":33,"character":34}},"name":"author"}]},{"range":{"start":{"line":41,"character":12},"end":{"line":41,"character":62}},"kind":7,"selectionRange":{"start":{"line":41,"character":16},"end":{"line":41,"character":35}},"name":"messagesFromAuthors","references":[{"range":{"start":{"line":29,"character":8},"end":{"line":29,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":31,"character":11},"end":{"line":31,"character":11}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":33,"character":38},"end":{"line":33,"character":38}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":37,"character":12},"end":{"line":37,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":43,"character":13},"end":{"line":43,"character":72}},"kind":7,"selectionRange":{"start":{"line":43,"character":17},"end":{"line":43,"character":30}},"name":"_latestAuthor","references":[{"range":{"start":{"line":15,"character":53},"end":{"line":15,"character":53}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"}]},{"range":{"start":{"line":44,"character":17},"end":{"line":44,"character":51}},"kind":7,"selectionRange":{"start":{"line":44,"character":21},"end":{"line":44,"character":39}},"name":"storedLatestAuthor","references":[{"range":{"start":{"line":35,"character":12},"end":{"line":35,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":43,"character":44},"end":{"line":43,"character":44}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":48,"character":13},"end":{"line":51,"character":5}},"kind":6,"selectionRange":{"start":{"line":48,"character":18},"end":{"line":48,"character":61}},"name":"isConnected(to:)","references":[{"range":{"start":{"line":7,"character":29},"end":{"line":7,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"}]},{"range":{"start":{"line":53,"character":13},"end":{"line":57,"character":5}},"kind":6,"selectionRange":{"start":{"line":53,"character":18},"end":{"line":54,"character":64}},"name":"connect(_:receive:)","references":[{"range":{"start":{"line":28,"character":35},"end":{"line":28,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"}]},{"range":{"start":{"line":59,"character":13},"end":{"line":63,"character":5}},"kind":6,"selectionRange":{"start":{"line":59,"character":18},"end":{"line":60,"character":74}},"name":"connect(_:receive:)","references":[{"range":{"start":{"line":17,"character":35},"end":{"line":17,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":56,"character":8},"end":{"line":56,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":65,"character":13},"end":{"line":69,"character":5}},"kind":6,"selectionRange":{"start":{"line":65,"character":18},"end":{"line":65,"character":67}},"name":"disconnectReceiver(with:)","references":[{"range":{"start":{"line":7,"character":18},"end":{"line":7,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/ObservableObject+Observer.swift"}]},{"range":{"start":{"line":71,"character":13},"end":{"line":75,"character":5}},"kind":6,"selectionRange":{"start":{"line":71,"character":18},"end":{"line":71,"character":42}},"name":"disconnectAllReceivers()","references":[{"range":{"start":{"line":7,"character":18},"end":{"line":7,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject+StopObservation.swift"}]},{"range":{"start":{"line":79,"character":13},"end":{"line":82,"character":5}},"kind":6,"selectionRange":{"start":{"line":79,"character":18},"end":{"line":79,"character":69}},"name":"unregisterConnection(with:)"},{"range":{"start":{"line":86,"character":12},"end":{"line":86,"character":51}},"kind":7,"selectionRange":{"start":{"line":86,"character":16},"end":{"line":86,"character":25}},"name":"receivers","references":[{"range":{"start":{"line":36,"character":12},"end":{"line":36,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":50,"character":8},"end":{"line":50,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":62,"character":8},"end":{"line":62,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":67,"character":8},"end":{"line":67,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":68,"character":8},"end":{"line":68,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":73,"character":8},"end":{"line":73,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":74,"character":8},"end":{"line":74,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":81,"character":8},"end":{"line":81,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]}]}],"code":"import SwiftyToolz\n\nextension Messenger: MessengerInterface {}\n\n/**\n The simplest `ObservableObject` and the basis of every other `ObservableObject`\n \n `Messenger` doesn't send messages by itself, but anyone can send messages through it and use it for any type of message:\n \n ```swift\n let textMessenger = Messenger<String>()\n\n observer.observe(textMessenger) { textMessage in\n     // respond to textMessage\n }\n\n textMessenger.send(\"my message\")\n ```\n */\npublic class Messenger<Message>\n{\n    // MARK: - Life Cycle\n    \n    public init() {}\n    \n    // MARK: - Send Messages to Receivers\n    \n    internal func _send(_ message: Message, from author: AnyAuthor)\n    {\n        messagesFromAuthors += (message, author)\n\n        if messagesFromAuthors.count > 1 { return }\n        \n        while let (message, author) = messagesFromAuthors.first\n        {\n            storedLatestAuthor = author\n            receivers.receive(message, from: author)\n            messagesFromAuthors.removeFirst()\n        }\n    }\n    \n    private var messagesFromAuthors = [(Message, AnyAuthor)]()\n    \n    internal var _latestAuthor: AnyAuthor { storedLatestAuthor ?? self }\n    private weak var storedLatestAuthor: AnyAuthor?\n    \n    // MARK: - Manage Receivers\n    \n    internal func isConnected(to receiver: ReceiverInterface) -> Bool\n    {\n        receivers.contains(receiver)\n    }\n    \n    internal func connect(_ receiver: ReceiverInterface,\n                           receive: @escaping (Message) -> Void) -> Connection\n    {\n        connect(receiver) { message, _ in receive(message) }\n    }\n    \n    internal func connect(_ receiver: ReceiverInterface,\n                          receive: @escaping (Message, AnyAuthor) -> Void) -> Connection\n    {\n        receivers.add(receiver, for: self, receive: receive)\n    }\n    \n    internal func disconnectReceiver(with receiverKey: ReceiverKey)\n    {\n        receivers.releaseConnectionFromReceiver(with: receiverKey)\n        receivers.removeReceiver(with: receiverKey)\n    }\n    \n    internal func disconnectAllReceivers()\n    {\n        receivers.releaseAllConnectionsFromReceivers()\n        receivers.removeAll()\n    }\n    \n    // MARK: - MessengerInterface\n    \n    internal func unregisterConnection(with receiverKey: ReceiverKey)\n    {\n        receivers.removeReceiver(with: receiverKey)\n    }\n    \n    // MARK: - Receivers\n    \n    private let receivers = ReceiverPool<Message>()\n}\n"},{"name":"ObservableObject.swift","symbols":[{"range":{"start":{"line":0,"character":0},"end":{"line":3,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":10},"end":{"line":0,"character":19}},"name":"Messenger","children":[{"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":53}},"kind":7,"selectionRange":{"start":{"line":2,"character":15},"end":{"line":2,"character":24}},"name":"messenger"}]},{"range":{"start":{"line":5,"character":7},"end":{"line":16,"character":1}},"kind":3,"selectionRange":{"start":{"line":5,"character":17},"end":{"line":5,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":10,"character":4},"end":{"line":13,"character":5}},"kind":6,"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":64}},"name":"send(_:from:)","references":[{"range":{"start":{"line":29,"character":21},"end":{"line":29,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":55,"character":12},"end":{"line":55,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":30,"character":21},"end":{"line":30,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":30,"character":21},"end":{"line":30,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":215,"character":22},"end":{"line":215,"character":22}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":219,"character":22},"end":{"line":219,"character":22}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":164,"character":18},"end":{"line":164,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":167,"character":18},"end":{"line":167,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":184,"character":22},"end":{"line":184,"character":22}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":28,"character":17},"end":{"line":28,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":15,"character":18},"end":{"line":15,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":46,"character":35},"end":{"line":46,"character":35}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":52,"character":35},"end":{"line":52,"character":35}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":55,"character":18},"end":{"line":55,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":77,"character":18},"end":{"line":77,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":94,"character":18},"end":{"line":94,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":5,"character":18},"end":{"line":5,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableCache.swift"},{"range":{"start":{"line":19,"character":14},"end":{"line":19,"character":14}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":38,"character":14},"end":{"line":38,"character":14}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":58,"character":14},"end":{"line":58,"character":14}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":62,"character":14},"end":{"line":62,"character":14}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":112,"character":20},"end":{"line":112,"character":20}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":24,"character":18},"end":{"line":24,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}]},{"range":{"start":{"line":15,"character":13},"end":{"line":15,"character":68}},"kind":7,"selectionRange":{"start":{"line":15,"character":17},"end":{"line":15,"character":29}},"name":"latestAuthor"}]},{"range":{"start":{"line":23,"character":7},"end":{"line":34,"character":1}},"kind":11,"selectionRange":{"start":{"line":23,"character":16},"end":{"line":23,"character":32}},"name":"ObservableObject","references":[{"range":{"start":{"line":5,"character":24},"end":{"line":5,"character":24}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":13,"character":20},"end":{"line":13,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":24,"character":20},"end":{"line":24,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":37,"character":26},"end":{"line":37,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+New.swift"},{"range":{"start":{"line":0,"character":26},"end":{"line":0,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":0,"character":35},"end":{"line":0,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+FilterAuthor.swift"},{"range":{"start":{"line":2,"character":20},"end":{"line":2,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/Observer+ObservationTransformer.swift"},{"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"},{"range":{"start":{"line":5,"character":17},"end":{"line":5,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"},{"range":{"start":{"line":0,"character":29},"end":{"line":0,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Map.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+From.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject+StopObservation.swift"},{"range":{"start":{"line":0,"character":23},"end":{"line":0,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Filter.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+NotFrom.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Select.swift"},{"range":{"start":{"line":0,"character":45},"end":{"line":0,"character":45}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":32,"character":17},"end":{"line":32,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":0,"character":28},"end":{"line":0,"character":28}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":37,"character":31},"end":{"line":37,"character":31}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":46,"character":52},"end":{"line":46,"character":52}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Unwrap.swift"},{"range":{"start":{"line":17,"character":33},"end":{"line":17,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableCache.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Weak.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+UnwrapWithDefault.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/ObservableObject+Observer.swift"},{"range":{"start":{"line":0,"character":21},"end":{"line":0,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}],"children":[{"range":{"start":{"line":28,"character":4},"end":{"line":28,"character":45}},"kind":7,"selectionRange":{"start":{"line":28,"character":8},"end":{"line":28,"character":17}},"name":"messenger","references":[{"range":{"start":{"line":7,"character":19},"end":{"line":7,"character":19}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":16,"character":35},"end":{"line":16,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":27,"character":35},"end":{"line":27,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":41,"character":50},"end":{"line":41,"character":50}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"},{"range":{"start":{"line":15,"character":43},"end":{"line":15,"character":43}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject.swift"},{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ObservableObject+StopObservation.swift"},{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/ObservableObject+Observer.swift"}]}]}],"code":"extension Messenger: ObservableObject\n{\n    public var messenger: Messenger<Message> { self }\n}\n\npublic extension ObservableObject\n{\n    /**\n     Send a ``Message`` to all ``Observer``s. Optionally identify a message author.\n     */\n    func send(_ message: Message, from author: AnyAuthor? = nil)\n    {\n        messenger._send(message, from: author ?? self)\n    }\n    \n    internal var latestAuthor: AnyAuthor { messenger._latestAuthor }\n}\n\n/**\n An object that can be observed by multiple ``Observer``s\n \n ``Observer``s are responsible for starting an observation. Technically, observation means the observable object sends ``ObservableObject/Message``s to its observers via its ``ObservableObject/messenger``.\n */\npublic protocol ObservableObject: AnyAuthor\n{\n    /**\n     The ``Messenger`` that the `ObservableObject` uses to send ``Message``s to its ``Observer``s\n     */\n    var messenger: Messenger<Message> { get }\n    \n    /**\n     The type of message that the observable object can send to its ``Observer``s\n     */\n    associatedtype Message: Any\n}\n"},{"name":"Update.swift","symbols":[{"range":{"start":{"line":0,"character":0},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":10},"end":{"line":0,"character":16}},"name":"Update","children":[{"range":{"start":{"line":5,"character":11},"end":{"line":5,"character":44}},"kind":7,"selectionRange":{"start":{"line":5,"character":15},"end":{"line":5,"character":23}},"name":"isChange"}]},{"range":{"start":{"line":11,"character":7},"end":{"line":26,"character":1}},"kind":23,"selectionRange":{"start":{"line":11,"character":14},"end":{"line":11,"character":20}},"name":"Update","references":[{"range":{"start":{"line":3,"character":25},"end":{"line":3,"character":25}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+New.swift"},{"range":{"start":{"line":9,"character":57},"end":{"line":9,"character":57}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":55,"character":17},"end":{"line":55,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":5,"character":30},"end":{"line":5,"character":30}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ObservableCache.swift"},{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ObservableCache.swift"},{"range":{"start":{"line":3,"character":29},"end":{"line":3,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":9,"character":29},"end":{"line":9,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":15,"character":29},"end":{"line":15,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":55,"character":36},"end":{"line":55,"character":36}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":101,"character":27},"end":{"line":101,"character":27}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":103,"character":12},"end":{"line":103,"character":12}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":112,"character":25},"end":{"line":112,"character":25}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":117,"character":34},"end":{"line":117,"character":34}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":11,"character":21},"end":{"line":11,"character":26}},"kind":26,"selectionRange":{"start":{"line":11,"character":21},"end":{"line":11,"character":26}},"name":"Value","references":[{"range":{"start":{"line":0,"character":34},"end":{"line":0,"character":34}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":13,"character":33},"end":{"line":13,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":18,"character":23},"end":{"line":18,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":18,"character":37},"end":{"line":18,"character":37}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":24,"character":20},"end":{"line":24,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":25,"character":20},"end":{"line":25,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"}]},{"range":{"start":{"line":13,"character":11},"end":{"line":16,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":11},"end":{"line":13,"character":26}},"name":"init()","children":[{"range":{"start":{"line":13,"character":16},"end":{"line":13,"character":23}},"kind":26,"selectionRange":{"start":{"line":13,"character":16},"end":{"line":13,"character":23}},"name":"Wrapped"}]},{"range":{"start":{"line":18,"character":11},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":43}},"name":"init(_:_:)","references":[{"range":{"start":{"line":55,"character":17},"end":{"line":55,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ObservableCache.swift"},{"range":{"start":{"line":15,"character":13},"end":{"line":15,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":103,"character":12},"end":{"line":103,"character":12}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":112,"character":25},"end":{"line":112,"character":25}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}]},{"range":{"start":{"line":24,"character":11},"end":{"line":24,"character":25}},"kind":7,"selectionRange":{"start":{"line":24,"character":15},"end":{"line":24,"character":18}},"name":"old","references":[{"range":{"start":{"line":16,"character":34},"end":{"line":16,"character":34}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":126,"character":34},"end":{"line":126,"character":34}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":170,"character":49},"end":{"line":170,"character":49}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":5,"character":32},"end":{"line":5,"character":32}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"}]},{"range":{"start":{"line":25,"character":11},"end":{"line":25,"character":25}},"kind":7,"selectionRange":{"start":{"line":25,"character":15},"end":{"line":25,"character":18}},"name":"new","references":[{"range":{"start":{"line":17,"character":34},"end":{"line":17,"character":34}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":40,"character":30},"end":{"line":40,"character":30}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":127,"character":34},"end":{"line":127,"character":34}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":146,"character":51},"end":{"line":146,"character":51}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":5,"character":26},"end":{"line":5,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+New.swift"},{"range":{"start":{"line":35,"character":15},"end":{"line":35,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":52,"character":46},"end":{"line":52,"character":46}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":72,"character":15},"end":{"line":72,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":172,"character":32},"end":{"line":172,"character":32}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":15,"character":71},"end":{"line":15,"character":71}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":31,"character":83},"end":{"line":31,"character":83}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":5,"character":17},"end":{"line":5,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":11,"character":17},"end":{"line":11,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":17,"character":17},"end":{"line":17,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":74,"character":47},"end":{"line":74,"character":47}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":88,"character":47},"end":{"line":88,"character":47}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":100,"character":39},"end":{"line":100,"character":39}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":193,"character":44},"end":{"line":193,"character":44}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":5,"character":39},"end":{"line":5,"character":39}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"},{"range":{"start":{"line":21,"character":13},"end":{"line":21,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Update.swift"}]}]}],"code":"extension Update: Equatable where Value : Equatable\n{\n    /**\n     If `Value` is `Equatable`, this indicates whether the `Update` represents a value change\n     */\n    public var isChange: Bool { old != new }\n}\n\n/**\n Intended as a value update ``ObservableObject/Message`` and employed in that way by ``Variable``\n */\npublic struct Update<Value>\n{\n    public init<Wrapped>() where Value == Wrapped?\n    {\n        self.init(nil, nil)\n    }\n    \n    public init(_ old: Value, _ new: Value)\n    {\n        self.old = old\n        self.new = new\n    }\n    \n    public let old: Value\n    public let new: Value\n}\n"},{"name":"ReceiverPool.swift","symbols":[{"range":{"start":{"line":2,"character":0},"end":{"line":104,"character":1}},"kind":5,"selectionRange":{"start":{"line":2,"character":6},"end":{"line":2,"character":18}},"name":"ReceiverPool","references":[{"range":{"start":{"line":86,"character":28},"end":{"line":86,"character":28}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}],"children":[{"range":{"start":{"line":2,"character":19},"end":{"line":2,"character":26}},"kind":26,"selectionRange":{"start":{"line":2,"character":19},"end":{"line":2,"character":26}},"name":"Message","references":[{"range":{"start":{"line":9,"character":28},"end":{"line":9,"character":28}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":24,"character":33},"end":{"line":24,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":77,"character":57},"end":{"line":77,"character":57}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":83,"character":32},"end":{"line":83,"character":32}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":102,"character":31},"end":{"line":102,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}]},{"range":{"start":{"line":4,"character":4},"end":{"line":7,"character":5}},"kind":6,"selectionRange":{"start":{"line":4,"character":4},"end":{"line":4,"character":10}},"name":"deinit"},{"range":{"start":{"line":9,"character":4},"end":{"line":15,"character":5}},"kind":6,"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":60}},"name":"receive(_:from:)","references":[{"range":{"start":{"line":36,"character":22},"end":{"line":36,"character":22}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":17,"character":4},"end":{"line":20,"character":5}},"kind":6,"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":48}},"name":"contains(_:)","references":[{"range":{"start":{"line":50,"character":18},"end":{"line":50,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":22,"character":4},"end":{"line":48,"character":5}},"kind":6,"selectionRange":{"start":{"line":22,"character":9},"end":{"line":24,"character":61}},"name":"add(_:for:receive:)","references":[{"range":{"start":{"line":62,"character":18},"end":{"line":62,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}],"children":[{"range":{"start":{"line":26,"character":15},"end":{"line":26,"character":40}},"kind":13,"selectionRange":{"start":{"line":26,"character":15},"end":{"line":26,"character":40}},"name":"existingReceiverReference"},{"range":{"start":{"line":28,"character":22},"end":{"line":28,"character":32}},"kind":13,"selectionRange":{"start":{"line":28,"character":22},"end":{"line":28,"character":32}},"name":"connection"},{"range":{"start":{"line":33,"character":16},"end":{"line":33,"character":85}},"kind":13,"selectionRange":{"start":{"line":33,"character":20},"end":{"line":33,"character":30}},"name":"connection"},{"range":{"start":{"line":43,"character":12},"end":{"line":43,"character":81}},"kind":13,"selectionRange":{"start":{"line":43,"character":16},"end":{"line":43,"character":26}},"name":"connection"},{"range":{"start":{"line":44,"character":12},"end":{"line":44,"character":87}},"kind":13,"selectionRange":{"start":{"line":44,"character":16},"end":{"line":44,"character":25}},"name":"reference"}]},{"range":{"start":{"line":50,"character":4},"end":{"line":53,"character":5}},"kind":6,"selectionRange":{"start":{"line":50,"character":9},"end":{"line":50,"character":69}},"name":"releaseConnectionFromReceiver(with:)","references":[{"range":{"start":{"line":67,"character":18},"end":{"line":67,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":55,"character":4},"end":{"line":61,"character":5}},"kind":6,"selectionRange":{"start":{"line":55,"character":9},"end":{"line":55,"character":45}},"name":"releaseAllConnectionsFromReceivers()","references":[{"range":{"start":{"line":73,"character":18},"end":{"line":73,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":63,"character":4},"end":{"line":66,"character":5}},"kind":6,"selectionRange":{"start":{"line":63,"character":9},"end":{"line":63,"character":54}},"name":"removeReceiver(with:)","references":[{"range":{"start":{"line":68,"character":18},"end":{"line":68,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"},{"range":{"start":{"line":81,"character":18},"end":{"line":81,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":68,"character":4},"end":{"line":71,"character":5}},"kind":6,"selectionRange":{"start":{"line":68,"character":9},"end":{"line":68,"character":20}},"name":"removeAll()","references":[{"range":{"start":{"line":74,"character":18},"end":{"line":74,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/Messenger.swift"}]},{"range":{"start":{"line":73,"character":12},"end":{"line":73,"character":72}},"kind":7,"selectionRange":{"start":{"line":73,"character":16},"end":{"line":73,"character":34}},"name":"receiverReferences","references":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":26,"character":43},"end":{"line":26,"character":43}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":45,"character":12},"end":{"line":45,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":52,"character":8},"end":{"line":52,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":57,"character":8},"end":{"line":57,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":65,"character":8},"end":{"line":65,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":70,"character":8},"end":{"line":70,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}]},{"range":{"start":{"line":75,"character":12},"end":{"line":103,"character":5}},"kind":5,"selectionRange":{"start":{"line":75,"character":18},"end":{"line":75,"character":35}},"name":"ReceiverReference","references":[{"range":{"start":{"line":44,"character":28},"end":{"line":44,"character":28}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":73,"character":52},"end":{"line":73,"character":52}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}],"children":[{"range":{"start":{"line":77,"character":8},"end":{"line":81,"character":9}},"kind":6,"selectionRange":{"start":{"line":77,"character":8},"end":{"line":77,"character":85}},"name":"init(connection:receive:)","references":[{"range":{"start":{"line":44,"character":28},"end":{"line":44,"character":28}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}]},{"range":{"start":{"line":83,"character":8},"end":{"line":99,"character":9}},"kind":6,"selectionRange":{"start":{"line":83,"character":13},"end":{"line":83,"character":64}},"name":"receive(_:from:)","references":[{"range":{"start":{"line":13,"character":15},"end":{"line":13,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}],"children":[{"range":{"start":{"line":85,"character":22},"end":{"line":85,"character":32}},"kind":13,"selectionRange":{"start":{"line":85,"character":22},"end":{"line":85,"character":32}},"name":"connection"}]},{"range":{"start":{"line":101,"character":13},"end":{"line":101,"character":40}},"kind":7,"selectionRange":{"start":{"line":101,"character":17},"end":{"line":101,"character":27}},"name":"connection","references":[{"range":{"start":{"line":6,"character":47},"end":{"line":6,"character":47}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":19,"character":42},"end":{"line":19,"character":42}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":28,"character":61},"end":{"line":28,"character":61}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":34,"character":42},"end":{"line":34,"character":42}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":52,"character":41},"end":{"line":52,"character":41}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":59,"character":15},"end":{"line":59,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":79,"character":17},"end":{"line":79,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":85,"character":35},"end":{"line":85,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}]},{"range":{"start":{"line":102,"character":8},"end":{"line":102,"character":67}},"kind":7,"selectionRange":{"start":{"line":102,"character":12},"end":{"line":102,"character":27}},"name":"messageHandlers","references":[{"range":{"start":{"line":32,"character":42},"end":{"line":32,"character":42}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":38,"character":38},"end":{"line":38,"character":38}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":80,"character":17},"end":{"line":80,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"},{"range":{"start":{"line":95,"character":12},"end":{"line":95,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/ObservableObject/ReceiverPool.swift"}]}]}]}],"code":"import SwiftyToolz\n\nclass ReceiverPool<Message>\n{\n    deinit\n    {\n        receiverReferences.values.forEach { $0.connection?.releaseFromReceiver() }\n    }\n    \n    func receive(_ message: Message, from author: AnyAuthor)\n    {\n        receiverReferences.values.forEach\n        {\n            $0.receive(message, from: author)\n        }\n    }\n    \n    func contains(_ receiver: ReceiverInterface) -> Bool\n    {\n        receiverReferences[receiver.key]?.connection?.receiver === receiver\n    }\n    \n    func add(_ receiver: ReceiverInterface,\n             for messenger: MessengerInterface,\n             receive: @escaping (Message, AnyAuthor) -> Void) -> Connection\n    {\n        if let existingReceiverReference = receiverReferences[receiver.key]\n        {\n            guard let connection = existingReceiverReference.connection else\n            {\n                log(error: \"Connection is dead, meaning its owning receiver is dead, which shouldn't happen since receivers, before they die, unregister their connections from the respective messengers.\")\n                \n                existingReceiverReference.messageHandlers = [receive]\n                let connection = Connection(messenger: messenger, receiver: receiver)\n                existingReceiverReference.connection = connection\n                return connection\n            }\n\n            existingReceiverReference.messageHandlers += receive\n            return connection\n        }\n        else\n        {\n            let connection = Connection(messenger: messenger, receiver: receiver)\n            let reference = ReceiverReference(connection: connection, receive: receive)\n            receiverReferences[receiver.key] = reference\n            return connection\n        }\n    }\n    \n    func releaseConnectionFromReceiver(with receiverKey: ReceiverKey)\n    {\n        receiverReferences[receiverKey]?.connection?.releaseFromReceiver()\n    }\n    \n    func releaseAllConnectionsFromReceivers()\n    {\n        receiverReferences.values.forEach\n        {\n            $0.connection?.releaseFromReceiver()\n        }\n    }\n    \n    func removeReceiver(with receiverKey: ReceiverKey)\n    {\n        receiverReferences[receiverKey] = nil\n    }\n    \n    func removeAll()\n    {\n        receiverReferences.removeAll()\n    }\n    \n    private var receiverReferences = [ReceiverKey : ReceiverReference]()\n    \n    private class ReceiverReference\n    {\n        init(connection: Connection, receive: @escaping (Message, AnyAuthor) -> Void)\n        {\n            self.connection = connection\n            self.messageHandlers = [receive]\n        }\n        \n        func receive(_ message: Message, from author: AnyAuthor)\n        {\n            guard let connection = connection else\n            {\n                return log(error: \"Tried to send message via dead connection.\")\n            }\n            \n            guard connection.receiver != nil else\n            {\n                return log(error: \"Tried to send message to dead receiver.\")\n            }\n            \n            messageHandlers.forEach\n            {\n                receive in receive(message, author)\n            }\n        }\n        \n        weak var connection: Connection?\n        var messageHandlers: [(Message, _ from: AnyAuthor) -> Void]\n    }\n}\n"}]},{"name":"Variable","files":[{"name":"Variable+PropertyWrapper.swift","symbols":[{"range":{"start":{"line":14,"character":7},"end":{"line":30,"character":1}},"kind":23,"selectionRange":{"start":{"line":14,"character":14},"end":{"line":14,"character":24}},"name":"Observable","references":[{"range":{"start":{"line":117,"character":9},"end":{"line":117,"character":9}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":10,"character":9},"end":{"line":10,"character":9}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":26,"character":9},"end":{"line":26,"character":9}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":42,"character":9},"end":{"line":42,"character":9}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"}],"children":[{"range":{"start":{"line":14,"character":25},"end":{"line":14,"character":41}},"kind":26,"selectionRange":{"start":{"line":14,"character":25},"end":{"line":14,"character":30}},"name":"Value","references":[{"range":{"start":{"line":16,"character":35},"end":{"line":16,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"},{"range":{"start":{"line":18,"character":29},"end":{"line":18,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"},{"range":{"start":{"line":24,"character":30},"end":{"line":24,"character":30}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"},{"range":{"start":{"line":29,"character":30},"end":{"line":29,"character":30}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"}]},{"range":{"start":{"line":16,"character":11},"end":{"line":16,"character":54}},"kind":7,"selectionRange":{"start":{"line":16,"character":15},"end":{"line":16,"character":29}},"name":"projectedValue"},{"range":{"start":{"line":18,"character":11},"end":{"line":22,"character":5}},"kind":7,"selectionRange":{"start":{"line":18,"character":15},"end":{"line":18,"character":27}},"name":"wrappedValue"},{"range":{"start":{"line":24,"character":11},"end":{"line":27,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":11},"end":{"line":24,"character":36}},"name":"init(wrappedValue:)","references":[{"range":{"start":{"line":117,"character":9},"end":{"line":117,"character":9}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":10,"character":9},"end":{"line":10,"character":9}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":26,"character":9},"end":{"line":26,"character":9}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":42,"character":9},"end":{"line":42,"character":9}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"}]},{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":36}},"kind":7,"selectionRange":{"start":{"line":29,"character":16},"end":{"line":29,"character":24}},"name":"variable","references":[{"range":{"start":{"line":16,"character":44},"end":{"line":16,"character":44}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"},{"range":{"start":{"line":20,"character":14},"end":{"line":20,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"},{"range":{"start":{"line":21,"character":14},"end":{"line":21,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"},{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"}]}]}],"code":"/**\n Make an `Equatable` variable property observable by ``Observer``s\n \n The ``projectedValue`` provides the actual ``Variable`` so it can be observed:\n \n ```swift\n @Observable var number = 7\n \n observer.observe($number) { numberUpdate in\n     let numberChange = numberUpdate.new - numberUpdate.old\n }\n ```\n */\n@propertyWrapper\npublic struct Observable<Value: Equatable>\n{\n    public var projectedValue: Var<Value> { variable }\n    \n    public var wrappedValue: Value\n    {\n        get { variable.value }\n        set { variable.value = newValue }\n    }\n    \n    public init(wrappedValue: Value)\n    {\n        variable = Var(wrappedValue)\n    }\n    \n    private let variable: Var<Value>\n}\n"},{"name":"Variable+ObservableCache.swift","symbols":[{"range":{"start":{"line":0,"character":0},"end":{"line":9,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":10},"end":{"line":0,"character":18}},"name":"Variable","children":[{"range":{"start":{"line":5,"character":11},"end":{"line":8,"character":5}},"kind":7,"selectionRange":{"start":{"line":5,"character":15},"end":{"line":5,"character":28}},"name":"latestMessage"}]}],"code":"extension Variable: ObservableCache\n{\n    /**\n     An ``Update`` in which ``Update/old`` and ``Update/new`` both hold the ``Variable``'s current ``Variable/value``\n     */\n    public var latestMessage: Update<Value>\n    {\n        Update(value, value)\n    }\n}\n"},{"name":"Variable+ValueAssignment.swift","symbols":[{"range":{"start":{"line":2,"character":7},"end":{"line":5,"character":1}},"kind":12,"selectionRange":{"start":{"line":2,"character":12},"end":{"line":2,"character":58}},"name":"<-(_:_:)","references":[{"range":{"start":{"line":20,"character":13},"end":{"line":20,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":30,"character":13},"end":{"line":30,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":45,"character":13},"end":{"line":45,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":91,"character":19},"end":{"line":91,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":92,"character":21},"end":{"line":92,"character":21}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":40,"character":15},"end":{"line":40,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":58,"character":17},"end":{"line":58,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":80,"character":17},"end":{"line":80,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":99,"character":17},"end":{"line":99,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":119,"character":17},"end":{"line":119,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":138,"character":13},"end":{"line":138,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":157,"character":13},"end":{"line":157,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":176,"character":17},"end":{"line":176,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":180,"character":17},"end":{"line":180,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":197,"character":13},"end":{"line":197,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":201,"character":13},"end":{"line":201,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":235,"character":15},"end":{"line":235,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":236,"character":15},"end":{"line":236,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":237,"character":15},"end":{"line":237,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":238,"character":15},"end":{"line":238,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":239,"character":15},"end":{"line":239,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":240,"character":15},"end":{"line":240,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":117,"character":13},"end":{"line":117,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":121,"character":13},"end":{"line":121,"character":13}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":139,"character":15},"end":{"line":139,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":140,"character":15},"end":{"line":140,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":141,"character":15},"end":{"line":141,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":142,"character":15},"end":{"line":142,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":143,"character":15},"end":{"line":143,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":144,"character":15},"end":{"line":144,"character":15}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":2,"character":15},"end":{"line":2,"character":20}},"kind":26,"selectionRange":{"start":{"line":2,"character":15},"end":{"line":2,"character":20}},"name":"Value"}]}],"code":"infix operator <-: AssignmentPrecedence\n\npublic func <-<Value>(variable: Var<Value>?, value: Value)\n{\n    variable?.value = value\n}\n"},{"name":"Variable.swift","symbols":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":46}},"kind":3,"selectionRange":{"start":{"line":2,"character":10},"end":{"line":2,"character":13}},"name":"Var"},{"range":{"start":{"line":9,"character":13},"end":{"line":62,"character":1}},"kind":5,"selectionRange":{"start":{"line":9,"character":19},"end":{"line":9,"character":27}},"name":"Variable","references":[{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+Comparable.swift"},{"range":{"start":{"line":2,"character":31},"end":{"line":2,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+Comparable.swift"},{"range":{"start":{"line":3,"character":31},"end":{"line":3,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+Comparable.swift"},{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":4,"character":23},"end":{"line":4,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":28,"character":32},"end":{"line":28,"character":32}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":29,"character":32},"end":{"line":29,"character":32}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ObservableCache.swift"}],"children":[{"range":{"start":{"line":9,"character":28},"end":{"line":9,"character":44}},"kind":26,"selectionRange":{"start":{"line":9,"character":28},"end":{"line":9,"character":33}},"name":"Value","references":[{"range":{"start":{"line":0,"character":32},"end":{"line":0,"character":32}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+Comparable.swift"},{"range":{"start":{"line":2,"character":40},"end":{"line":2,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+Comparable.swift"},{"range":{"start":{"line":3,"character":40},"end":{"line":3,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+Comparable.swift"},{"range":{"start":{"line":2,"character":29},"end":{"line":2,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":9,"character":64},"end":{"line":9,"character":64}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":13,"character":45},"end":{"line":13,"character":45}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":18,"character":25},"end":{"line":18,"character":25}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":28,"character":41},"end":{"line":28,"character":41}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":29,"character":41},"end":{"line":29,"character":41}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":39,"character":22},"end":{"line":39,"character":22}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":48,"character":29},"end":{"line":48,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":61,"character":29},"end":{"line":61,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":5,"character":37},"end":{"line":5,"character":37}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ObservableCache.swift"}]},{"range":{"start":{"line":13,"character":23},"end":{"line":16,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":23},"end":{"line":13,"character":38}},"name":"init()","children":[{"range":{"start":{"line":13,"character":28},"end":{"line":13,"character":35}},"kind":26,"selectionRange":{"start":{"line":13,"character":28},"end":{"line":13,"character":35}},"name":"Wrapped"}]},{"range":{"start":{"line":18,"character":11},"end":{"line":21,"character":5}},"kind":6,"selectionRange":{"start":{"line":18,"character":11},"end":{"line":18,"character":31}},"name":"init(_:)","references":[{"range":{"start":{"line":56,"character":23},"end":{"line":56,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":140,"character":19},"end":{"line":140,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":15,"character":13},"end":{"line":15,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":9,"character":21},"end":{"line":9,"character":21}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":32,"character":21},"end":{"line":32,"character":21}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":98,"character":23},"end":{"line":98,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":100,"character":23},"end":{"line":100,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":233,"character":26},"end":{"line":233,"character":26}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":236,"character":27},"end":{"line":236,"character":27}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":243,"character":42},"end":{"line":243,"character":42}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":26,"character":19},"end":{"line":26,"character":19}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"}]},{"range":{"start":{"line":28,"character":11},"end":{"line":32,"character":5}},"kind":6,"selectionRange":{"start":{"line":28,"character":23},"end":{"line":29,"character":48}},"name":"==(_:_:)"},{"range":{"start":{"line":39,"character":11},"end":{"line":43,"character":5}},"kind":7,"selectionRange":{"start":{"line":39,"character":15},"end":{"line":39,"character":20}},"name":"value","references":[{"range":{"start":{"line":32,"character":26},"end":{"line":32,"character":26}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":47,"character":28},"end":{"line":47,"character":28}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":69,"character":47},"end":{"line":69,"character":47}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":105,"character":49},"end":{"line":105,"character":49}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":106,"character":51},"end":{"line":106,"character":51}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":5,"character":12},"end":{"line":5,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+Comparable.swift"},{"range":{"start":{"line":5,"character":24},"end":{"line":5,"character":24}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+Comparable.swift"},{"range":{"start":{"line":7,"character":15},"end":{"line":7,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ObservableCache.swift"},{"range":{"start":{"line":7,"character":22},"end":{"line":7,"character":22}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ObservableCache.swift"},{"range":{"start":{"line":238,"character":43},"end":{"line":238,"character":43}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+ValueAssignment.swift"},{"range":{"start":{"line":20,"character":23},"end":{"line":20,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"},{"range":{"start":{"line":21,"character":23},"end":{"line":21,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable+PropertyWrapper.swift"}]},{"range":{"start":{"line":48,"character":11},"end":{"line":57,"character":5}},"kind":6,"selectionRange":{"start":{"line":48,"character":16},"end":{"line":48,"character":57}},"name":"set(_:as:)","references":[{"range":{"start":{"line":42,"character":14},"end":{"line":42,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"}],"children":[{"range":{"start":{"line":50,"character":8},"end":{"line":50,"character":34}},"kind":13,"selectionRange":{"start":{"line":50,"character":12},"end":{"line":50,"character":20}},"name":"oldValue"}]},{"range":{"start":{"line":59,"character":12},"end":{"line":59,"character":67}},"kind":10,"selectionRange":{"start":{"line":59,"character":17},"end":{"line":59,"character":27}},"name":"CodingKeys","children":[{"range":{"start":{"line":59,"character":54},"end":{"line":59,"character":65}},"kind":22,"selectionRange":{"start":{"line":59,"character":54},"end":{"line":59,"character":65}},"name":"storedValue"}]},{"range":{"start":{"line":61,"character":12},"end":{"line":61,"character":34}},"kind":7,"selectionRange":{"start":{"line":61,"character":16},"end":{"line":61,"character":27}},"name":"storedValue","references":[{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":31,"character":12},"end":{"line":31,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":31,"character":31},"end":{"line":31,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":41,"character":14},"end":{"line":41,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":50,"character":23},"end":{"line":50,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"},{"range":{"start":{"line":54,"character":12},"end":{"line":54,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Variable/Variable.swift"}]}]}],"code":"import SwiftyToolz\n\nextension Var: Codable where Value: Codable {}\n\npublic typealias Var = Variable\n\n/**\n An observable wrapper object that makes changes of its contained `Value` observable\n */\npublic final class Variable<Value: Equatable>: Messenger<Update<Value>>, Equatable\n{\n    // MARK: - Initialization\n    \n    public convenience init<Wrapped>() where Value == Wrapped?\n    {\n        self.init(nil)\n    }\n    \n    public init(_ value: Value)\n    {\n        storedValue = value\n    }\n    \n    // MARK: - Equatable\n    \n    /**\n     Two `Variable`s count as equal when their ``value``s are equal\n     */\n    public static func == (lhs: Variable<Value>,\n                           rhs: Variable<Value>) -> Bool\n    {\n        lhs.storedValue == rhs.storedValue\n    }\n    \n    // MARK: - Value\n    \n    /**\n     The actual stored `Value`. The `Variable` sends an ``Update`` when its `value` changes\n     */\n    public var value: Value\n    {\n        get { storedValue }\n        set { set(newValue, as: self) }\n    }\n    \n    /**\n     Set ``value`` itentifying the author of the potentially triggered ``Update`` message\n     */\n    public func set(_ value: Value, as author: AnyAuthor)\n    {\n        let oldValue = storedValue\n        \n        if value != oldValue\n        {\n            storedValue = value\n            send(Update(oldValue, value), from: author)\n        }\n    }\n    \n    private enum CodingKeys: String, CodingKey { case storedValue }\n    \n    private var storedValue: Value\n}\n"},{"name":"Variable+Comparable.swift","symbols":[{"range":{"start":{"line":0,"character":0},"end":{"line":7,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":10},"end":{"line":0,"character":13}},"name":"Var","children":[{"range":{"start":{"line":2,"character":11},"end":{"line":6,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":23},"end":{"line":3,"character":47}},"name":"<(_:_:)"}]}],"code":"extension Var: Comparable where Value: Comparable\n{\n    public static func < (lhs: Variable<Value>,\n                          rhs: Variable<Value>) -> Bool\n    {\n        lhs.value < rhs.value\n    }\n}\n"}]},{"name":"Observer","files":[{"name":"Observer.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":52,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":25}},"name":"Observer","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":8,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":58}},"name":"isObserving(_:)","children":[{"range":{"start":{"line":5,"character":21},"end":{"line":5,"character":40}},"kind":26,"selectionRange":{"start":{"line":5,"character":21},"end":{"line":5,"character":22}},"name":"O"}]},{"range":{"start":{"line":13,"character":4},"end":{"line":19,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":9},"end":{"line":14,"character":88}},"name":"observe(_:receive:)","references":[{"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":22,"character":8},"end":{"line":22,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":6,"character":28},"end":{"line":6,"character":28}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/Observer+ObservationTransformer.swift"},{"range":{"start":{"line":22,"character":8},"end":{"line":22,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":22,"character":8},"end":{"line":22,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":70,"character":17},"end":{"line":70,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":32,"character":8},"end":{"line":32,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}],"children":[{"range":{"start":{"line":13,"character":17},"end":{"line":13,"character":36}},"kind":26,"selectionRange":{"start":{"line":13,"character":17},"end":{"line":13,"character":18}},"name":"O"},{"range":{"start":{"line":16,"character":8},"end":{"line":16,"character":44}},"kind":13,"selectionRange":{"start":{"line":16,"character":12},"end":{"line":16,"character":21}},"name":"messenger"},{"range":{"start":{"line":17,"character":8},"end":{"line":17,"character":70}},"kind":13,"selectionRange":{"start":{"line":17,"character":12},"end":{"line":17,"character":22}},"name":"connection"}]},{"range":{"start":{"line":24,"character":4},"end":{"line":30,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":9},"end":{"line":25,"character":77}},"name":"observe(_:receive:)","references":[{"range":{"start":{"line":14,"character":17},"end":{"line":14,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":38,"character":17},"end":{"line":38,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":124,"character":17},"end":{"line":124,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":146,"character":17},"end":{"line":146,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":57,"character":17},"end":{"line":57,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":64,"character":17},"end":{"line":64,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":112,"character":17},"end":{"line":112,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":134,"character":17},"end":{"line":134,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":158,"character":17},"end":{"line":158,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":179,"character":17},"end":{"line":179,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":199,"character":17},"end":{"line":199,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":220,"character":17},"end":{"line":220,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":11,"character":17},"end":{"line":11,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":28,"character":17},"end":{"line":28,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":43,"character":18},"end":{"line":43,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":49,"character":18},"end":{"line":49,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":89,"character":17},"end":{"line":89,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":90,"character":17},"end":{"line":90,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":8}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":50,"character":8},"end":{"line":50,"character":8}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":13,"character":17},"end":{"line":13,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":53,"character":17},"end":{"line":53,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":78,"character":17},"end":{"line":78,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":24,"character":17},"end":{"line":24,"character":36}},"kind":26,"selectionRange":{"start":{"line":24,"character":17},"end":{"line":24,"character":18}},"name":"O"},{"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":44}},"kind":13,"selectionRange":{"start":{"line":27,"character":12},"end":{"line":27,"character":21}},"name":"messenger"},{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":70}},"kind":13,"selectionRange":{"start":{"line":28,"character":12},"end":{"line":28,"character":22}},"name":"connection"}]},{"range":{"start":{"line":37,"character":4},"end":{"line":43,"character":5}},"kind":6,"selectionRange":{"start":{"line":37,"character":9},"end":{"line":37,"character":61}},"name":"stopObserving(_:)","references":[{"range":{"start":{"line":14,"character":12},"end":{"line":14,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":15,"character":12},"end":{"line":15,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":15,"character":12},"end":{"line":15,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":15,"character":12},"end":{"line":15,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":25,"character":12},"end":{"line":25,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":25,"character":12},"end":{"line":25,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":13,"character":12},"end":{"line":13,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}],"children":[{"range":{"start":{"line":37,"character":23},"end":{"line":37,"character":42}},"kind":26,"selectionRange":{"start":{"line":37,"character":23},"end":{"line":37,"character":24}},"name":"O"}]},{"range":{"start":{"line":48,"character":4},"end":{"line":51,"character":5}},"kind":6,"selectionRange":{"start":{"line":48,"character":9},"end":{"line":48,"character":24}},"name":"stopObserving()"}]},{"range":{"start":{"line":59,"character":7},"end":{"line":71,"character":1}},"kind":11,"selectionRange":{"start":{"line":59,"character":16},"end":{"line":59,"character":24}},"name":"Observer","references":[{"range":{"start":{"line":153,"character":24},"end":{"line":153,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":0,"character":78},"end":{"line":0,"character":78}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":0,"character":76},"end":{"line":0,"character":76}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/Observer+ObservationTransformer.swift"},{"range":{"start":{"line":0,"character":70},"end":{"line":0,"character":70}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":247,"character":24},"end":{"line":247,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":257,"character":24},"end":{"line":257,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":0,"character":69},"end":{"line":0,"character":69}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":99,"character":24},"end":{"line":99,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":4}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":3,"character":4},"end":{"line":3,"character":4}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":15,"character":72},"end":{"line":15,"character":72}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":46,"character":82},"end":{"line":46,"character":82}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":120,"character":24},"end":{"line":120,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":5,"character":40},"end":{"line":5,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/ObservableObject+Observer.swift"},{"range":{"start":{"line":0,"character":62},"end":{"line":0,"character":62}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}],"children":[{"range":{"start":{"line":70,"character":4},"end":{"line":70,"character":34}},"kind":7,"selectionRange":{"start":{"line":70,"character":8},"end":{"line":70,"character":16}},"name":"receiver","references":[{"range":{"start":{"line":7,"character":45},"end":{"line":7,"character":45}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":17,"character":43},"end":{"line":17,"character":43}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":18,"character":8},"end":{"line":18,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":28,"character":43},"end":{"line":28,"character":43}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":29,"character":8},"end":{"line":29,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":41,"character":12},"end":{"line":41,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":50,"character":8},"end":{"line":50,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":7,"character":64},"end":{"line":7,"character":64}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/ObservableObject+Observer.swift"}]}]}],"code":"public extension Observer\n{\n    /**\n     Whether the `Observer` has at least one observation of the ``ObservableObject`` going\n     */\n    func isObserving<O: ObservableObject>(_ observable: O) -> Bool\n    {\n        observable.messenger.isConnected(to: receiver)\n    }\n    \n    /**\n     Receive the ``ObservableObject``'s future ``ObservableObject/Message``s together with their authors\n     */\n    func observe<O: ObservableObject>(_ observable: O,\n                                      receive: @escaping (O.Message, AnyAuthor) -> Void)\n    {\n        let messenger = observable.messenger\n        let connection = messenger.connect(receiver, receive: receive)\n        receiver.retain(connection)\n    }\n    \n    /**\n     Receive the ``ObservableObject``'s future ``ObservableObject/Message``s\n     */\n    func observe<O: ObservableObject>(_ observable: O,\n                                      receive: @escaping (O.Message) -> Void)\n    {\n        let messenger = observable.messenger\n        let connection = messenger.connect(receiver, receive: receive)\n        receiver.retain(connection)\n    }\n    \n    /**\n     End all the ``Observer``'s observations of this particular observed ``ObservableObject``\n     \n     Note that one ``Observer`` can have multiple distinct ongoing observations of the same ``ObservableObject``\n     */\n    func stopObserving<O: ObservableObject>(_ observable: O?)\n    {\n        observable.forSome\n        {\n            receiver.disconnectMessenger(with: $0.messenger.key)\n        }\n    }\n    \n    /**\n     End all the ``Observer``'s observations of all its observed ``ObservableObject``s\n     */\n    func stopObserving()\n    {\n        receiver.disconnectAllMessengers()\n    }\n}\n\n/**\n An object that can observe multiple ``ObservableObject``s\n \n One `Observer` can have multiple distinct ongoing observations of the same ``ObservableObject``\n */\npublic protocol Observer: AnyObject\n{\n    /**\n     Required for receiving ``ObservableObject/Message``s from observed ``ObservableObject``s\n     \n     The ``Observer`` just holds on to its `receiver` strongly, so the `receiver`'s lifetime is bound to the ``Observer``s lifetime.\n     \n     Be careful to keep the `Observer` alive as long as it's supposed to observe, because when it dies, all its observations end as well.\n     \n     And the other way around: Be careful to not leak an `Observer` into memory, because that would also leak all its ongoing observations, if the corresponding ``ObservableObject``s don't explicitly end them.\n     */\n    var receiver: Receiver { get }\n}\n"},{"name":"Receiver.swift","symbols":[{"range":{"start":{"line":2,"character":0},"end":{"line":2,"character":40}},"kind":3,"selectionRange":{"start":{"line":2,"character":10},"end":{"line":2,"character":18}},"name":"Receiver"},{"range":{"start":{"line":7,"character":13},"end":{"line":52,"character":1}},"kind":5,"selectionRange":{"start":{"line":7,"character":19},"end":{"line":7,"character":27}},"name":"Receiver","references":[{"range":{"start":{"line":155,"character":23},"end":{"line":155,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":70,"character":18},"end":{"line":70,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":34,"character":26},"end":{"line":34,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":37,"character":26},"end":{"line":37,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":37,"character":26},"end":{"line":37,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":249,"character":23},"end":{"line":249,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":259,"character":23},"end":{"line":259,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":34,"character":26},"end":{"line":34,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":101,"character":23},"end":{"line":101,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":40,"character":26},"end":{"line":40,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":40,"character":26},"end":{"line":40,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":26}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":53,"character":26},"end":{"line":53,"character":26}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":122,"character":23},"end":{"line":122,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}],"children":[{"range":{"start":{"line":11,"character":11},"end":{"line":11,"character":20}},"kind":6,"selectionRange":{"start":{"line":11,"character":11},"end":{"line":11,"character":17}},"name":"init()","references":[{"range":{"start":{"line":155,"character":23},"end":{"line":155,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/VariableTests.swift"},{"range":{"start":{"line":34,"character":26},"end":{"line":34,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":37,"character":26},"end":{"line":37,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":37,"character":26},"end":{"line":37,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":249,"character":23},"end":{"line":249,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":259,"character":23},"end":{"line":259,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":34,"character":26},"end":{"line":34,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":101,"character":23},"end":{"line":101,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/BasicTests.swift"},{"range":{"start":{"line":40,"character":26},"end":{"line":40,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":40,"character":26},"end":{"line":40,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":23,"character":26},"end":{"line":23,"character":26}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":53,"character":26},"end":{"line":53,"character":26}},"filePathRelativeToRoot":"Code/CombineObserver/SwiftObserver+Combine.swift"},{"range":{"start":{"line":122,"character":23},"end":{"line":122,"character":23}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"},{"range":{"start":{"line":28,"character":26},"end":{"line":28,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}]},{"range":{"start":{"line":13,"character":4},"end":{"line":16,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":4},"end":{"line":13,"character":10}},"name":"deinit"},{"range":{"start":{"line":20,"character":13},"end":{"line":24,"character":5}},"kind":6,"selectionRange":{"start":{"line":20,"character":18},"end":{"line":20,"character":70}},"name":"disconnectMessenger(with:)","references":[{"range":{"start":{"line":41,"character":21},"end":{"line":41,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"}]},{"range":{"start":{"line":26,"character":13},"end":{"line":30,"character":5}},"kind":6,"selectionRange":{"start":{"line":26,"character":18},"end":{"line":26,"character":43}},"name":"disconnectAllMessengers()","references":[{"range":{"start":{"line":50,"character":17},"end":{"line":50,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"}]},{"range":{"start":{"line":32,"character":13},"end":{"line":40,"character":5}},"kind":6,"selectionRange":{"start":{"line":32,"character":18},"end":{"line":32,"character":50}},"name":"retain(_:)","references":[{"range":{"start":{"line":18,"character":17},"end":{"line":18,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"},{"range":{"start":{"line":29,"character":17},"end":{"line":29,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Observer.swift"}]},{"range":{"start":{"line":44,"character":13},"end":{"line":47,"character":5}},"kind":6,"selectionRange":{"start":{"line":44,"character":18},"end":{"line":44,"character":68}},"name":"releaseConnection(with:)"},{"range":{"start":{"line":51,"character":12},"end":{"line":51,"character":58}},"kind":7,"selectionRange":{"start":{"line":51,"character":16},"end":{"line":51,"character":27}},"name":"connections","references":[{"range":{"start":{"line":15,"character":8},"end":{"line":15,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":22,"character":8},"end":{"line":22,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":23,"character":8},"end":{"line":23,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":28,"character":8},"end":{"line":28,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":29,"character":8},"end":{"line":29,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":39,"character":8},"end":{"line":39,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"},{"range":{"start":{"line":46,"character":8},"end":{"line":46,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Observer/Receiver.swift"}]}]}],"code":"import SwiftyToolz\n\nextension Receiver: ReceiverInterface {}\n\n/**\n The receiver every ``Observer`` needs for receiving ``ObservableObject/Message``s from ``ObservableObject``s\n */\npublic final class Receiver\n{\n    // MARK: - Life Cycle\n    \n    public init() {}\n    \n    deinit\n    {\n        connections.values.forEach { $0.unregisterFromMessenger() }\n    }\n    \n    // MARK: - Manage Connections\n    \n    internal func disconnectMessenger(with messengerKey: MessengerKey)\n    {\n        connections[messengerKey]?.unregisterFromMessenger()\n        connections[messengerKey] = nil\n    }\n    \n    internal func disconnectAllMessengers()\n    {\n        connections.values.forEach { $0.unregisterFromMessenger() }\n        connections.removeAll()\n    }\n    \n    internal func retain(_ connection: Connection)\n    {\n        if connection.receiver !== self\n        {\n            log(error: \"\\(Self.self) will retain a connection that points to a different \\(Self.self).\")\n        }\n        \n        connections[connection.messengerKey] = connection\n    }\n    \n    // MARK: - ReceiverInterface\n    \n    internal func releaseConnection(with messengerKey: MessengerKey)\n    {\n        connections[messengerKey] = nil\n    }\n    \n    // MARK: - Connections\n    \n    private var connections = [MessengerKey: Connection]()\n}\n"},{"name":"ObservableObject+Observer.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":9,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":8,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":9},"end":{"line":5,"character":49}},"name":"stopBeingObserved(by:)"}]}],"code":"public extension ObservableObject\n{\n    /**\n     End all observations of this object that were started by the given ``Observer``\n     */\n    func stopBeingObserved(by observer: Observer)\n    {\n        messenger.disconnectReceiver(with: ReceiverKey(observer.receiver))\n    }\n}\n"}]},{"name":"Transforms","subfolders":[{"name":"ObservableTransforms","files":[{"name":"Mapper+Cache.swift","symbols":[{"range":{"start":{"line":0,"character":0},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":10},"end":{"line":0,"character":16}},"name":"Mapper","children":[{"range":{"start":{"line":2,"character":11},"end":{"line":5,"character":5}},"kind":7,"selectionRange":{"start":{"line":2,"character":15},"end":{"line":2,"character":28}},"name":"latestMessage","references":[{"range":{"start":{"line":98,"character":36},"end":{"line":98,"character":36}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":99,"character":52},"end":{"line":99,"character":52}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":100,"character":51},"end":{"line":100,"character":51}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}]}]}],"code":"extension Mapper: ObservableCache where O: ObservableCache\n{\n    public var latestMessage: Mapped\n    {\n        map(origin.latestMessage)\n    }\n}\n"},{"name":"Cache.swift","symbols":[{"range":{"start":{"line":0,"character":13},"end":{"line":41,"character":1}},"kind":5,"selectionRange":{"start":{"line":0,"character":19},"end":{"line":0,"character":24}},"name":"Cache","references":[{"range":{"start":{"line":10,"character":31},"end":{"line":10,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":13,"character":15},"end":{"line":13,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":39,"character":31},"end":{"line":39,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":41,"character":8},"end":{"line":41,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"}],"children":[{"range":{"start":{"line":0,"character":25},"end":{"line":0,"character":44}},"kind":26,"selectionRange":{"start":{"line":0,"character":25},"end":{"line":0,"character":26}},"name":"O","references":[{"range":{"start":{"line":4,"character":10},"end":{"line":4,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":6,"character":26},"end":{"line":6,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":21,"character":23},"end":{"line":21,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":30,"character":33},"end":{"line":30,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"}]},{"range":{"start":{"line":0,"character":46},"end":{"line":0,"character":55}},"kind":26,"selectionRange":{"start":{"line":0,"character":46},"end":{"line":0,"character":55}},"name":"Unwrapped","references":[{"range":{"start":{"line":1,"character":14},"end":{"line":1,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":4,"character":23},"end":{"line":4,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":13,"character":35},"end":{"line":13,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":19,"character":30},"end":{"line":19,"character":30}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"}]},{"range":{"start":{"line":6,"character":11},"end":{"line":11,"character":5}},"kind":6,"selectionRange":{"start":{"line":6,"character":11},"end":{"line":6,"character":28}},"name":"init(_:)","references":[{"range":{"start":{"line":13,"character":15},"end":{"line":13,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":41,"character":8},"end":{"line":41,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"}]},{"range":{"start":{"line":13,"character":13},"end":{"line":17,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":18},"end":{"line":13,"character":70}},"name":"_send(_:from:)","references":[{"range":{"start":{"line":36,"character":18},"end":{"line":36,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"}]},{"range":{"start":{"line":19,"character":11},"end":{"line":19,"character":40}},"kind":7,"selectionRange":{"start":{"line":19,"character":15},"end":{"line":19,"character":28}},"name":"latestMessage","references":[{"range":{"start":{"line":26,"character":33},"end":{"line":26,"character":33}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":15,"character":8},"end":{"line":15,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"}]},{"range":{"start":{"line":21,"character":11},"end":{"line":28,"character":5}},"kind":7,"selectionRange":{"start":{"line":21,"character":15},"end":{"line":21,"character":21}},"name":"origin","references":[{"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"}]},{"range":{"start":{"line":30,"character":12},"end":{"line":38,"character":5}},"kind":6,"selectionRange":{"start":{"line":30,"character":17},"end":{"line":30,"character":35}},"name":"observe(origin:)","references":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"},{"range":{"start":{"line":26,"character":12},"end":{"line":26,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Cache.swift"}],"children":[{"range":{"start":{"line":34,"character":18},"end":{"line":34,"character":22}},"kind":13,"selectionRange":{"start":{"line":34,"character":18},"end":{"line":34,"character":22}},"name":"self"}]},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":36}},"kind":7,"selectionRange":{"start":{"line":40,"character":15},"end":{"line":40,"character":23}},"name":"receiver"}]}],"code":"public final class Cache<O: ObservableObject, Unwrapped>:\n    Messenger<Unwrapped?>,\n    ObservableCache,\n    Observer\n    where O.Message == Unwrapped\n{\n    public init(_ origin: O)\n    {\n        self.origin = origin\n        super.init()\n        observe(origin: origin)\n    }\n    \n    override func _send(_ message: Unwrapped?, from author: AnyAuthor)\n    {\n        latestMessage = message\n        super._send(message, from: author)\n    }\n    \n    public var latestMessage: Unwrapped?\n    \n    public var origin: O\n    {\n        willSet\n        {\n            stopObserving(origin)\n            observe(origin: newValue)\n        }\n    }\n    \n    private func observe(origin: O)\n    {\n        observe(origin)\n        {\n            [weak self] message, author in\n            \n            self?._send(message, from: author)\n        }\n    }\n    \n    public let receiver = Receiver()\n}\n"},{"name":"Filter.swift","symbols":[{"range":{"start":{"line":0,"character":13},"end":{"line":38,"character":1}},"kind":5,"selectionRange":{"start":{"line":0,"character":19},"end":{"line":0,"character":25}},"name":"Filter","references":[{"range":{"start":{"line":152,"character":24},"end":{"line":152,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":2,"character":56},"end":{"line":2,"character":56}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Filter.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Filter.swift"},{"range":{"start":{"line":2,"character":46},"end":{"line":2,"character":46}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Select.swift"},{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Select.swift"}],"children":[{"range":{"start":{"line":0,"character":26},"end":{"line":0,"character":45}},"kind":26,"selectionRange":{"start":{"line":0,"character":26},"end":{"line":0,"character":27}},"name":"O","references":[{"range":{"start":{"line":0,"character":58},"end":{"line":0,"character":58}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":2,"character":26},"end":{"line":2,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":3,"character":35},"end":{"line":3,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":11,"character":23},"end":{"line":11,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":20,"character":33},"end":{"line":20,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":35,"character":24},"end":{"line":35,"character":24}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"}]},{"range":{"start":{"line":2,"character":11},"end":{"line":9,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":11},"end":{"line":3,"character":54}},"name":"init(_:_:)","references":[{"range":{"start":{"line":152,"character":24},"end":{"line":152,"character":24}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Filter.swift"},{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Select.swift"}]},{"range":{"start":{"line":11,"character":11},"end":{"line":18,"character":5}},"kind":7,"selectionRange":{"start":{"line":11,"character":15},"end":{"line":11,"character":21}},"name":"origin","references":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":15,"character":26},"end":{"line":15,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"}]},{"range":{"start":{"line":20,"character":12},"end":{"line":33,"character":5}},"kind":6,"selectionRange":{"start":{"line":20,"character":17},"end":{"line":20,"character":35}},"name":"observe(origin:)","references":[{"range":{"start":{"line":8,"character":8},"end":{"line":8,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":16,"character":12},"end":{"line":16,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"}],"children":[{"range":{"start":{"line":24,"character":18},"end":{"line":24,"character":22}},"kind":13,"selectionRange":{"start":{"line":24,"character":18},"end":{"line":24,"character":22}},"name":"self"},{"range":{"start":{"line":26,"character":22},"end":{"line":26,"character":26}},"kind":13,"selectionRange":{"start":{"line":26,"character":22},"end":{"line":26,"character":26}},"name":"self"}]},{"range":{"start":{"line":35,"character":13},"end":{"line":35,"character":42}},"kind":7,"selectionRange":{"start":{"line":35,"character":17},"end":{"line":35,"character":21}},"name":"keep","references":[{"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"},{"range":{"start":{"line":28,"character":20},"end":{"line":28,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Filter.swift"}]},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":36}},"kind":7,"selectionRange":{"start":{"line":37,"character":15},"end":{"line":37,"character":23}},"name":"receiver"}]}],"code":"public final class Filter<O: ObservableObject>: Messenger<O.Message>, Observer\n{\n    public init(_ origin: O,\n                _ keep: @escaping (O.Message) -> Bool)\n    {\n        self.origin = origin\n        self.keep = keep\n        super.init()\n        observe(origin: origin)\n    }\n    \n    public var origin: O\n    {\n        willSet\n        {\n            stopObserving(origin)\n            observe(origin: newValue)\n        }\n    }\n    \n    private func observe(origin: O)\n    {\n        observe(origin)\n        {\n            [weak self] message, author in\n            \n            guard let self = self else { return }\n            \n            if self.keep(message)\n            {\n                self.send(message, from: author)\n            }\n        }\n    }\n    \n    internal let keep: (O.Message) -> Bool\n    \n    public let receiver = Receiver()\n}\n"},{"name":"Unwrapper.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":35,"character":1}},"kind":5,"selectionRange":{"start":{"line":0,"character":13},"end":{"line":0,"character":22}},"name":"Unwrapper","references":[{"range":{"start":{"line":2,"character":30},"end":{"line":2,"character":30}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Unwrap.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Unwrap.swift"}],"children":[{"range":{"start":{"line":0,"character":23},"end":{"line":0,"character":42}},"kind":26,"selectionRange":{"start":{"line":0,"character":23},"end":{"line":0,"character":24}},"name":"O","references":[{"range":{"start":{"line":1,"character":10},"end":{"line":1,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":3,"character":26},"end":{"line":3,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":10,"character":23},"end":{"line":10,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":19,"character":33},"end":{"line":19,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"}]},{"range":{"start":{"line":0,"character":44},"end":{"line":0,"character":53}},"kind":26,"selectionRange":{"start":{"line":0,"character":44},"end":{"line":0,"character":53}},"name":"Unwrapped","references":[{"range":{"start":{"line":0,"character":66},"end":{"line":0,"character":66}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":1,"character":23},"end":{"line":1,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"}]},{"range":{"start":{"line":3,"character":11},"end":{"line":8,"character":5}},"kind":6,"selectionRange":{"start":{"line":3,"character":11},"end":{"line":3,"character":28}},"name":"init(_:)","references":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Unwrap.swift"}]},{"range":{"start":{"line":10,"character":11},"end":{"line":17,"character":5}},"kind":7,"selectionRange":{"start":{"line":10,"character":15},"end":{"line":10,"character":21}},"name":"origin","references":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":14,"character":26},"end":{"line":14,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":81,"character":25},"end":{"line":81,"character":25}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}]},{"range":{"start":{"line":19,"character":12},"end":{"line":32,"character":5}},"kind":6,"selectionRange":{"start":{"line":19,"character":17},"end":{"line":19,"character":35}},"name":"observe(origin:)","references":[{"range":{"start":{"line":7,"character":8},"end":{"line":7,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"},{"range":{"start":{"line":15,"character":12},"end":{"line":15,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Unwrapper.swift"}],"children":[{"range":{"start":{"line":23,"character":18},"end":{"line":23,"character":22}},"kind":13,"selectionRange":{"start":{"line":23,"character":18},"end":{"line":23,"character":22}},"name":"self"},{"range":{"start":{"line":25,"character":22},"end":{"line":25,"character":26}},"kind":13,"selectionRange":{"start":{"line":25,"character":22},"end":{"line":25,"character":26}},"name":"self"},{"range":{"start":{"line":27,"character":19},"end":{"line":27,"character":35}},"kind":13,"selectionRange":{"start":{"line":27,"character":19},"end":{"line":27,"character":35}},"name":"unwrappedMessage"}]},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":36}},"kind":7,"selectionRange":{"start":{"line":34,"character":15},"end":{"line":34,"character":23}},"name":"receiver"}]}],"code":"public class Unwrapper<O: ObservableObject, Unwrapped>: Messenger<Unwrapped>, Observer\n    where O.Message == Unwrapped?\n{\n    public init(_ origin: O)\n    {\n        self.origin = origin\n        super.init()\n        observe(origin: origin)\n    }\n    \n    public var origin: O\n    {\n        willSet\n        {\n            stopObserving(origin)\n            observe(origin: newValue)\n        }\n    }\n    \n    private func observe(origin: O)\n    {\n        observe(origin)\n        {\n            [weak self] optionalMessage, author in\n            \n            guard let self = self else { return }\n            \n            if let unwrappedMessage = optionalMessage\n            {\n                self.send(unwrappedMessage, from: author)\n            }\n        }\n    }\n    \n    public let receiver = Receiver()\n}\n"},{"name":"Mapper.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":35,"character":1}},"kind":5,"selectionRange":{"start":{"line":0,"character":13},"end":{"line":0,"character":19}},"name":"Mapper","references":[{"range":{"start":{"line":2,"character":25},"end":{"line":2,"character":25}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+New.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+New.swift"},{"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper+Cache.swift"},{"range":{"start":{"line":2,"character":62},"end":{"line":2,"character":62}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Map.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Map.swift"},{"range":{"start":{"line":2,"character":39},"end":{"line":2,"character":39}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Select.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Select.swift"},{"range":{"start":{"line":2,"character":55},"end":{"line":2,"character":55}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+UnwrapWithDefault.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+UnwrapWithDefault.swift"}],"children":[{"range":{"start":{"line":0,"character":20},"end":{"line":0,"character":39}},"kind":26,"selectionRange":{"start":{"line":0,"character":20},"end":{"line":0,"character":21}},"name":"O","references":[{"range":{"start":{"line":0,"character":40},"end":{"line":0,"character":40}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper+Cache.swift"},{"range":{"start":{"line":2,"character":26},"end":{"line":2,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":3,"character":34},"end":{"line":3,"character":34}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":11,"character":23},"end":{"line":11,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":20,"character":33},"end":{"line":20,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":32,"character":23},"end":{"line":32,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"}]},{"range":{"start":{"line":0,"character":41},"end":{"line":0,"character":47}},"kind":26,"selectionRange":{"start":{"line":0,"character":41},"end":{"line":0,"character":47}},"name":"Mapped","references":[{"range":{"start":{"line":2,"character":30},"end":{"line":2,"character":30}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper+Cache.swift"},{"range":{"start":{"line":0,"character":60},"end":{"line":0,"character":60}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":3,"character":48},"end":{"line":3,"character":48}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":32,"character":37},"end":{"line":32,"character":37}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"}]},{"range":{"start":{"line":2,"character":11},"end":{"line":9,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":11},"end":{"line":3,"character":55}},"name":"init(_:_:)","references":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+New.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Map.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Select.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+UnwrapWithDefault.swift"}]},{"range":{"start":{"line":11,"character":11},"end":{"line":18,"character":5}},"kind":7,"selectionRange":{"start":{"line":11,"character":15},"end":{"line":11,"character":21}},"name":"origin","references":[{"range":{"start":{"line":4,"character":12},"end":{"line":4,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper+Cache.swift"},{"range":{"start":{"line":81,"character":18},"end":{"line":81,"character":18}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":81,"character":32},"end":{"line":81,"character":32}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":15,"character":26},"end":{"line":15,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"}]},{"range":{"start":{"line":20,"character":12},"end":{"line":30,"character":5}},"kind":6,"selectionRange":{"start":{"line":20,"character":17},"end":{"line":20,"character":35}},"name":"observe(origin:)","references":[{"range":{"start":{"line":8,"character":8},"end":{"line":8,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":16,"character":12},"end":{"line":16,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"}],"children":[{"range":{"start":{"line":24,"character":18},"end":{"line":24,"character":22}},"kind":13,"selectionRange":{"start":{"line":24,"character":18},"end":{"line":24,"character":22}},"name":"self"},{"range":{"start":{"line":26,"character":22},"end":{"line":26,"character":26}},"kind":13,"selectionRange":{"start":{"line":26,"character":22},"end":{"line":26,"character":26}},"name":"self"}]},{"range":{"start":{"line":32,"character":13},"end":{"line":32,"character":43}},"kind":7,"selectionRange":{"start":{"line":32,"character":17},"end":{"line":32,"character":20}},"name":"map","references":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper+Cache.swift"},{"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"},{"range":{"start":{"line":28,"character":27},"end":{"line":28,"character":27}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Mapper.swift"}]},{"range":{"start":{"line":34,"character":11},"end":{"line":34,"character":36}},"kind":7,"selectionRange":{"start":{"line":34,"character":15},"end":{"line":34,"character":23}},"name":"receiver"}]}],"code":"public class Mapper<O: ObservableObject, Mapped>: Messenger<Mapped>, Observer\n{\n    public init(_ origin: O,\n                _ map: @escaping (O.Message) -> Mapped)\n    {\n        self.origin = origin\n        self.map = map\n        super.init()\n        observe(origin: origin)\n    }\n    \n    public var origin: O\n    {\n        willSet\n        {\n            stopObserving(origin)\n            observe(origin: newValue)\n        }\n    }\n    \n    private func observe(origin: O)\n    {\n        observe(origin)\n        {\n            [weak self] message, author in\n            \n            guard let self = self else { return }\n            \n            self.send(self.map(message), from: author)\n        }\n    }\n    \n    internal let map: (O.Message) -> Mapped\n    \n    public let receiver = Receiver()\n}\n"},{"name":"AuthorFilter.swift","symbols":[{"range":{"start":{"line":0,"character":13},"end":{"line":38,"character":1}},"kind":5,"selectionRange":{"start":{"line":0,"character":19},"end":{"line":0,"character":31}},"name":"AuthorFilter","references":[{"range":{"start":{"line":2,"character":64},"end":{"line":2,"character":64}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+FilterAuthor.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+FilterAuthor.swift"},{"range":{"start":{"line":2,"character":46},"end":{"line":2,"character":46}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+From.swift"},{"range":{"start":{"line":2,"character":49},"end":{"line":2,"character":49}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+NotFrom.swift"}],"children":[{"range":{"start":{"line":0,"character":32},"end":{"line":0,"character":51}},"kind":26,"selectionRange":{"start":{"line":0,"character":32},"end":{"line":0,"character":33}},"name":"O","references":[{"range":{"start":{"line":0,"character":64},"end":{"line":0,"character":64}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":2,"character":26},"end":{"line":2,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":11,"character":23},"end":{"line":11,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":20,"character":33},"end":{"line":20,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"}]},{"range":{"start":{"line":2,"character":11},"end":{"line":9,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":11},"end":{"line":3,"character":54}},"name":"init(_:_:)","references":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+FilterAuthor.swift"}]},{"range":{"start":{"line":11,"character":11},"end":{"line":18,"character":5}},"kind":7,"selectionRange":{"start":{"line":11,"character":15},"end":{"line":11,"character":21}},"name":"origin","references":[{"range":{"start":{"line":5,"character":13},"end":{"line":5,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":15,"character":26},"end":{"line":15,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"}]},{"range":{"start":{"line":20,"character":12},"end":{"line":33,"character":5}},"kind":6,"selectionRange":{"start":{"line":20,"character":17},"end":{"line":20,"character":35}},"name":"observe(origin:)","references":[{"range":{"start":{"line":8,"character":8},"end":{"line":8,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":16,"character":12},"end":{"line":16,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"}],"children":[{"range":{"start":{"line":24,"character":18},"end":{"line":24,"character":22}},"kind":13,"selectionRange":{"start":{"line":24,"character":18},"end":{"line":24,"character":22}},"name":"self"},{"range":{"start":{"line":26,"character":22},"end":{"line":26,"character":26}},"kind":13,"selectionRange":{"start":{"line":26,"character":22},"end":{"line":26,"character":26}},"name":"self"}]},{"range":{"start":{"line":35,"character":12},"end":{"line":35,"character":41}},"kind":7,"selectionRange":{"start":{"line":35,"character":16},"end":{"line":35,"character":20}},"name":"keep","references":[{"range":{"start":{"line":6,"character":13},"end":{"line":6,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"},{"range":{"start":{"line":28,"character":20},"end":{"line":28,"character":20}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/AuthorFilter.swift"}]},{"range":{"start":{"line":37,"character":11},"end":{"line":37,"character":36}},"kind":7,"selectionRange":{"start":{"line":37,"character":15},"end":{"line":37,"character":23}},"name":"receiver"}]}],"code":"public final class AuthorFilter<O: ObservableObject>: Messenger<O.Message>, Observer\n{\n    public init(_ origin: O,\n                _ keep: @escaping (AnyAuthor) -> Bool)\n    {\n        self.origin = origin\n        self.keep = keep\n        super.init()\n        observe(origin: origin)\n    }\n    \n    public var origin: O\n    {\n        willSet\n        {\n            stopObserving(origin)\n            observe(origin: newValue)\n        }\n    }\n    \n    private func observe(origin: O)\n    {\n        observe(origin)\n        {\n            [weak self] message, author in\n            \n            guard let self = self else { return }\n            \n            if self.keep(author)\n            {\n                self.send(message, from: author)\n            }\n        }\n    }\n    \n    private let keep: (AnyAuthor) -> Bool\n    \n    public let receiver = Receiver()\n}\n"},{"name":"CacheOnOptionalMessage.swift","symbols":[{"range":{"start":{"line":0,"character":13},"end":{"line":41,"character":1}},"kind":5,"selectionRange":{"start":{"line":0,"character":19},"end":{"line":0,"character":41}},"name":"CacheOnOptionalMessage","references":[{"range":{"start":{"line":4,"character":31},"end":{"line":4,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":7,"character":15},"end":{"line":7,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":34,"character":31},"end":{"line":34,"character":31}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":36,"character":8},"end":{"line":36,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"}],"children":[{"range":{"start":{"line":0,"character":42},"end":{"line":0,"character":61}},"kind":26,"selectionRange":{"start":{"line":0,"character":42},"end":{"line":0,"character":43}},"name":"O","references":[{"range":{"start":{"line":4,"character":10},"end":{"line":4,"character":10}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":6,"character":26},"end":{"line":6,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":21,"character":23},"end":{"line":21,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":30,"character":33},"end":{"line":30,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"}]},{"range":{"start":{"line":0,"character":63},"end":{"line":0,"character":72}},"kind":26,"selectionRange":{"start":{"line":0,"character":63},"end":{"line":0,"character":72}},"name":"Unwrapped","references":[{"range":{"start":{"line":1,"character":14},"end":{"line":1,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":4,"character":23},"end":{"line":4,"character":23}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":13,"character":35},"end":{"line":13,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":19,"character":30},"end":{"line":19,"character":30}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"}]},{"range":{"start":{"line":6,"character":11},"end":{"line":11,"character":5}},"kind":6,"selectionRange":{"start":{"line":6,"character":11},"end":{"line":6,"character":28}},"name":"init(_:)","references":[{"range":{"start":{"line":7,"character":15},"end":{"line":7,"character":15}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":36,"character":8},"end":{"line":36,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"}]},{"range":{"start":{"line":13,"character":13},"end":{"line":17,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":18},"end":{"line":13,"character":70}},"name":"_send(_:from:)","references":[{"range":{"start":{"line":36,"character":18},"end":{"line":36,"character":18}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"}]},{"range":{"start":{"line":19,"character":11},"end":{"line":19,"character":40}},"kind":7,"selectionRange":{"start":{"line":19,"character":15},"end":{"line":19,"character":28}},"name":"latestMessage","references":[{"range":{"start":{"line":20,"character":33},"end":{"line":20,"character":33}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":15,"character":8},"end":{"line":15,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"}]},{"range":{"start":{"line":21,"character":11},"end":{"line":28,"character":5}},"kind":7,"selectionRange":{"start":{"line":21,"character":15},"end":{"line":21,"character":21}},"name":"origin","references":[{"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":25,"character":26},"end":{"line":25,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"}]},{"range":{"start":{"line":30,"character":12},"end":{"line":38,"character":5}},"kind":6,"selectionRange":{"start":{"line":30,"character":17},"end":{"line":30,"character":35}},"name":"observe(origin:)","references":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"},{"range":{"start":{"line":26,"character":12},"end":{"line":26,"character":12}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/CacheOnOptionalMessage.swift"}],"children":[{"range":{"start":{"line":34,"character":18},"end":{"line":34,"character":22}},"kind":13,"selectionRange":{"start":{"line":34,"character":18},"end":{"line":34,"character":22}},"name":"self"}]},{"range":{"start":{"line":40,"character":11},"end":{"line":40,"character":36}},"kind":7,"selectionRange":{"start":{"line":40,"character":15},"end":{"line":40,"character":23}},"name":"receiver"}]}],"code":"public final class CacheOnOptionalMessage<O: ObservableObject, Unwrapped>:\n    Messenger<Unwrapped?>,\n    ObservableCache,\n    Observer\n    where O.Message == Unwrapped?\n{\n    public init(_ origin: O)\n    {\n        self.origin = origin\n        super.init()\n        observe(origin: origin)\n    }\n    \n    override func _send(_ message: Unwrapped?, from author: AnyAuthor)\n    {\n        latestMessage = message\n        super._send(message, from: author)\n    }\n    \n    public var latestMessage: Unwrapped?\n    \n    public var origin: O\n    {\n        willSet\n        {\n            stopObserving(origin)\n            observe(origin: newValue)\n        }\n    }\n    \n    private func observe(origin: O)\n    {\n        observe(origin)\n        {\n            [weak self] message, author in\n            \n            self?._send(message, from: author)\n        }\n    }\n    \n    public let receiver = Receiver()\n}\n"},{"name":"Weak.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":29,"character":1}},"kind":5,"selectionRange":{"start":{"line":0,"character":13},"end":{"line":0,"character":17}},"name":"Weak","references":[{"range":{"start":{"line":2,"character":19},"end":{"line":2,"character":19}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Weak.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Weak.swift"}],"children":[{"range":{"start":{"line":0,"character":18},"end":{"line":0,"character":37}},"kind":26,"selectionRange":{"start":{"line":0,"character":18},"end":{"line":0,"character":19}},"name":"O","references":[{"range":{"start":{"line":0,"character":50},"end":{"line":0,"character":50}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"},{"range":{"start":{"line":2,"character":26},"end":{"line":2,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"},{"range":{"start":{"line":9,"character":28},"end":{"line":9,"character":28}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"},{"range":{"start":{"line":18,"character":33},"end":{"line":18,"character":33}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}]},{"range":{"start":{"line":2,"character":11},"end":{"line":7,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":11},"end":{"line":2,"character":28}},"name":"init(_:)","references":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Weak.swift"}]},{"range":{"start":{"line":9,"character":16},"end":{"line":16,"character":5}},"kind":7,"selectionRange":{"start":{"line":9,"character":20},"end":{"line":9,"character":26}},"name":"origin","references":[{"range":{"start":{"line":234,"character":33},"end":{"line":234,"character":33}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":238,"character":35},"end":{"line":238,"character":35}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":247,"character":54},"end":{"line":247,"character":54}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":251,"character":36},"end":{"line":251,"character":36}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":4,"character":13},"end":{"line":4,"character":13}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"},{"range":{"start":{"line":13,"character":26},"end":{"line":13,"character":26}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}]},{"range":{"start":{"line":18,"character":12},"end":{"line":26,"character":5}},"kind":6,"selectionRange":{"start":{"line":18,"character":17},"end":{"line":18,"character":35}},"name":"observe(origin:)","references":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"},{"range":{"start":{"line":14,"character":29},"end":{"line":14,"character":29}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/Weak.swift"}],"children":[{"range":{"start":{"line":22,"character":18},"end":{"line":22,"character":22}},"kind":13,"selectionRange":{"start":{"line":22,"character":18},"end":{"line":22,"character":22}},"name":"self"}]},{"range":{"start":{"line":28,"character":11},"end":{"line":28,"character":36}},"kind":7,"selectionRange":{"start":{"line":28,"character":15},"end":{"line":28,"character":23}},"name":"receiver"}]}],"code":"public class Weak<O: ObservableObject>: Messenger<O.Message>, Observer\n{\n    public init(_ origin: O)\n    {\n        self.origin = origin\n        super.init()\n        observe(origin: origin)\n    }\n    \n    public weak var origin: O?\n    {\n        willSet\n        {\n            stopObserving(origin)\n            newValue.forSome(observe(origin:))\n        }\n    }\n    \n    private func observe(origin: O)\n    {\n        observe(origin)\n        {\n            [weak self] message, author in\n            \n            self?.send(message, from: author)\n        }\n    }\n    \n    public let receiver = Receiver()\n}\n"}],"subfolders":[{"name":"ObservableObject+Transforms","files":[{"name":"ObservableObject+Map.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":5,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":58}},"name":"map(_:)","references":[{"range":{"start":{"line":51,"character":48},"end":{"line":51,"character":48}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":100,"character":30},"end":{"line":100,"character":30}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":193,"character":35},"end":{"line":193,"character":35}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":19}},"kind":26,"selectionRange":{"start":{"line":2,"character":13},"end":{"line":2,"character":19}},"name":"Mapped"}]}]}],"code":"public extension ObservableObject\n{\n    func map<Mapped>(_ map: @escaping (Message) -> Mapped) -> Mapper<Self, Mapped>\n    {\n        Mapper(self, map)\n    }\n}\n"},{"name":"ObservableObject+NotFrom.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":5,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":45}},"name":"notFrom(_:)","children":[{"range":{"start":{"line":4,"character":29},"end":{"line":4,"character":43}},"kind":13,"selectionRange":{"start":{"line":4,"character":29},"end":{"line":4,"character":43}},"name":"excludedAuthor"}]}]}],"code":"public extension ObservableObject\n{\n    func notFrom(_ excludedAuthor: AnyAuthor) -> AuthorFilter<Self>\n    {\n        filterAuthor { [weak excludedAuthor] in $0 !== excludedAuthor }\n    }\n}\n"},{"name":"ObservableObject+New.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":7,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":6,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":21}},"name":"new()","references":[{"range":{"start":{"line":188,"character":31},"end":{"line":188,"character":31}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":207,"character":43},"end":{"line":207,"character":43}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":226,"character":43},"end":{"line":226,"character":43}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":43,"character":35},"end":{"line":43,"character":35}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":51,"character":33},"end":{"line":51,"character":33}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":98,"character":30},"end":{"line":98,"character":30}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":99,"character":35},"end":{"line":99,"character":35}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":106,"character":31},"end":{"line":106,"character":31}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":128,"character":34},"end":{"line":128,"character":34}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":173,"character":43},"end":{"line":173,"character":43}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":214,"character":33},"end":{"line":214,"character":33}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":70,"character":40},"end":{"line":70,"character":40}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":18}},"kind":26,"selectionRange":{"start":{"line":2,"character":13},"end":{"line":2,"character":18}},"name":"Value"}]}]}],"code":"public extension ObservableObject\n{\n    func new<Value>() -> Mapper<Self, Value>\n        where Message == Update<Value>\n    {\n        Mapper(self) { $0.new }\n    }\n}\n"},{"name":"ObservableObject+Weak.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":5,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":15}},"name":"weak()","references":[{"range":{"start":{"line":233,"character":33},"end":{"line":233,"character":33}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":237,"character":39},"end":{"line":237,"character":39}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":245,"character":47},"end":{"line":245,"character":47}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}]}]}],"code":"public extension ObservableObject\n{\n    func weak() -> Weak<Self>\n    {\n        Weak(self)\n    }\n}\n"},{"name":"ObservableObject+Select.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":5,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":35}},"name":"select(_:)","references":[{"range":{"start":{"line":106,"character":48},"end":{"line":106,"character":48}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":47,"character":32},"end":{"line":47,"character":32}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}]}]}],"code":"public extension ObservableObject where Message: Equatable\n{\n    func select(_ message: Message) -> Mapper<Filter<Self>, Void>\n    {\n        Mapper(Filter(self, { $0 == message })) { _ in }\n    }\n}\n"},{"name":"ObservableObject+Filter.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":5,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":52}},"name":"filter(_:)","references":[{"range":{"start":{"line":43,"character":41},"end":{"line":43,"character":41}},"filePathRelativeToRoot":"Tests/CombineObserverTests/CombineObserverTests.swift"},{"range":{"start":{"line":128,"character":50},"end":{"line":128,"character":50}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}]}]}],"code":"public extension ObservableObject\n{\n    func filter(_ keep: @escaping (Message) -> Bool) -> Filter<Self>\n    {\n        Filter(self, keep)\n    }\n}\n"},{"name":"ObservableObject+FilterAuthor.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":5,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":60}},"name":"filterAuthor(_:)","references":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+From.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+NotFrom.swift"}]}]}],"code":"public extension ObservableObject\n{\n    func filterAuthor(_ keep: @escaping (AnyAuthor) -> Bool) -> AuthorFilter<Self>\n    {\n        AuthorFilter(self, keep)\n    }\n}\n"},{"name":"ObservableObject+UnwrapWithDefault.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":7,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":6,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":51}},"name":"unwrap(_:)","references":[{"range":{"start":{"line":188,"character":37},"end":{"line":188,"character":37}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":226,"character":49},"end":{"line":226,"character":49}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":99,"character":41},"end":{"line":99,"character":41}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":106,"character":37},"end":{"line":106,"character":37}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":128,"character":40},"end":{"line":128,"character":40}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":214,"character":39},"end":{"line":214,"character":39}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":23}},"kind":26,"selectionRange":{"start":{"line":2,"character":16},"end":{"line":2,"character":23}},"name":"Wrapped"}]}]}],"code":"public extension ObservableObject\n{\n    func unwrap<Wrapped>(_ defaultMessage: Wrapped) -> Mapper<Self, Wrapped>\n        where Message == Wrapped?\n    {\n        Mapper(self) { $0 ?? defaultMessage }\n    }\n}\n"},{"name":"ObservableObject+Cache.swift","symbols":[{"range":{"start":{"line":2,"character":7},"end":{"line":15,"character":1}},"kind":3,"selectionRange":{"start":{"line":2,"character":17},"end":{"line":2,"character":32}},"name":"ObservableCache","children":[{"range":{"start":{"line":4,"character":4},"end":{"line":8,"character":5}},"kind":6,"selectionRange":{"start":{"line":4,"character":9},"end":{"line":4,"character":27}},"name":"cache()","references":[{"range":{"start":{"line":43,"character":26},"end":{"line":43,"character":26}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":4,"character":15},"end":{"line":4,"character":24}},"kind":26,"selectionRange":{"start":{"line":4,"character":15},"end":{"line":4,"character":24}},"name":"Unwrapped"}]},{"range":{"start":{"line":10,"character":4},"end":{"line":14,"character":5}},"kind":6,"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":27}},"name":"cache()","references":[{"range":{"start":{"line":33,"character":26},"end":{"line":33,"character":26}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":10,"character":15},"end":{"line":10,"character":24}},"kind":26,"selectionRange":{"start":{"line":10,"character":15},"end":{"line":10,"character":24}},"name":"Unwrapped"}]}]},{"range":{"start":{"line":17,"character":9},"end":{"line":30,"character":1}},"kind":3,"selectionRange":{"start":{"line":17,"character":19},"end":{"line":17,"character":34}},"name":"ObservableCache","children":[{"range":{"start":{"line":19,"character":4},"end":{"line":29,"character":5}},"kind":6,"selectionRange":{"start":{"line":19,"character":9},"end":{"line":19,"character":58}},"name":"warningWhenApplyingCache(messageIsOptional:)","references":[{"range":{"start":{"line":32,"character":44},"end":{"line":32,"character":44}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":42,"character":44},"end":{"line":42,"character":44}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":6,"character":21},"end":{"line":6,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"},{"range":{"start":{"line":12,"character":21},"end":{"line":12,"character":21}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservableTransforms/ObservableObject+Transforms/ObservableObject+Cache.swift"}],"children":[{"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":108}},"kind":13,"selectionRange":{"start":{"line":21,"character":12},"end":{"line":21,"character":19}},"name":"warning"}]}]},{"range":{"start":{"line":32,"character":7},"end":{"line":43,"character":1}},"kind":3,"selectionRange":{"start":{"line":32,"character":17},"end":{"line":32,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":34,"character":4},"end":{"line":37,"character":5}},"kind":6,"selectionRange":{"start":{"line":34,"character":9},"end":{"line":34,"character":27}},"name":"cache()","references":[{"range":{"start":{"line":19,"character":38},"end":{"line":19,"character":38}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":34,"character":15},"end":{"line":34,"character":24}},"kind":26,"selectionRange":{"start":{"line":34,"character":15},"end":{"line":34,"character":24}},"name":"Unwrapped"}]},{"range":{"start":{"line":39,"character":4},"end":{"line":42,"character":5}},"kind":6,"selectionRange":{"start":{"line":39,"character":9},"end":{"line":39,"character":27}},"name":"cache()","references":[{"range":{"start":{"line":25,"character":37},"end":{"line":25,"character":37}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"},{"range":{"start":{"line":40,"character":45},"end":{"line":40,"character":45}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":39,"character":15},"end":{"line":39,"character":24}},"kind":26,"selectionRange":{"start":{"line":39,"character":15},"end":{"line":39,"character":24}},"name":"Unwrapped"}]}]}],"code":"import SwiftyToolz\n\npublic extension ObservableCache\n{\n    func cache<Unwrapped>() -> CacheOnOptionalMessage<Self, Unwrapped>\n    {\n        log(warning: warningWhenApplyingCache(messageIsOptional: true))\n        return CacheOnOptionalMessage(self)\n    }\n\n    func cache<Unwrapped>() -> Cache<Self, Unwrapped>\n    {\n        log(warning: warningWhenApplyingCache(messageIsOptional: false))\n        return Cache(self)\n    }\n}\n\ninternal extension ObservableCache\n{\n    func warningWhenApplyingCache(messageIsOptional: Bool) -> String\n    {\n        var warning = \"\\(Self.self) is already a Cache. Creating another Cache with it is likely pointless.\"\n        \n        if !messageIsOptional\n        {\n            warning += \" And making the \\(Message.self) message optional is likely unnecessary.\"\n        }\n        \n        return warning\n    }\n}\n\npublic extension ObservableObject\n{\n    func cache<Unwrapped>() -> CacheOnOptionalMessage<Self, Unwrapped>\n    {\n        CacheOnOptionalMessage(self)\n    }\n\n    func cache<Unwrapped>() -> Cache<Self, Unwrapped>\n    {\n        Cache(self)\n    }\n}\n"},{"name":"ObservableObject+Unwrap.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":7,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":6,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":26}},"name":"unwrap()","references":[{"range":{"start":{"line":51,"character":39},"end":{"line":51,"character":39}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservableTransformTests.swift"}],"children":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":23}},"kind":26,"selectionRange":{"start":{"line":2,"character":16},"end":{"line":2,"character":23}},"name":"Wrapped"}]}]}],"code":"public extension ObservableObject\n{\n    func unwrap<Wrapped>() -> Unwrapper<Self, Wrapped>\n        where Message == Wrapped?\n    {\n        Unwrapper(self)\n    }\n}\n"},{"name":"ObservableObject+From.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":6,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":33}},"name":"ObservableObject","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":5,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":42}},"name":"from(_:)","children":[{"range":{"start":{"line":4,"character":29},"end":{"line":4,"character":43}},"kind":13,"selectionRange":{"start":{"line":4,"character":29},"end":{"line":4,"character":43}},"name":"selectedAuthor"}]}]}],"code":"public extension ObservableObject\n{\n    func from(_ selectedAuthor: AnyAuthor) -> AuthorFilter<Self>\n    {\n        filterAuthor { [weak selectedAuthor] in $0 === selectedAuthor }\n    }\n}\n"}]}]},{"name":"ObservationTransforms","files":[{"name":"ObservationTransformer.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":16,"character":1}},"kind":23,"selectionRange":{"start":{"line":0,"character":14},"end":{"line":0,"character":36}},"name":"ObservationTransformer","references":[{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":24,"character":66},"end":{"line":24,"character":66}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":24,"character":64},"end":{"line":24,"character":64}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+UnwrapWithDefault.swift"},{"range":{"start":{"line":16,"character":59},"end":{"line":16,"character":59}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+UnwrapWithDefault.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":24,"character":60},"end":{"line":24,"character":60}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":2,"character":58},"end":{"line":2,"character":58}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/Observer+ObservationTransformer.swift"},{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/Observer+ObservationTransformer.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":14,"character":25},"end":{"line":14,"character":25}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"},{"range":{"start":{"line":24,"character":32},"end":{"line":24,"character":32}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"},{"range":{"start":{"line":27,"character":8},"end":{"line":27,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"},{"range":{"start":{"line":14,"character":43},"end":{"line":14,"character":43}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+From.swift"},{"range":{"start":{"line":16,"character":47},"end":{"line":16,"character":47}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+From.swift"},{"range":{"start":{"line":0,"character":17},"end":{"line":0,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+NotFrom.swift"},{"range":{"start":{"line":16,"character":49},"end":{"line":16,"character":49}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+NotFrom.swift"}],"children":[{"range":{"start":{"line":0,"character":37},"end":{"line":0,"character":48}},"kind":26,"selectionRange":{"start":{"line":0,"character":37},"end":{"line":0,"character":48}},"name":"Transformed","references":[{"range":{"start":{"line":2,"character":46},"end":{"line":2,"character":46}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer.swift"},{"range":{"start":{"line":7,"character":46},"end":{"line":7,"character":46}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer.swift"},{"range":{"start":{"line":15,"character":47},"end":{"line":15,"character":47}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer.swift"},{"range":{"start":{"line":2,"character":39},"end":{"line":2,"character":39}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":13,"character":39},"end":{"line":13,"character":39}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":24,"character":39},"end":{"line":24,"character":39}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":3,"character":50},"end":{"line":3,"character":50}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":14,"character":50},"end":{"line":14,"character":50}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":24,"character":87},"end":{"line":24,"character":87}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":4,"character":14},"end":{"line":4,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+UnwrapWithDefault.swift"},{"range":{"start":{"line":11,"character":14},"end":{"line":11,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+UnwrapWithDefault.swift"},{"range":{"start":{"line":17,"character":14},"end":{"line":17,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+UnwrapWithDefault.swift"},{"range":{"start":{"line":2,"character":35},"end":{"line":2,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":3,"character":44},"end":{"line":3,"character":44}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":13,"character":35},"end":{"line":13,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":14,"character":44},"end":{"line":14,"character":44}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":24,"character":35},"end":{"line":24,"character":35}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":24,"character":83},"end":{"line":24,"character":83}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":9,"character":14},"end":{"line":9,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":15,"character":14},"end":{"line":15,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":3,"character":14},"end":{"line":3,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"},{"range":{"start":{"line":14,"character":14},"end":{"line":14,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"},{"range":{"start":{"line":25,"character":14},"end":{"line":25,"character":14}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"},{"range":{"start":{"line":0,"character":46},"end":{"line":0,"character":46}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"},{"range":{"start":{"line":2,"character":27},"end":{"line":2,"character":27}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"},{"range":{"start":{"line":8,"character":27},"end":{"line":8,"character":27}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"},{"range":{"start":{"line":14,"character":27},"end":{"line":14,"character":27}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"},{"range":{"start":{"line":3,"character":42},"end":{"line":3,"character":42}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+From.swift"},{"range":{"start":{"line":10,"character":42},"end":{"line":10,"character":42}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+From.swift"},{"range":{"start":{"line":16,"character":70},"end":{"line":16,"character":70}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+From.swift"},{"range":{"start":{"line":3,"character":45},"end":{"line":3,"character":45}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+NotFrom.swift"},{"range":{"start":{"line":10,"character":45},"end":{"line":10,"character":45}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+NotFrom.swift"},{"range":{"start":{"line":16,"character":72},"end":{"line":16,"character":72}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+NotFrom.swift"}]},{"range":{"start":{"line":2,"character":11},"end":{"line":5,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":16},"end":{"line":2,"character":78}},"name":"receive(_:)"},{"range":{"start":{"line":7,"character":11},"end":{"line":13,"character":5}},"kind":6,"selectionRange":{"start":{"line":7,"character":16},"end":{"line":7,"character":67}},"name":"receive(_:)","references":[{"range":{"start":{"line":36,"character":10},"end":{"line":36,"character":10}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":75,"character":10},"end":{"line":75,"character":10}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}]},{"range":{"start":{"line":15,"character":13},"end":{"line":15,"character":87}},"kind":7,"selectionRange":{"start":{"line":15,"character":17},"end":{"line":15,"character":33}},"name":"startObservation","references":[{"range":{"start":{"line":4,"character":8},"end":{"line":4,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer.swift"},{"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":16,"character":8},"end":{"line":16,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":30,"character":17},"end":{"line":30,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Map.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":16,"character":8},"end":{"line":16,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":30,"character":17},"end":{"line":30,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+FilterAuthor.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":16,"character":8},"end":{"line":16,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":30,"character":17},"end":{"line":30,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Filter.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"},{"range":{"start":{"line":16,"character":8},"end":{"line":16,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"},{"range":{"start":{"line":31,"character":17},"end":{"line":31,"character":17}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Unwrap.swift"}]}]}],"code":"public struct ObservationTransformer<Transformed>\n{\n    public func receive(_ receive: @escaping (Transformed, AnyAuthor) -> Void)\n    {\n        startObservation(receive)\n    }\n    \n    public func receive(_ receive: @escaping (Transformed) -> Void)\n    {\n        startObservation\n        {\n            message, _ in receive(message)\n        }\n    }\n    \n    internal let startObservation: (@escaping (Transformed, AnyAuthor) -> Void) -> Void\n}\n"},{"name":"Observer+ObservationTransformer.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":9,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":25}},"name":"Observer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":8,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":54}},"name":"observe(_:)","references":[{"range":{"start":{"line":11,"character":19},"end":{"line":11,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":34,"character":19},"end":{"line":34,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":52,"character":19},"end":{"line":52,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":71,"character":19},"end":{"line":71,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":93,"character":19},"end":{"line":93,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":112,"character":19},"end":{"line":112,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":132,"character":19},"end":{"line":132,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":151,"character":19},"end":{"line":151,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":170,"character":19},"end":{"line":170,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":192,"character":19},"end":{"line":192,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":210,"character":19},"end":{"line":210,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":230,"character":19},"end":{"line":230,"character":19}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":32,"character":17},"end":{"line":32,"character":17}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":2,"character":17},"end":{"line":2,"character":36}},"kind":26,"selectionRange":{"start":{"line":2,"character":17},"end":{"line":2,"character":18}},"name":"O"}]}]}],"code":"public extension Observer\n{\n    func observe<O: ObservableObject>(_ observable: O) -> ObservationTransformer<O.Message>\n    {\n        ObservationTransformer\n        {\n            receive in self.observe(observable, receive: receive)\n        }\n    }\n}\n"}],"subfolders":[{"name":"ObservationTransformer+Transforms","files":[{"name":"ObservationTransformer+Map.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":38,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":11,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":3,"character":74}},"name":"map(_:receiveMapped:)","references":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+UnwrapWithDefault.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"}],"children":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":19}},"kind":26,"selectionRange":{"start":{"line":2,"character":13},"end":{"line":2,"character":19}},"name":"Mapped"}]},{"range":{"start":{"line":13,"character":4},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":9},"end":{"line":14,"character":63}},"name":"map(_:receiveMapped:)","references":[{"range":{"start":{"line":13,"character":8},"end":{"line":13,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+UnwrapWithDefault.swift"},{"range":{"start":{"line":52,"character":37},"end":{"line":52,"character":37}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":112,"character":43},"end":{"line":112,"character":43}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":151,"character":58},"end":{"line":151,"character":58}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":11,"character":34},"end":{"line":11,"character":34}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"},{"range":{"start":{"line":32,"character":32},"end":{"line":32,"character":32}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/CustomObservableTests.swift"}],"children":[{"range":{"start":{"line":13,"character":13},"end":{"line":13,"character":19}},"kind":26,"selectionRange":{"start":{"line":13,"character":13},"end":{"line":13,"character":19}},"name":"Mapped"}]},{"range":{"start":{"line":24,"character":4},"end":{"line":37,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":9},"end":{"line":24,"character":62}},"name":"map(_:)","references":[{"range":{"start":{"line":19,"character":8},"end":{"line":19,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+UnwrapWithDefault.swift"},{"range":{"start":{"line":11,"character":41},"end":{"line":11,"character":41}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":15,"character":10},"end":{"line":15,"character":10}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":34,"character":35},"end":{"line":34,"character":35}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":71,"character":37},"end":{"line":71,"character":37}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":73,"character":10},"end":{"line":73,"character":10}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":17,"character":8},"end":{"line":17,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+New.swift"},{"range":{"start":{"line":16,"character":34},"end":{"line":16,"character":34}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"}],"children":[{"range":{"start":{"line":24,"character":13},"end":{"line":24,"character":19}},"kind":26,"selectionRange":{"start":{"line":24,"character":13},"end":{"line":24,"character":19}},"name":"Mapped"}]}]}],"code":"public extension ObservationTransformer\n{\n    func map<Mapped>(_ map: @escaping (Transformed) -> Mapped,\n                     receiveMapped: @escaping (Mapped, AnyAuthor) -> Void)\n    {\n        startObservation\n        {\n            message, author in\n            \n            receiveMapped(map(message), author)\n        }\n    }\n    \n    func map<Mapped>(_ map: @escaping (Transformed) -> Mapped,\n                     receiveMapped: @escaping (Mapped) -> Void)\n    {\n        startObservation\n        {\n            message, _ in\n            \n            receiveMapped(map(message))\n        }\n    }\n    \n    func map<Mapped>(_ map: @escaping (Transformed) -> Mapped) -> ObservationTransformer<Mapped>\n    {\n        ObservationTransformer<Mapped>\n        {\n            receiveMapped in\n\n            self.startObservation\n            {\n                message, author in\n                \n                receiveMapped(map(message), author)\n            }\n        }\n    }\n}\n"},{"name":"ObservationTransformer+UnwrapWithDefault.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":21,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":7,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":3,"character":86}},"name":"unwrap(_:receiveUnwrapped:)","children":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":25}},"kind":26,"selectionRange":{"start":{"line":2,"character":16},"end":{"line":2,"character":25}},"name":"Unwrapped"}]},{"range":{"start":{"line":9,"character":4},"end":{"line":14,"character":5}},"kind":6,"selectionRange":{"start":{"line":9,"character":9},"end":{"line":10,"character":75}},"name":"unwrap(_:receiveUnwrapped:)","references":[{"range":{"start":{"line":19,"character":10},"end":{"line":19,"character":10}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":132,"character":39},"end":{"line":132,"character":39}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}],"children":[{"range":{"start":{"line":9,"character":16},"end":{"line":9,"character":25}},"kind":26,"selectionRange":{"start":{"line":9,"character":16},"end":{"line":9,"character":25}},"name":"Unwrapped"}]},{"range":{"start":{"line":16,"character":4},"end":{"line":20,"character":5}},"kind":6,"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":55}},"name":"unwrap(_:)","references":[{"range":{"start":{"line":151,"character":39},"end":{"line":151,"character":39}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}],"children":[{"range":{"start":{"line":16,"character":16},"end":{"line":16,"character":25}},"kind":26,"selectionRange":{"start":{"line":16,"character":16},"end":{"line":16,"character":25}},"name":"Unwrapped"}]}]}],"code":"public extension ObservationTransformer\n{\n    func unwrap<Unwrapped>(_ defaultMessage: Unwrapped,\n                           receiveUnwrapped: @escaping (Unwrapped, AnyAuthor) -> Void)\n        where Transformed == Unwrapped?\n    {\n        map({ $0 ?? defaultMessage }, receiveMapped: receiveUnwrapped)\n    }\n    \n    func unwrap<Unwrapped>(_ defaultMessage: Unwrapped,\n                           receiveUnwrapped: @escaping (Unwrapped) -> Void)\n        where Transformed == Unwrapped?\n    {\n        map({ $0 ?? defaultMessage }, receiveMapped: receiveUnwrapped)\n    }\n    \n    func unwrap<Unwrapped>(_ defaultMessage: Unwrapped) -> ObservationTransformer<Unwrapped>\n        where Transformed == Unwrapped?\n    {\n        map { $0 ?? defaultMessage }\n    }\n}\n"},{"name":"ObservationTransformer+New.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":19,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":6,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":69}},"name":"new(receiveNew:)","children":[{"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":18}},"kind":26,"selectionRange":{"start":{"line":2,"character":13},"end":{"line":2,"character":18}},"name":"Value"}]},{"range":{"start":{"line":8,"character":4},"end":{"line":12,"character":5}},"kind":6,"selectionRange":{"start":{"line":8,"character":9},"end":{"line":8,"character":58}},"name":"new(receiveNew:)","references":[{"range":{"start":{"line":93,"character":37},"end":{"line":93,"character":37}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}],"children":[{"range":{"start":{"line":8,"character":13},"end":{"line":8,"character":18}},"kind":26,"selectionRange":{"start":{"line":8,"character":13},"end":{"line":8,"character":18}},"name":"Value"}]},{"range":{"start":{"line":14,"character":4},"end":{"line":18,"character":5}},"kind":6,"selectionRange":{"start":{"line":14,"character":9},"end":{"line":14,"character":21}},"name":"new()","references":[{"range":{"start":{"line":11,"character":35},"end":{"line":11,"character":35}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":112,"character":37},"end":{"line":112,"character":37}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":132,"character":33},"end":{"line":132,"character":33}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":151,"character":33},"end":{"line":151,"character":33}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}],"children":[{"range":{"start":{"line":14,"character":13},"end":{"line":14,"character":18}},"kind":26,"selectionRange":{"start":{"line":14,"character":13},"end":{"line":14,"character":18}},"name":"Value"}]}]}],"code":"public extension ObservationTransformer\n{\n    func new<Value>(receiveNew: @escaping (Value, AnyAuthor) -> Void)\n        where Transformed == Update<Value>\n    {\n        map({ $0.new }, receiveMapped: receiveNew)\n    }\n    \n    func new<Value>(receiveNew: @escaping (Value) -> Void)\n        where Transformed == Update<Value>\n    {\n        map({ $0.new }, receiveMapped: receiveNew)\n    }\n    \n    func new<Value>() -> ObservationTransformer<Value>\n        where Transformed == Update<Value>\n    {\n        map { $0.new }\n    }\n}\n"},{"name":"ObservationTransformer+Filter.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":38,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":11,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":3,"character":76}},"name":"filter(_:receiveFiltered:)","references":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"}]},{"range":{"start":{"line":13,"character":4},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":9},"end":{"line":14,"character":65}},"name":"filter(_:receiveFiltered:)","references":[{"range":{"start":{"line":170,"character":37},"end":{"line":170,"character":37}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":230,"character":50},"end":{"line":230,"character":50}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}]},{"range":{"start":{"line":24,"character":4},"end":{"line":37,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":9},"end":{"line":24,"character":56}},"name":"filter(_:)","references":[{"range":{"start":{"line":13,"character":10},"end":{"line":13,"character":10}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":17,"character":10},"end":{"line":17,"character":10}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":11,"character":8},"end":{"line":11,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"},{"range":{"start":{"line":16,"character":8},"end":{"line":16,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+Select.swift"}]}]}],"code":"public extension ObservationTransformer\n{\n    func filter(_ keep: @escaping (Transformed) -> Bool,\n                receiveFiltered: @escaping (Transformed, AnyAuthor) -> Void)\n    {\n        startObservation\n        {\n            message, author in\n\n            if keep(message) { receiveFiltered(message, author) }\n        }\n    }\n    \n    func filter(_ keep: @escaping (Transformed) -> Bool,\n                receiveFiltered: @escaping (Transformed) -> Void)\n    {\n        startObservation\n        {\n            message, _ in\n\n            if keep(message) { receiveFiltered(message) }\n        }\n    }\n    \n    func filter(_ keep: @escaping (Transformed) -> Bool) -> ObservationTransformer<Transformed>\n    {\n        ObservationTransformer\n        {\n            receiveFiltered in\n\n            self.startObservation\n            {\n                message, author in\n                \n                if keep(message) { receiveFiltered(message, author) }\n            }\n        }\n    }\n}\n"},{"name":"ObservationTransformer+From.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":20,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":7,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":3,"character":74}},"name":"from(_:receiveSelected:)","children":[{"range":{"start":{"line":5,"character":29},"end":{"line":5,"character":43}},"kind":13,"selectionRange":{"start":{"line":5,"character":29},"end":{"line":5,"character":43}},"name":"selectedAuthor"}]},{"range":{"start":{"line":9,"character":4},"end":{"line":14,"character":5}},"kind":6,"selectionRange":{"start":{"line":9,"character":9},"end":{"line":10,"character":63}},"name":"from(_:receiveSelected:)","children":[{"range":{"start":{"line":12,"character":29},"end":{"line":12,"character":43}},"kind":13,"selectionRange":{"start":{"line":12,"character":29},"end":{"line":12,"character":43}},"name":"selectedAuthor"}]},{"range":{"start":{"line":16,"character":4},"end":{"line":19,"character":5}},"kind":6,"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":43}},"name":"from(_:)","children":[{"range":{"start":{"line":18,"character":29},"end":{"line":18,"character":43}},"kind":13,"selectionRange":{"start":{"line":18,"character":29},"end":{"line":18,"character":43}},"name":"selectedAuthor"}]}]}],"code":"public extension ObservationTransformer\n{\n    func from(_ selectedAuthor: AnyAuthor?,\n              receiveSelected: @escaping (Transformed, AnyAuthor) -> Void)\n    {\n        filterAuthor({ [weak selectedAuthor] in $0 === selectedAuthor},\n                     receiveFiltered: receiveSelected)\n    }\n    \n    func from(_ selectedAuthor: AnyAuthor?,\n              receiveSelected: @escaping (Transformed) -> Void)\n    {\n        filterAuthor({ [weak selectedAuthor] in $0 === selectedAuthor },\n                     receiveFiltered: receiveSelected)\n    }\n    \n    func from(_ selectedAuthor: AnyAuthor?) -> ObservationTransformer<Transformed>\n    {\n        filterAuthor { [weak selectedAuthor] in $0 === selectedAuthor }\n    }\n}\n"},{"name":"ObservationTransformer+Select.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":18,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":6,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":3,"character":63}},"name":"select(_:receiveSelected:)"},{"range":{"start":{"line":8,"character":4},"end":{"line":12,"character":5}},"kind":6,"selectionRange":{"start":{"line":8,"character":9},"end":{"line":9,"character":54}},"name":"select(_:receiveSelected:)","references":[{"range":{"start":{"line":192,"character":40},"end":{"line":192,"character":40}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"},{"range":{"start":{"line":210,"character":42},"end":{"line":210,"character":42}},"filePathRelativeToRoot":"Tests/SwiftObserverTests/ObservationTransformTests.swift"}]},{"range":{"start":{"line":14,"character":4},"end":{"line":17,"character":5}},"kind":6,"selectionRange":{"start":{"line":14,"character":9},"end":{"line":14,"character":39}},"name":"select(_:)"}]}],"code":"public extension ObservationTransformer where Transformed: Equatable\n{\n    func select(_ message: Transformed,\n                receiveSelected: @escaping (AnyAuthor) -> Void)\n    {\n        filter({ $0 == message }) { _, author in receiveSelected(author) }\n    }\n    \n    func select(_ message: Transformed,\n                receiveSelected: @escaping () -> Void)\n    {\n        filter({ $0 == message }).map({ _ in }, receiveMapped: receiveSelected)\n    }\n    \n    func select(_ message: Transformed) -> ObservationTransformer<Void>\n    {\n        filter({ $0 == message }).map { _ in }\n    }\n}\n"},{"name":"ObservationTransformer+FilterAuthor.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":38,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":11,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":3,"character":82}},"name":"filterAuthor(_:receiveFiltered:)","references":[{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+From.swift"},{"range":{"start":{"line":5,"character":8},"end":{"line":5,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+NotFrom.swift"}]},{"range":{"start":{"line":13,"character":4},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":9},"end":{"line":14,"character":71}},"name":"filterAuthor(_:receiveFiltered:)","references":[{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+From.swift"},{"range":{"start":{"line":12,"character":8},"end":{"line":12,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+NotFrom.swift"}]},{"range":{"start":{"line":24,"character":4},"end":{"line":37,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":9},"end":{"line":24,"character":60}},"name":"filterAuthor(_:)","references":[{"range":{"start":{"line":18,"character":8},"end":{"line":18,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+From.swift"},{"range":{"start":{"line":18,"character":8},"end":{"line":18,"character":8}},"filePathRelativeToRoot":"Code/SwiftObserver/Transforms/ObservationTransforms/ObservationTransformer+Transforms/ObservationTransformer+NotFrom.swift"}]}]}],"code":"public extension ObservationTransformer\n{\n    func filterAuthor(_ keep: @escaping (AnyAuthor) -> Bool,\n                      receiveFiltered: @escaping (Transformed, AnyAuthor) -> Void)\n    {\n        startObservation\n        {\n            message, author in\n\n            if keep(author) { receiveFiltered(message, author) }\n        }\n    }\n    \n    func filterAuthor(_ keep: @escaping (AnyAuthor) -> Bool,\n                      receiveFiltered: @escaping (Transformed) -> Void)\n    {\n        startObservation\n        {\n            message, author in\n\n            if keep(author) { receiveFiltered(message) }\n        }\n    }\n    \n    func filterAuthor(_ keep: @escaping (AnyAuthor) -> Bool) -> ObservationTransformer<Transformed>\n    {\n        ObservationTransformer\n        {\n            receiveFiltered in\n\n            self.startObservation\n            {\n                message, author in\n                \n                if keep(author) { receiveFiltered(message, author) }\n            }\n        }\n    }\n}\n"},{"name":"ObservationTransformer+Unwrap.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":39,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":11,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":2,"character":86}},"name":"unwrap(receiveUnwrapped:)","children":[{"range":{"start":{"line":2,"character":16},"end":{"line":2,"character":25}},"kind":26,"selectionRange":{"start":{"line":2,"character":16},"end":{"line":2,"character":25}},"name":"Unwrapped"},{"range":{"start":{"line":9,"character":19},"end":{"line":9,"character":28}},"kind":13,"selectionRange":{"start":{"line":9,"character":19},"end":{"line":9,"character":28}},"name":"unwrapped"}]},{"range":{"start":{"line":13,"character":4},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":13,"character":9},"end":{"line":13,"character":75}},"name":"unwrap(receiveUnwrapped:)","children":[{"range":{"start":{"line":13,"character":16},"end":{"line":13,"character":25}},"kind":26,"selectionRange":{"start":{"line":13,"character":16},"end":{"line":13,"character":25}},"name":"Unwrapped"},{"range":{"start":{"line":20,"character":19},"end":{"line":20,"character":28}},"kind":13,"selectionRange":{"start":{"line":20,"character":19},"end":{"line":20,"character":28}},"name":"unwrapped"}]},{"range":{"start":{"line":24,"character":4},"end":{"line":38,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":9},"end":{"line":24,"character":28}},"name":"unwrap()","children":[{"range":{"start":{"line":24,"character":16},"end":{"line":24,"character":25}},"kind":26,"selectionRange":{"start":{"line":24,"character":16},"end":{"line":24,"character":25}},"name":"Unwrapped"},{"range":{"start":{"line":35,"character":23},"end":{"line":35,"character":32}},"kind":13,"selectionRange":{"start":{"line":35,"character":23},"end":{"line":35,"character":32}},"name":"unwrapped"}]}]}],"code":"public extension ObservationTransformer\n{\n    func unwrap<Unwrapped>(receiveUnwrapped: @escaping (Unwrapped, AnyAuthor) -> Void)\n        where Transformed == Unwrapped?\n    {\n        startObservation\n        {\n            message, author in\n            \n            if let unwrapped = message { receiveUnwrapped(unwrapped, author) }\n        }\n    }\n    \n    func unwrap<Unwrapped>(receiveUnwrapped: @escaping (Unwrapped) -> Void)\n        where Transformed == Unwrapped?\n    {\n        startObservation\n        {\n            message, _ in\n            \n            if let unwrapped = message { receiveUnwrapped(unwrapped) }\n        }\n    }\n    \n    func unwrap<Unwrapped>() -> ObservationTransformer<Unwrapped>\n        where Transformed == Unwrapped?\n    {\n        ObservationTransformer<Unwrapped>\n        {\n            receiveUnwrapped in\n            \n            self.startObservation\n            {\n                message, author in\n                \n                if let unwrapped = message { receiveUnwrapped(unwrapped, author) }\n            }\n        }\n    }\n}\n"},{"name":"ObservationTransformer+NotFrom.swift","symbols":[{"range":{"start":{"line":0,"character":7},"end":{"line":20,"character":1}},"kind":3,"selectionRange":{"start":{"line":0,"character":17},"end":{"line":0,"character":39}},"name":"ObservationTransformer","children":[{"range":{"start":{"line":2,"character":4},"end":{"line":7,"character":5}},"kind":6,"selectionRange":{"start":{"line":2,"character":9},"end":{"line":3,"character":77}},"name":"notFrom(_:receiveExcluded:)","children":[{"range":{"start":{"line":5,"character":29},"end":{"line":5,"character":43}},"kind":13,"selectionRange":{"start":{"line":5,"character":29},"end":{"line":5,"character":43}},"name":"excludedAuthor"}]},{"range":{"start":{"line":9,"character":4},"end":{"line":14,"character":5}},"kind":6,"selectionRange":{"start":{"line":9,"character":9},"end":{"line":10,"character":66}},"name":"notFrom(_:receiveExcluded:)","children":[{"range":{"start":{"line":12,"character":29},"end":{"line":12,"character":43}},"kind":13,"selectionRange":{"start":{"line":12,"character":29},"end":{"line":12,"character":43}},"name":"excludedAuthor"}]},{"range":{"start":{"line":16,"character":4},"end":{"line":19,"character":5}},"kind":6,"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":45}},"name":"notFrom(_:)","children":[{"range":{"start":{"line":18,"character":29},"end":{"line":18,"character":43}},"kind":13,"selectionRange":{"start":{"line":18,"character":29},"end":{"line":18,"character":43}},"name":"excludedAuthor"}]}]}],"code":"public extension ObservationTransformer\n{\n    func notFrom(_ excludedAuthor: AnyAuthor,\n                 receiveExcluded: @escaping (Transformed, AnyAuthor) -> Void)\n    {\n        filterAuthor({ [weak excludedAuthor] in $0 !== excludedAuthor },\n                     receiveFiltered: receiveExcluded)\n    }\n    \n    func notFrom(_ excludedAuthor: AnyAuthor,\n                 receiveExcluded: @escaping (Transformed) -> Void)\n    {\n        filterAuthor({ [weak excludedAuthor] in $0 !== excludedAuthor },\n                     receiveFiltered: receiveExcluded)\n    }\n    \n    func notFrom(_ excludedAuthor: AnyAuthor) -> ObservationTransformer<Transformed>\n    {\n        filterAuthor { [weak excludedAuthor] in $0 !== excludedAuthor }\n    }\n}\n"}]}]}]}]}]}]}}