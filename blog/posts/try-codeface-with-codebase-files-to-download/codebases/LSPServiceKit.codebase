{"codebase":{"name":"LSPServiceKit","files":[{"name":"Package.swift","symbols":[{"range":{"start":{"line":4,"character":0},"end":{"line":43,"character":1}},"kind":13,"selectionRange":{"start":{"line":4,"character":4},"end":{"line":4,"character":11}},"name":"package"}],"code":"// swift-tools-version:5.6.0\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"LSPServiceKit\",\n    platforms: [.iOS(.v11), .tvOS(.v11), .macOS(.v12)],\n    products: [\n        .library(\n            name: \"LSPServiceKit\",\n            targets: [\"LSPServiceKit\"]\n        )\n    ],\n    dependencies: [\n        .package(\n            url: \"https://github.com/codeface-io/SwiftLSP.git\",\n            branch: \"master\"\n        ),\n        .package(\n            url: \"https://github.com/flowtoolz/FoundationToolz.git\",\n            branch: \"master\"\n        ),\n        .package(\n            url: \"https://github.com/codeface-io/SwiftObserver.git\",\n            branch: \"master\"\n        ),\n        .package(\n            url: \"https://github.com/flowtoolz/SwiftyToolz.git\",\n            branch: \"master\"\n        )\n    ],\n    targets: [\n        .target(\n            name: \"LSPServiceKit\",\n            dependencies: [\"SwiftLSP\", \"FoundationToolz\", \"SwiftObserver\", \"SwiftyToolz\"],\n            path: \"Code\"\n        ),\n        .testTarget(\n            name: \"LSPServiceKitTests\",\n            dependencies: [\"LSPServiceKit\", \"SwiftLSP\"],\n            path: \"Tests\"\n        )\n    ]\n)\n"}],"subfolders":[{"name":"Tests","files":[{"name":"LSPServiceKitTests.swift","symbols":[{"range":{"start":{"line":4,"character":6},"end":{"line":21,"character":1}},"kind":5,"selectionRange":{"start":{"line":4,"character":12},"end":{"line":4,"character":30}},"name":"LSPServiceKitTests","children":[{"range":{"start":{"line":6,"character":4},"end":{"line":15,"character":5}},"kind":6,"selectionRange":{"start":{"line":6,"character":9},"end":{"line":6,"character":27}},"name":"testEndpointURLs()"},{"range":{"start":{"line":17,"character":4},"end":{"line":20,"character":5}},"kind":6,"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":49}},"name":"testEndpointURLLanguageIsCaseSensitive()"}]}],"code":"@testable import LSPServiceKit\nimport SwiftLSP\nimport XCTest\n\nfinal class LSPServiceKitTests: XCTestCase {\n\n    func testEndpointURLs() throws {\n        XCTAssertEqual(LSPService.api.url.absoluteString,\n                       \"http://127.0.0.1:8080/lspservice/api\")\n        \n        XCTAssertEqual(LSPService.api.processID.url.absoluteString,\n                       \"http://127.0.0.1:8080/lspservice/api/processID\")\n        \n        XCTAssertEqual(LSPService.api.language(\"swift\").websocket.url.absoluteString,\n                       \"http://127.0.0.1:8080/lspservice/api/language/swift/websocket\")\n    }\n    \n    func testEndpointURLLanguageIsCaseSensitive() throws {\n        XCTAssertEqual(LSPService.api.language(\"Swift\").websocket.url.absoluteString,\n                       \"http://127.0.0.1:8080/lspservice/api/language/Swift/websocket\")\n    }\n}\n"}]},{"name":"Code","files":[{"name":"LSPService.swift","symbols":[{"range":{"start":{"line":3,"character":7},"end":{"line":52,"character":1}},"kind":10,"selectionRange":{"start":{"line":3,"character":12},"end":{"line":3,"character":22}},"name":"LSPService","children":[{"range":{"start":{"line":5,"character":11},"end":{"line":5,"character":42}},"kind":7,"selectionRange":{"start":{"line":5,"character":22},"end":{"line":5,"character":25}},"name":"api","references":[{"range":{"start":{"line":17,"character":49},"end":{"line":17,"character":49}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"},{"range":{"start":{"line":6,"character":38},"end":{"line":6,"character":38}},"filePathRelativeToRoot":"Code/LSPService+LSP.ServerCommunicationHandler.swift"}]},{"range":{"start":{"line":7,"character":11},"end":{"line":51,"character":5}},"kind":23,"selectionRange":{"start":{"line":7,"character":18},"end":{"line":7,"character":30}},"name":"APIComponent","children":[{"range":{"start":{"line":9,"character":17},"end":{"line":11,"character":9}},"kind":6,"selectionRange":{"start":{"line":9,"character":17},"end":{"line":9,"character":23}},"name":"init()","references":[{"range":{"start":{"line":5,"character":28},"end":{"line":5,"character":28}},"filePathRelativeToRoot":"Code/LSPService.swift"}]},{"range":{"start":{"line":13,"character":15},"end":{"line":13,"character":48}},"kind":7,"selectionRange":{"start":{"line":13,"character":19},"end":{"line":13,"character":28}},"name":"processID","references":[{"range":{"start":{"line":17,"character":53},"end":{"line":17,"character":53}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"},{"range":{"start":{"line":10,"character":12},"end":{"line":10,"character":12}},"filePathRelativeToRoot":"Code/LSPService.swift"}]},{"range":{"start":{"line":15,"character":15},"end":{"line":26,"character":9}},"kind":23,"selectionRange":{"start":{"line":15,"character":22},"end":{"line":15,"character":40}},"name":"ProcessIDComponent","children":[{"range":{"start":{"line":17,"character":21},"end":{"line":19,"character":13}},"kind":6,"selectionRange":{"start":{"line":17,"character":21},"end":{"line":17,"character":39}},"name":"init(rootURL:)","references":[{"range":{"start":{"line":10,"character":24},"end":{"line":10,"character":24}},"filePathRelativeToRoot":"Code/LSPService.swift"}]},{"range":{"start":{"line":21,"character":19},"end":{"line":23,"character":13}},"kind":6,"selectionRange":{"start":{"line":21,"character":24},"end":{"line":21,"character":29}},"name":"get()","references":[{"range":{"start":{"line":17,"character":63},"end":{"line":17,"character":63}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"}]},{"range":{"start":{"line":25,"character":21},"end":{"line":25,"character":33}},"kind":7,"selectionRange":{"start":{"line":25,"character":25},"end":{"line":25,"character":28}},"name":"url","references":[{"range":{"start":{"line":18,"character":16},"end":{"line":18,"character":16}},"filePathRelativeToRoot":"Code/LSPService.swift"},{"range":{"start":{"line":22,"character":26},"end":{"line":22,"character":26}},"filePathRelativeToRoot":"Code/LSPService.swift"}]}],"references":[{"range":{"start":{"line":10,"character":24},"end":{"line":10,"character":24}},"filePathRelativeToRoot":"Code/LSPService.swift"},{"range":{"start":{"line":13,"character":30},"end":{"line":13,"character":30}},"filePathRelativeToRoot":"Code/LSPService.swift"}]},{"range":{"start":{"line":28,"character":15},"end":{"line":30,"character":9}},"kind":6,"selectionRange":{"start":{"line":28,"character":20},"end":{"line":28,"character":52}},"name":"language(_:)","references":[{"range":{"start":{"line":6,"character":42},"end":{"line":6,"character":42}},"filePathRelativeToRoot":"Code/LSPService+LSP.ServerCommunicationHandler.swift"}]},{"range":{"start":{"line":32,"character":15},"end":{"line":48,"character":9}},"kind":23,"selectionRange":{"start":{"line":32,"character":22},"end":{"line":32,"character":39}},"name":"LanguageComponent","children":[{"range":{"start":{"line":34,"character":21},"end":{"line":36,"character":13}},"kind":6,"selectionRange":{"start":{"line":34,"character":21},"end":{"line":34,"character":35}},"name":"init(url:)","references":[{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":12}},"filePathRelativeToRoot":"Code/LSPService.swift"}]},{"range":{"start":{"line":38,"character":19},"end":{"line":38,"character":52}},"kind":7,"selectionRange":{"start":{"line":38,"character":23},"end":{"line":38,"character":32}},"name":"websocket","references":[{"range":{"start":{"line":6,"character":65},"end":{"line":6,"character":65}},"filePathRelativeToRoot":"Code/LSPService+LSP.ServerCommunicationHandler.swift"},{"range":{"start":{"line":35,"character":16},"end":{"line":35,"character":16}},"filePathRelativeToRoot":"Code/LSPService.swift"}]},{"range":{"start":{"line":40,"character":19},"end":{"line":47,"character":13}},"kind":23,"selectionRange":{"start":{"line":40,"character":26},"end":{"line":40,"character":44}},"name":"WebSocketComponent","children":[{"range":{"start":{"line":42,"character":23},"end":{"line":44,"character":17}},"kind":6,"selectionRange":{"start":{"line":42,"character":28},"end":{"line":42,"character":37}},"name":"connect()","references":[{"range":{"start":{"line":5,"character":47},"end":{"line":5,"character":47}},"filePathRelativeToRoot":"Code/LSPService+LSP.WebSocketConnection.swift"}]},{"range":{"start":{"line":46,"character":16},"end":{"line":46,"character":28}},"kind":7,"selectionRange":{"start":{"line":46,"character":20},"end":{"line":46,"character":23}},"name":"url","references":[{"range":{"start":{"line":35,"character":47},"end":{"line":35,"character":47}},"filePathRelativeToRoot":"Code/LSPService.swift"},{"range":{"start":{"line":43,"character":24},"end":{"line":43,"character":24}},"filePathRelativeToRoot":"Code/LSPService.swift"}]}],"references":[{"range":{"start":{"line":2,"character":52},"end":{"line":2,"character":52}},"filePathRelativeToRoot":"Code/LSPService+LSP.WebSocketConnection.swift"},{"range":{"start":{"line":35,"character":28},"end":{"line":35,"character":28}},"filePathRelativeToRoot":"Code/LSPService.swift"},{"range":{"start":{"line":38,"character":34},"end":{"line":38,"character":34}},"filePathRelativeToRoot":"Code/LSPService.swift"}]}],"references":[{"range":{"start":{"line":2,"character":34},"end":{"line":2,"character":34}},"filePathRelativeToRoot":"Code/LSPService+LSP.WebSocketConnection.swift"},{"range":{"start":{"line":28,"character":56},"end":{"line":28,"character":56}},"filePathRelativeToRoot":"Code/LSPService.swift"},{"range":{"start":{"line":29,"character":12},"end":{"line":29,"character":12}},"filePathRelativeToRoot":"Code/LSPService.swift"}]},{"range":{"start":{"line":50,"character":17},"end":{"line":50,"character":79}},"kind":7,"selectionRange":{"start":{"line":50,"character":21},"end":{"line":50,"character":24}},"name":"url","references":[{"range":{"start":{"line":10,"character":52},"end":{"line":10,"character":52}},"filePathRelativeToRoot":"Code/LSPService.swift"},{"range":{"start":{"line":29,"character":36},"end":{"line":29,"character":36}},"filePathRelativeToRoot":"Code/LSPService.swift"}]}],"references":[{"range":{"start":{"line":2,"character":21},"end":{"line":2,"character":21}},"filePathRelativeToRoot":"Code/LSPService+LSP.WebSocketConnection.swift"},{"range":{"start":{"line":5,"character":28},"end":{"line":5,"character":28}},"filePathRelativeToRoot":"Code/LSPService.swift"}]}],"references":[{"range":{"start":{"line":17,"character":38},"end":{"line":17,"character":38}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"},{"range":{"start":{"line":26,"character":29},"end":{"line":26,"character":29}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"},{"range":{"start":{"line":3,"character":17},"end":{"line":3,"character":17}},"filePathRelativeToRoot":"Code/LSPService+LSP.ServerCommunicationHandler.swift"},{"range":{"start":{"line":2,"character":10},"end":{"line":2,"character":10}},"filePathRelativeToRoot":"Code/LSPService+LSP.WebSocketConnection.swift"}]}],"code":"import FoundationToolz\nimport Foundation\n\npublic enum LSPService {\n    \n    public static let api = APIComponent()\n    \n    public struct APIComponent {\n        \n        internal init() {\n            processID = ProcessIDComponent(rootURL: url)\n        }\n        \n        public let processID: ProcessIDComponent\n        \n        public struct ProcessIDComponent {\n            \n            internal init(rootURL: URL) {\n                url = rootURL + \"processID\"\n            }\n            \n            public func get() async throws -> Int {\n                try await url.get(Int.self)\n            }\n            \n            internal let url: URL\n        }\n        \n        public func language(_ languageName: String) -> LanguageComponent {\n            LanguageComponent(url: (url + \"language\") + languageName)\n        }\n        \n        public struct LanguageComponent {\n            \n            internal init(url: URL) {\n                websocket = WebSocketComponent(url: url + \"websocket\")\n            }\n            \n            public let websocket: WebSocketComponent\n            \n            public struct WebSocketComponent\n            {\n                public func connect() throws -> WebSocket {\n                    try url.webSocket()\n                }\n                \n                let url: URL\n            }\n        }\n        \n        internal let url = URL(string: \"http://127.0.0.1:8080/lspservice/api\")!\n    }\n}\n"},{"name":"LSPService+LSP.WebSocketConnection.swift","symbols":[{"range":{"start":{"line":2,"character":0},"end":{"line":7,"character":1}},"kind":3,"selectionRange":{"start":{"line":2,"character":10},"end":{"line":2,"character":70}},"name":"LSPService.APIComponent.LanguageComponent.WebSocketComponent","children":[{"range":{"start":{"line":4,"character":4},"end":{"line":6,"character":5}},"kind":6,"selectionRange":{"start":{"line":4,"character":9},"end":{"line":4,"character":32}},"name":"connectToLSPWebSocket()","references":[{"range":{"start":{"line":6,"character":75},"end":{"line":6,"character":75}},"filePathRelativeToRoot":"Code/LSPService+LSP.ServerCommunicationHandler.swift"}]}]}],"code":"import SwiftLSP\n\nextension LSPService.APIComponent.LanguageComponent.WebSocketComponent {\n    \n    func connectToLSPWebSocket() throws -> LSP.WebSocketConnection {\n        try LSP.WebSocketConnection(webSocket: connect())\n    }\n}\n"},{"name":"LSP.ServerManager.swift","symbols":[{"range":{"start":{"line":5,"character":7},"end":{"line":46,"character":1}},"kind":3,"selectionRange":{"start":{"line":5,"character":17},"end":{"line":5,"character":20}},"name":"LSP","children":[{"range":{"start":{"line":7,"character":4},"end":{"line":45,"character":5}},"kind":5,"selectionRange":{"start":{"line":7,"character":10},"end":{"line":7,"character":23}},"name":"ServerManager","children":[{"range":{"start":{"line":9,"character":15},"end":{"line":9,"character":50}},"kind":7,"selectionRange":{"start":{"line":9,"character":26},"end":{"line":9,"character":32}},"name":"shared"},{"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":25}},"kind":6,"selectionRange":{"start":{"line":11,"character":16},"end":{"line":11,"character":22}},"name":"init()","references":[{"range":{"start":{"line":9,"character":35},"end":{"line":9,"character":35}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"}]},{"range":{"start":{"line":14,"character":15},"end":{"line":22,"character":9}},"kind":6,"selectionRange":{"start":{"line":14,"character":20},"end":{"line":14,"character":68}},"name":"initializeServer(for:)","children":[{"range":{"start":{"line":16,"character":12},"end":{"line":16,"character":88}},"kind":13,"selectionRange":{"start":{"line":16,"character":16},"end":{"line":16,"character":22}},"name":"server"},{"range":{"start":{"line":17,"character":12},"end":{"line":17,"character":68}},"kind":13,"selectionRange":{"start":{"line":17,"character":16},"end":{"line":17,"character":25}},"name":"processID"}]},{"range":{"start":{"line":24,"character":16},"end":{"line":42,"character":9}},"kind":6,"selectionRange":{"start":{"line":24,"character":21},"end":{"line":24,"character":72}},"name":"createServer(forLanguageNamed:)","children":[{"range":{"start":{"line":26,"character":12},"end":{"line":26,"character":90}},"kind":13,"selectionRange":{"start":{"line":26,"character":16},"end":{"line":26,"character":22}},"name":"server"}],"references":[{"range":{"start":{"line":16,"character":35},"end":{"line":16,"character":35}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"}]},{"range":{"start":{"line":44,"character":26},"end":{"line":44,"character":53}},"kind":7,"selectionRange":{"start":{"line":44,"character":30},"end":{"line":44,"character":45}},"name":"serverIsWorking","references":[{"range":{"start":{"line":15,"character":12},"end":{"line":15,"character":12}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"},{"range":{"start":{"line":20,"character":12},"end":{"line":20,"character":12}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"},{"range":{"start":{"line":38,"character":21},"end":{"line":38,"character":21}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"}]}],"references":[{"range":{"start":{"line":9,"character":35},"end":{"line":9,"character":35}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"}]}]}],"code":"import SwiftLSP\nimport FoundationToolz\nimport Foundation\nimport SwiftyToolz\n\npublic extension LSP {\n    \n    class ServerManager: ObservableObject {\n        \n        public static let shared = ServerManager()\n        \n        private init() {}\n        \n        // TODO: test this interaction with the server, is this test possible without \"dependency injection\", i.e. how would we model the interaction logic in order to extract it? return some sort of \"workflow\" or \"interaction\" type??\n        public func initializeServer(for codebase: CodebaseLocation) async throws -> LSP.Server {\n            serverIsWorking = false\n            let server = try await createServer(forLanguageNamed: codebase.languageName)\n            let processID = try await LSPService.api.processID.get()\n            _ = try await server.request(.initialize(folder: codebase.folder, clientProcessID: processID))\n            try await server.notify(.initialized)\n            serverIsWorking = true\n            return server\n        }\n        \n        private func createServer(forLanguageNamed languageName: String) async throws -> LSP.Server {\n            \n            let server = try LSPService.connectToLSPServer(forLanguageNamed: languageName)\n            \n            await server.handleNotificationFromServer { notification in\n                //            log(\"Server sent notification:\\n\\(notification.method)\\n\\(notification.params?.description ?? \"nil params\")\")\n            }\n            \n            await server.handleErrorOutputFromServer { _ in\n                //            log(\"\\(language.capitalized) language server sent message via stdErr:\\n\\($0)\")\n            }\n            \n            await server.handleConnectionShutdown { error in\n                log(error.readable)\n                self.serverIsWorking = false\n            }\n            \n            return server\n        }\n        \n        @Published public var serverIsWorking = false\n    }\n}\n"},{"name":"LSPService+LSP.ServerCommunicationHandler.swift","symbols":[{"range":{"start":{"line":3,"character":7},"end":{"line":10,"character":1}},"kind":3,"selectionRange":{"start":{"line":3,"character":17},"end":{"line":3,"character":27}},"name":"LSPService","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":9,"character":5}},"kind":6,"selectionRange":{"start":{"line":5,"character":16},"end":{"line":5,"character":73}},"name":"connectToLSPServer(forLanguageNamed:)","children":[{"range":{"start":{"line":6,"character":8},"end":{"line":6,"character":98}},"kind":13,"selectionRange":{"start":{"line":6,"character":12},"end":{"line":6,"character":31}},"name":"lspServerConnection"}],"references":[{"range":{"start":{"line":26,"character":40},"end":{"line":26,"character":40}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"}]}]}],"code":"import SwiftLSP\nimport FoundationToolz\n\npublic extension LSPService {\n    \n    static func connectToLSPServer(forLanguageNamed languageName: String) throws -> LSP.Server {\n        let lspServerConnection = try api.language(languageName).websocket.connectToLSPWebSocket()\n        return LSP.Server(connection: lspServerConnection,\n                          languageName: languageName)\n    }\n}\n"},{"name":"LSP.CodebaseLocation.swift","symbols":[{"range":{"start":{"line":3,"character":7},"end":{"line":19,"character":1}},"kind":3,"selectionRange":{"start":{"line":3,"character":17},"end":{"line":3,"character":20}},"name":"LSP","children":[{"range":{"start":{"line":5,"character":4},"end":{"line":18,"character":5}},"kind":23,"selectionRange":{"start":{"line":5,"character":11},"end":{"line":5,"character":27}},"name":"CodebaseLocation","children":[{"range":{"start":{"line":7,"character":15},"end":{"line":13,"character":9}},"kind":6,"selectionRange":{"start":{"line":7,"character":15},"end":{"line":9,"character":46}},"name":"init(folder:languageName:codeFileEndings:)"},{"range":{"start":{"line":15,"character":15},"end":{"line":15,"character":30}},"kind":7,"selectionRange":{"start":{"line":15,"character":19},"end":{"line":15,"character":25}},"name":"folder","references":[{"range":{"start":{"line":18,"character":70},"end":{"line":18,"character":70}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"},{"range":{"start":{"line":10,"character":17},"end":{"line":10,"character":17}},"filePathRelativeToRoot":"Code/LSP.CodebaseLocation.swift"}]},{"range":{"start":{"line":16,"character":15},"end":{"line":16,"character":39}},"kind":7,"selectionRange":{"start":{"line":16,"character":19},"end":{"line":16,"character":31}},"name":"languageName","references":[{"range":{"start":{"line":16,"character":75},"end":{"line":16,"character":75}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"},{"range":{"start":{"line":11,"character":17},"end":{"line":11,"character":17}},"filePathRelativeToRoot":"Code/LSP.CodebaseLocation.swift"}]},{"range":{"start":{"line":17,"character":15},"end":{"line":17,"character":44}},"kind":7,"selectionRange":{"start":{"line":17,"character":19},"end":{"line":17,"character":34}},"name":"codeFileEndings","references":[{"range":{"start":{"line":12,"character":17},"end":{"line":12,"character":17}},"filePathRelativeToRoot":"Code/LSP.CodebaseLocation.swift"}]}],"references":[{"range":{"start":{"line":14,"character":51},"end":{"line":14,"character":51}},"filePathRelativeToRoot":"Code/LSP.ServerManager.swift"}]}]}],"code":"import Foundation\nimport SwiftLSP\n\npublic extension LSP {\n    \n    struct CodebaseLocation: Codable, Equatable {\n        \n        public init(folder: URL,\n                    languageName: String,\n                    codeFileEndings: [String]) {\n            self.folder = folder\n            self.languageName = languageName\n            self.codeFileEndings = codeFileEndings\n        }\n        \n        public var folder: URL\n        public let languageName: String\n        public let codeFileEndings: [String]\n    }\n}\n"}]}]}}